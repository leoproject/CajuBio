#define MCG_WINRT_SUPPORTED
using Mcg.System;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.WindowsRuntime;
using global::Windows.Foundation;
using global::Windows.Foundation.Collections;


// -----------------------------------------------------------------------------------------------------------
// 
// WARNING: THIS SOURCE FILE IS FOR 32-BIT BUILDS ONLY!
// 
// MCG GENERATED CODE
// 
// This C# source file is generated by MCG and is added into the application at compile time to support interop features.
// 
// It has three primary components:
// 
// 1. Public type definitions with interop implementation used by this application including WinRT & COM data structures and P/Invokes.
// 
// 2. The '__Interop' class containing marshaling code that acts as a bridge from managed code to native code.
// 
// 3. The 'McgNative' class containing marshaling code and native type definitions that call into native code and are called by native code.
// 
// -----------------------------------------------------------------------------------------------------------
// 
// warning CS0067: The event 'event' is never used
#pragma warning disable 67
// warning CS0169: The field 'field' is never used
#pragma warning disable 169
// warning CS0649: Field 'field' is never assigned to, and will always have its default value 0
#pragma warning disable 414
// warning CS0414: The private field 'field' is assigned but its value is never used
#pragma warning disable 649
// warning CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// warning CS0108 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable 108
// warning CS0114 'member1' hides inherited member 'member2'.  To make the current method override that implementation, add the override keyword. Otherwise add the new keyword.
#pragma warning disable 114
// warning CS0659 'type' overrides Object.Equals but does not override GetHashCode.
#pragma warning disable 659
// warning CS0465 Introducing a 'Finalize' method can interfere with destructor invocation. Did you intend to declare a destructor?
#pragma warning disable 465
// warning CS0028 'function declaration' has the wrong signature to be an entry point
#pragma warning disable 28
// warning CS0162 Unreachable code Detected
#pragma warning disable 162
// warning CS0628 new protected member declared in sealed class
#pragma warning disable 628

namespace __Interop
{
	/// <summary>
	/// P/Invoke class for module 'libSkiaSharp.dll'
	/// </summary>
	public unsafe static partial class libSkiaSharp_dll
	{
		// Signature, sk_colorspace_unref, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorspace_unref")]
		public static void sk_colorspace_unref(global::System.IntPtr cColorSpace)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorspace_unref(cColorSpace);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_colorspace_gamma_close_to_srgb, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorspace_gamma_close_to_srgb")]
		public static bool sk_colorspace_gamma_close_to_srgb(global::System.IntPtr cColorSpace)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorspace_gamma_close_to_srgb(cColorSpace);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_colorspace_gamma_is_linear, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorspace_gamma_is_linear")]
		public static bool sk_colorspace_gamma_is_linear(global::System.IntPtr cColorSpace)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorspace_gamma_is_linear(cColorSpace);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_colorspace_is_srgb, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorspace_is_srgb")]
		public static bool sk_colorspace_is_srgb(global::System.IntPtr cColorSpace)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorspace_is_srgb(cColorSpace);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_colorspace_equals, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorspace_equals")]
		public static bool sk_colorspace_equals(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorspace_equals(
								src, 
								dst
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_colorspace_new_srgb, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorspace_new_srgb")]
		public static global::System.IntPtr sk_colorspace_new_srgb()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorspace_new_srgb();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_colorspace_new_srgb_linear, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorspace_new_srgb_linear")]
		public static global::System.IntPtr sk_colorspace_new_srgb_linear()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorspace_new_srgb_linear();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_colorspace_new_icc, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorspace_new_icc")]
		public static global::System.IntPtr sk_colorspace_new_icc(
					global::System.IntPtr input, 
					global::System.IntPtr len)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorspace_new_icc(
								input, 
								len
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_colorspace_new_icc__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorspace_new_icc")]
		public static global::System.IntPtr sk_colorspace_new_icc__0(
					byte[] input, 
					global::System.IntPtr len)
		{
			// Setup
			byte* unsafe_input;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_input = ((input != null 
						&& input.Length == 0) ? new byte[1] : input))
			{
				unsafe_input = (byte*)pinned_input;
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorspace_new_icc__0(
									unsafe_input, 
									len
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_colorspace_new_rgb_with_gamma, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKColorSpaceRenderTargetGamma__SkiaSharp__SKColorSpaceRenderTargetGamma__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKColorSpaceFlags__SkiaSharp__SKColorSpaceFlags__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorspace_new_rgb_with_gamma")]
		public static global::System.IntPtr sk_colorspace_new_rgb_with_gamma(
					global::SkiaSharp.SKColorSpaceRenderTargetGamma__SkiaSharp gamma, 
					global::System.IntPtr toXYZD50, 
					global::SkiaSharp.SKColorSpaceFlags__SkiaSharp flags)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorspace_new_rgb_with_gamma(
								gamma, 
								toXYZD50, 
								flags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_colorspace_new_rgb_with_gamma_and_gamut, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKColorSpaceRenderTargetGamma__SkiaSharp__SKColorSpaceRenderTargetGamma__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKColorSpaceGamut__SkiaSharp__SKColorSpaceGamut__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKColorSpaceFlags__SkiaSharp__SKColorSpaceFlags__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorspace_new_rgb_with_gamma_and_gamut")]
		public static global::System.IntPtr sk_colorspace_new_rgb_with_gamma_and_gamut(
					global::SkiaSharp.SKColorSpaceRenderTargetGamma__SkiaSharp gamma, 
					global::SkiaSharp.SKColorSpaceGamut__SkiaSharp gamut, 
					global::SkiaSharp.SKColorSpaceFlags__SkiaSharp flags)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorspace_new_rgb_with_gamma_and_gamut(
								gamma, 
								gamut, 
								flags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_colorspace_new_rgb_with_coeffs, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKColorSpaceTransferFn__SkiaSharp__SkiaSharp__SKColorSpaceTransferFn__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKColorSpaceFlags__SkiaSharp__SKColorSpaceFlags__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorspace_new_rgb_with_coeffs")]
		public static global::System.IntPtr sk_colorspace_new_rgb_with_coeffs(
					ref global::SkiaSharp.SKColorSpaceTransferFn__SkiaSharp coeffs, 
					global::System.IntPtr toXYZD50, 
					global::SkiaSharp.SKColorSpaceFlags__SkiaSharp flags)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKColorSpaceTransferFn__SkiaSharp* pinned_coeffs = &(coeffs))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorspace_new_rgb_with_coeffs(
									pinned_coeffs, 
									toXYZD50, 
									flags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_colorspace_new_rgb_with_coeffs_and_gamut, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKColorSpaceTransferFn__SkiaSharp__SkiaSharp__SKColorSpaceTransferFn__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKColorSpaceGamut__SkiaSharp__SKColorSpaceGamut__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKColorSpaceFlags__SkiaSharp__SKColorSpaceFlags__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorspace_new_rgb_with_coeffs_and_gamut")]
		public static global::System.IntPtr sk_colorspace_new_rgb_with_coeffs_and_gamut(
					ref global::SkiaSharp.SKColorSpaceTransferFn__SkiaSharp coeffs, 
					global::SkiaSharp.SKColorSpaceGamut__SkiaSharp gamut, 
					global::SkiaSharp.SKColorSpaceFlags__SkiaSharp flags)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKColorSpaceTransferFn__SkiaSharp* pinned_coeffs = &(coeffs))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorspace_new_rgb_with_coeffs_and_gamut(
									pinned_coeffs, 
									gamut, 
									flags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_colorspace_to_xyzd50, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorspace_to_xyzd50")]
		public static bool sk_colorspace_to_xyzd50(
					global::System.IntPtr cColorSpace, 
					global::System.IntPtr toXYZD50)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorspace_to_xyzd50(
								cColorSpace, 
								toXYZD50
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_colorspaceprimaries_to_xyzd50, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKColorSpacePrimaries__SkiaSharp__SkiaSharp__SKColorSpacePrimaries__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorspaceprimaries_to_xyzd50")]
		public static bool sk_colorspaceprimaries_to_xyzd50(
					ref global::SkiaSharp.SKColorSpacePrimaries__SkiaSharp primaries, 
					global::System.IntPtr toXYZD50)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKColorSpacePrimaries__SkiaSharp* pinned_primaries = &(primaries))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorspaceprimaries_to_xyzd50(
									pinned_primaries, 
									toXYZD50
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_colorspace_transfer_fn_invert, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKColorSpaceTransferFn__SkiaSharp__SkiaSharp__SKColorSpaceTransferFn__SkiaSharp, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKColorSpaceTransferFn__SkiaSharp__SkiaSharp__SKColorSpaceTransferFn__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorspace_transfer_fn_invert")]
		public static void sk_colorspace_transfer_fn_invert(
					ref global::SkiaSharp.SKColorSpaceTransferFn__SkiaSharp transfer, 
					out global::SkiaSharp.SKColorSpaceTransferFn__SkiaSharp inverted)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKColorSpaceTransferFn__SkiaSharp* pinned_transfer = &(transfer))
				fixed (global::SkiaSharp.SKColorSpaceTransferFn__SkiaSharp* pinned_inverted = &(inverted))
				{
					// Call to native method
					global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorspace_transfer_fn_invert(
										pinned_transfer, 
										pinned_inverted
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
		}

		// Signature, sk_colortype_get_default_8888, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKColorType__SkiaSharp__SKColorType__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colortype_get_default_8888")]
		public static global::SkiaSharp.SKColorType__SkiaSharp sk_colortype_get_default_8888()
		{
			// Setup
			global::SkiaSharp.SKColorType__SkiaSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colortype_get_default_8888();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_surface_unref, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_surface_unref")]
		public static void sk_surface_unref(global::System.IntPtr t)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_surface_unref(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_surface_new_raster, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKSurfaceProps__SkiaSharp__SkiaSharp__SKSurfaceProps__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_surface_new_raster")]
		public static global::System.IntPtr sk_surface_new_raster(
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp info, 
					ref global::SkiaSharp.SKSurfaceProps__SkiaSharp pros)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_info = &(info))
				fixed (global::SkiaSharp.SKSurfaceProps__SkiaSharp* pinned_pros = &(pros))
				{
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_surface_new_raster(
										pinned_info, 
										pinned_pros
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, sk_surface_new_raster__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_surface_new_raster")]
		public static global::System.IntPtr sk_surface_new_raster__0(
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp info, 
					global::System.IntPtr propsZero)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_info = &(info))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_surface_new_raster__0(
									pinned_info, 
									propsZero
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_surface_new_raster_direct, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKSurfaceProps__SkiaSharp__SkiaSharp__SKSurfaceProps__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_surface_new_raster_direct")]
		public static global::System.IntPtr sk_surface_new_raster_direct(
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp info, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes, 
					ref global::SkiaSharp.SKSurfaceProps__SkiaSharp props)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_info = &(info))
				fixed (global::SkiaSharp.SKSurfaceProps__SkiaSharp* pinned_props = &(props))
				{
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_surface_new_raster_direct(
										pinned_info, 
										pixels, 
										rowBytes, 
										pinned_props
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, sk_surface_new_raster_direct__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_surface_new_raster_direct")]
		public static global::System.IntPtr sk_surface_new_raster_direct__0(
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp info, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes, 
					global::System.IntPtr propsZero)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_info = &(info))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_surface_new_raster_direct__0(
									pinned_info, 
									pixels, 
									rowBytes, 
									propsZero
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_surface_get_canvas, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_surface_get_canvas")]
		public static global::System.IntPtr sk_surface_get_canvas(global::System.IntPtr t)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_surface_get_canvas(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_surface_new_image_snapshot, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_surface_new_image_snapshot")]
		public static global::System.IntPtr sk_surface_new_image_snapshot(global::System.IntPtr t)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_surface_new_image_snapshot(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_surface_new_backend_render_target, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_GRBackendRenderTargetDesc__SkiaSharp__SkiaSharp__GRBackendRenderTargetDesc__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKSurfaceProps__SkiaSharp__SkiaSharp__SKSurfaceProps__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_surface_new_backend_render_target")]
		public static global::System.IntPtr sk_surface_new_backend_render_target(
					global::System.IntPtr context, 
					ref global::SkiaSharp.GRBackendRenderTargetDesc__SkiaSharp desc, 
					ref global::SkiaSharp.SKSurfaceProps__SkiaSharp props)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.GRBackendRenderTargetDesc__SkiaSharp* pinned_desc = &(desc))
				fixed (global::SkiaSharp.SKSurfaceProps__SkiaSharp* pinned_props = &(props))
				{
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_surface_new_backend_render_target(
										context, 
										pinned_desc, 
										pinned_props
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, sk_surface_new_backend_render_target__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_GRBackendRenderTargetDesc__SkiaSharp__SkiaSharp__GRBackendRenderTargetDesc__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_surface_new_backend_render_target")]
		public static global::System.IntPtr sk_surface_new_backend_render_target__0(
					global::System.IntPtr context, 
					ref global::SkiaSharp.GRBackendRenderTargetDesc__SkiaSharp desc, 
					global::System.IntPtr propsZero)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.GRBackendRenderTargetDesc__SkiaSharp* pinned_desc = &(desc))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_surface_new_backend_render_target__0(
									context, 
									pinned_desc, 
									propsZero
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_surface_new_backend_texture, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_GRBackendTextureDesc__SkiaSharp__SkiaSharp__GRBackendTextureDesc__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKSurfaceProps__SkiaSharp__SkiaSharp__SKSurfaceProps__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_surface_new_backend_texture")]
		public static global::System.IntPtr sk_surface_new_backend_texture(
					global::System.IntPtr context, 
					ref global::SkiaSharp.GRBackendTextureDesc__SkiaSharp desc, 
					ref global::SkiaSharp.SKSurfaceProps__SkiaSharp props)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.GRBackendTextureDesc__SkiaSharp* pinned_desc = &(desc))
				fixed (global::SkiaSharp.SKSurfaceProps__SkiaSharp* pinned_props = &(props))
				{
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_surface_new_backend_texture(
										context, 
										pinned_desc, 
										pinned_props
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, sk_surface_new_backend_texture__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_GRBackendTextureDesc__SkiaSharp__SkiaSharp__GRBackendTextureDesc__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_surface_new_backend_texture")]
		public static global::System.IntPtr sk_surface_new_backend_texture__0(
					global::System.IntPtr context, 
					ref global::SkiaSharp.GRBackendTextureDesc__SkiaSharp desc, 
					global::System.IntPtr propsZero)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.GRBackendTextureDesc__SkiaSharp* pinned_desc = &(desc))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_surface_new_backend_texture__0(
									context, 
									pinned_desc, 
									propsZero
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_surface_new_backend_texture_as_render_target, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_GRBackendTextureDesc__SkiaSharp__SkiaSharp__GRBackendTextureDesc__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKSurfaceProps__SkiaSharp__SkiaSharp__SKSurfaceProps__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_surface_new_backend_texture_as_render_target")]
		public static global::System.IntPtr sk_surface_new_backend_texture_as_render_target(
					global::System.IntPtr context, 
					ref global::SkiaSharp.GRBackendTextureDesc__SkiaSharp desc, 
					ref global::SkiaSharp.SKSurfaceProps__SkiaSharp props)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.GRBackendTextureDesc__SkiaSharp* pinned_desc = &(desc))
				fixed (global::SkiaSharp.SKSurfaceProps__SkiaSharp* pinned_props = &(props))
				{
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_surface_new_backend_texture_as_render_target(
										context, 
										pinned_desc, 
										pinned_props
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, sk_surface_new_backend_texture_as_render_target__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_GRBackendTextureDesc__SkiaSharp__SkiaSharp__GRBackendTextureDesc__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_surface_new_backend_texture_as_render_target")]
		public static global::System.IntPtr sk_surface_new_backend_texture_as_render_target__0(
					global::System.IntPtr context, 
					ref global::SkiaSharp.GRBackendTextureDesc__SkiaSharp desc, 
					global::System.IntPtr propsZero)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.GRBackendTextureDesc__SkiaSharp* pinned_desc = &(desc))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_surface_new_backend_texture_as_render_target__0(
									context, 
									pinned_desc, 
									propsZero
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_surface_new_render_target, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKSurfaceProps__SkiaSharp__SkiaSharp__SKSurfaceProps__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_surface_new_render_target")]
		public static global::System.IntPtr sk_surface_new_render_target(
					global::System.IntPtr context, 
					bool budgeted, 
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp info, 
					int sampleCount, 
					ref global::SkiaSharp.SKSurfaceProps__SkiaSharp props)
		{
			// Setup
			sbyte unsafe_budgeted;
			global::System.IntPtr unsafe___value;
			// Marshalling
			unsafe_budgeted = (budgeted ? ((sbyte)1) : ((sbyte)0));
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_info = &(info))
				fixed (global::SkiaSharp.SKSurfaceProps__SkiaSharp* pinned_props = &(props))
				{
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_surface_new_render_target(
										context, 
										unsafe_budgeted, 
										pinned_info, 
										sampleCount, 
										pinned_props
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, sk_surface_new_render_target__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_surface_new_render_target")]
		public static global::System.IntPtr sk_surface_new_render_target__0(
					global::System.IntPtr context, 
					bool budgeted, 
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp info, 
					int sampleCount, 
					global::System.IntPtr propsZero)
		{
			// Setup
			sbyte unsafe_budgeted;
			global::System.IntPtr unsafe___value;
			// Marshalling
			unsafe_budgeted = (budgeted ? ((sbyte)1) : ((sbyte)0));
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_info = &(info))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_surface_new_render_target__0(
									context, 
									unsafe_budgeted, 
									pinned_info, 
									sampleCount, 
									propsZero
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_surface_draw, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_surface_draw")]
		public static void sk_surface_draw(
					global::System.IntPtr surface, 
					global::System.IntPtr canvas, 
					float x, 
					float y, 
					global::System.IntPtr paint)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_surface_draw(
								surface, 
								canvas, 
								x, 
								y, 
								paint
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_surface_peek_pixels, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_surface_peek_pixels")]
		public static bool sk_surface_peek_pixels(
					global::System.IntPtr surface, 
					global::System.IntPtr pixmap)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_surface_peek_pixels(
								surface, 
								pixmap
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_surface_read_pixels, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_surface_read_pixels")]
		public static bool sk_surface_read_pixels(
					global::System.IntPtr surface, 
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp dstInfo, 
					global::System.IntPtr dstPixels, 
					global::System.IntPtr dstRowBytes, 
					int srcX, 
					int srcY)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_dstInfo = &(dstInfo))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_surface_read_pixels(
									surface, 
									pinned_dstInfo, 
									dstPixels, 
									dstRowBytes, 
									srcX, 
									srcY
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_surface_get_props, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKSurfaceProps__SkiaSharp__SkiaSharp__SKSurfaceProps__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_surface_get_props")]
		public static void sk_surface_get_props(
					global::System.IntPtr surface, 
					out global::SkiaSharp.SKSurfaceProps__SkiaSharp props)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKSurfaceProps__SkiaSharp* pinned_props = &(props))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_surface_get_props(
									surface, 
									pinned_props
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_canvas_save, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_save")]
		public static int sk_canvas_save(global::System.IntPtr t)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_save(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_canvas_save_layer, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_save_layer")]
		public static int sk_canvas_save_layer(
					global::System.IntPtr t, 
					ref global::SkiaSharp.SKRect__SkiaSharp rect, 
					global::System.IntPtr paint)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_save_layer(
									t, 
									pinned_rect, 
									paint
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_canvas_save_layer__0, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_save_layer")]
		public static int sk_canvas_save_layer__0(
					global::System.IntPtr t, 
					global::System.IntPtr rectZero, 
					global::System.IntPtr paint)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_save_layer__0(
								t, 
								rectZero, 
								paint
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_canvas_restore, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_restore")]
		public static void sk_canvas_restore(global::System.IntPtr t)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_restore(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_get_save_count, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_get_save_count")]
		public static int sk_canvas_get_save_count(global::System.IntPtr t)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_get_save_count(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_canvas_restore_to_count, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_restore_to_count")]
		public static void sk_canvas_restore_to_count(
					global::System.IntPtr t, 
					int saveCount)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_restore_to_count(
								t, 
								saveCount
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_translate, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_translate")]
		public static void sk_canvas_translate(
					global::System.IntPtr t, 
					float dx, 
					float dy)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_translate(
								t, 
								dx, 
								dy
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_scale, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_scale")]
		public static void sk_canvas_scale(
					global::System.IntPtr t, 
					float sx, 
					float sy)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_scale(
								t, 
								sx, 
								sy
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_rotate_degrees, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_rotate_degrees")]
		public static void sk_canvas_rotate_degrees(
					global::System.IntPtr t, 
					float degrees)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_rotate_degrees(
								t, 
								degrees
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_rotate_radians, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_rotate_radians")]
		public static void sk_canvas_rotate_radians(
					global::System.IntPtr t, 
					float radians)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_rotate_radians(
								t, 
								radians
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_skew, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_skew")]
		public static void sk_canvas_skew(
					global::System.IntPtr t, 
					float sx, 
					float sy)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_skew(
								t, 
								sx, 
								sy
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_concat, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_concat")]
		public static void sk_canvas_concat(
					global::System.IntPtr t, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp m)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_m = &(m))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_concat(
									t, 
									pinned_m
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_canvas_quick_reject, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_quick_reject")]
		public static bool sk_canvas_quick_reject(
					global::System.IntPtr t, 
					ref global::SkiaSharp.SKRect__SkiaSharp rect)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_quick_reject(
									t, 
									pinned_rect
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_canvas_clip_rect, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_clip_rect")]
		public static void sk_canvas_clip_rect(
					global::System.IntPtr t, 
					ref global::SkiaSharp.SKRect__SkiaSharp rect)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_clip_rect(
									t, 
									pinned_rect
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_canvas_clip_path, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_clip_path")]
		public static void sk_canvas_clip_path(
					global::System.IntPtr t, 
					global::System.IntPtr p)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_clip_path(
								t, 
								p
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_draw_paint, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_paint")]
		public static void sk_canvas_draw_paint(
					global::System.IntPtr t, 
					global::System.IntPtr p)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_paint(
								t, 
								p
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_draw_region, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_region")]
		public static void sk_canvas_draw_region(
					global::System.IntPtr t, 
					global::System.IntPtr region, 
					global::System.IntPtr paint)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_region(
								t, 
								region, 
								paint
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_draw_rect, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_rect")]
		public static void sk_canvas_draw_rect(
					global::System.IntPtr t, 
					ref global::SkiaSharp.SKRect__SkiaSharp rect, 
					global::System.IntPtr paint)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_rect(
									t, 
									pinned_rect, 
									paint
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_canvas_draw_round_rect, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_round_rect")]
		public static void sk_canvas_draw_round_rect(
					global::System.IntPtr t, 
					ref global::SkiaSharp.SKRect__SkiaSharp rect, 
					float rx, 
					float ry, 
					global::System.IntPtr paint)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_round_rect(
									t, 
									pinned_rect, 
									rx, 
									ry, 
									paint
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_canvas_draw_oval, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_oval")]
		public static void sk_canvas_draw_oval(
					global::System.IntPtr t, 
					ref global::SkiaSharp.SKRect__SkiaSharp rect, 
					global::System.IntPtr paint)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_oval(
									t, 
									pinned_rect, 
									paint
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_canvas_draw_circle, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_circle")]
		public static void sk_canvas_draw_circle(
					global::System.IntPtr t, 
					float cx, 
					float cy, 
					float radius, 
					global::System.IntPtr paint)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_circle(
								t, 
								cx, 
								cy, 
								radius, 
								paint
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_draw_path, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_path")]
		public static void sk_canvas_draw_path(
					global::System.IntPtr t, 
					global::System.IntPtr path, 
					global::System.IntPtr paint)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_path(
								t, 
								path, 
								paint
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_draw_image, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_image")]
		public static void sk_canvas_draw_image(
					global::System.IntPtr t, 
					global::System.IntPtr image, 
					float x, 
					float y, 
					global::System.IntPtr paint)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_image(
								t, 
								image, 
								x, 
								y, 
								paint
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_draw_image_rect, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_image_rect")]
		public static void sk_canvas_draw_image_rect(
					global::System.IntPtr t, 
					global::System.IntPtr image, 
					ref global::SkiaSharp.SKRect__SkiaSharp src, 
					ref global::SkiaSharp.SKRect__SkiaSharp dest, 
					global::System.IntPtr paint)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_src = &(src))
				fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_dest = &(dest))
				{
					// Call to native method
					global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_image_rect(
										t, 
										image, 
										pinned_src, 
										pinned_dest, 
										paint
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
		}

		// Signature, sk_canvas_draw_image_rect__0, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_image_rect")]
		public static void sk_canvas_draw_image_rect__0(
					global::System.IntPtr t, 
					global::System.IntPtr image, 
					global::System.IntPtr srcZero, 
					ref global::SkiaSharp.SKRect__SkiaSharp dest, 
					global::System.IntPtr paint)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_dest = &(dest))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_image_rect__0(
									t, 
									image, 
									srcZero, 
									pinned_dest, 
									paint
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_canvas_draw_picture, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_picture")]
		public static void sk_canvas_draw_picture(
					global::System.IntPtr t, 
					global::System.IntPtr pict, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp mat, 
					global::System.IntPtr paint)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_mat = &(mat))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_picture(
									t, 
									pict, 
									pinned_mat, 
									paint
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_canvas_draw_picture__0, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_picture")]
		public static void sk_canvas_draw_picture__0(
					global::System.IntPtr t, 
					global::System.IntPtr pict, 
					global::System.IntPtr matZero, 
					global::System.IntPtr paint)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_picture__0(
								t, 
								pict, 
								matZero, 
								paint
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_draw_color, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKBlendMode__SkiaSharp__SKBlendMode__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_color")]
		public static void sk_canvas_draw_color(
					global::System.IntPtr t, 
					global::SkiaSharp.SKColor__SkiaSharp color, 
					global::SkiaSharp.SKBlendMode__SkiaSharp mode)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_color(
								t, 
								color, 
								mode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_draw_points, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKPointMode__SkiaSharp__SKPointMode__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_points")]
		public static void sk_canvas_draw_points(
					global::System.IntPtr t, 
					global::SkiaSharp.SKPointMode__SkiaSharp mode, 
					global::System.IntPtr count, 
					global::SkiaSharp.SKPoint__SkiaSharp[] points, 
					global::System.IntPtr paint)
		{
			// Setup
			global::SkiaSharp.SKPoint__SkiaSharp* unsafe_points = default(global::SkiaSharp.SKPoint__SkiaSharp*);
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::SkiaSharp.SKPoint__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::SkiaSharp.SKPoint__SkiaSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_points(
									t, 
									mode, 
									count, 
									unsafe_points, 
									paint
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, sk_canvas_draw_point, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_point")]
		public static void sk_canvas_draw_point(
					global::System.IntPtr t, 
					float x, 
					float y, 
					global::System.IntPtr paint)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_point(
								t, 
								x, 
								y, 
								paint
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_draw_line, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_line")]
		public static void sk_canvas_draw_line(
					global::System.IntPtr t, 
					float x0, 
					float y0, 
					float x1, 
					float y1, 
					global::System.IntPtr paint)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_line(
								t, 
								x0, 
								y0, 
								x1, 
								y1, 
								paint
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_draw_text, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_text")]
		public static void sk_canvas_draw_text(
					global::System.IntPtr t, 
					byte[] text, 
					int len, 
					float x, 
					float y, 
					global::System.IntPtr paint)
		{
			// Setup
			byte* unsafe_text;
			// Marshalling
			fixed (byte* pinned_text = ((text != null 
						&& text.Length == 0) ? new byte[1] : text))
			{
				unsafe_text = (byte*)pinned_text;
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_text(
									t, 
									unsafe_text, 
									len, 
									x, 
									y, 
									paint
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_canvas_draw_pos_text, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_pos_text")]
		public static void sk_canvas_draw_pos_text(
					global::System.IntPtr t, 
					byte[] text, 
					int len, 
					global::SkiaSharp.SKPoint__SkiaSharp[] points, 
					global::System.IntPtr paint)
		{
			// Setup
			byte* unsafe_text;
			global::SkiaSharp.SKPoint__SkiaSharp* unsafe_points = default(global::SkiaSharp.SKPoint__SkiaSharp*);
			try
			{
				// Marshalling
				fixed (byte* pinned_text = ((text != null 
							&& text.Length == 0) ? new byte[1] : text))
				{
					unsafe_text = (byte*)pinned_text;
					if (points == null)
						unsafe_points = null;
					else
					{
						if (points != null)
							unsafe_points = (global::SkiaSharp.SKPoint__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::SkiaSharp.SKPoint__SkiaSharp))));
						if (points != null)
							for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
							{
								// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp points
								unsafe_points[mcgIdx] = points[mcgIdx];
							}
					}
					// Call to native method
					global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_pos_text(
										t, 
										unsafe_text, 
										len, 
										unsafe_points, 
										paint
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, sk_canvas_draw_text_on_path, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_text_on_path")]
		public static void sk_canvas_draw_text_on_path(
					global::System.IntPtr t, 
					byte[] text, 
					int len, 
					global::System.IntPtr path, 
					float hOffset, 
					float vOffset, 
					global::System.IntPtr paint)
		{
			// Setup
			byte* unsafe_text;
			// Marshalling
			fixed (byte* pinned_text = ((text != null 
						&& text.Length == 0) ? new byte[1] : text))
			{
				unsafe_text = (byte*)pinned_text;
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_text_on_path(
									t, 
									unsafe_text, 
									len, 
									path, 
									hOffset, 
									vOffset, 
									paint
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_canvas_draw_text__0, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_text")]
		public static void sk_canvas_draw_text__0(
					global::System.IntPtr t, 
					global::System.IntPtr text, 
					int len, 
					float x, 
					float y, 
					global::System.IntPtr paint)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_text__0(
								t, 
								text, 
								len, 
								x, 
								y, 
								paint
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_draw_pos_text__0, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_pos_text")]
		public static void sk_canvas_draw_pos_text__0(
					global::System.IntPtr t, 
					global::System.IntPtr text, 
					int len, 
					global::SkiaSharp.SKPoint__SkiaSharp[] points, 
					global::System.IntPtr paint)
		{
			// Setup
			global::SkiaSharp.SKPoint__SkiaSharp* unsafe_points = default(global::SkiaSharp.SKPoint__SkiaSharp*);
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::SkiaSharp.SKPoint__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::SkiaSharp.SKPoint__SkiaSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_pos_text__0(
									t, 
									text, 
									len, 
									unsafe_points, 
									paint
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, sk_canvas_draw_text_on_path__0, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_text_on_path")]
		public static void sk_canvas_draw_text_on_path__0(
					global::System.IntPtr t, 
					global::System.IntPtr text, 
					int len, 
					global::System.IntPtr path, 
					float hOffset, 
					float vOffset, 
					global::System.IntPtr paint)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_text_on_path__0(
								t, 
								text, 
								len, 
								path, 
								hOffset, 
								vOffset, 
								paint
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_draw_bitmap, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_bitmap")]
		public static void sk_canvas_draw_bitmap(
					global::System.IntPtr t, 
					global::System.IntPtr bitmap, 
					float x, 
					float y, 
					global::System.IntPtr paint)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_bitmap(
								t, 
								bitmap, 
								x, 
								y, 
								paint
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_draw_bitmap_rect, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_bitmap_rect")]
		public static void sk_canvas_draw_bitmap_rect(
					global::System.IntPtr t, 
					global::System.IntPtr bitmap, 
					ref global::SkiaSharp.SKRect__SkiaSharp src, 
					ref global::SkiaSharp.SKRect__SkiaSharp dest, 
					global::System.IntPtr paint)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_src = &(src))
				fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_dest = &(dest))
				{
					// Call to native method
					global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_bitmap_rect(
										t, 
										bitmap, 
										pinned_src, 
										pinned_dest, 
										paint
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
		}

		// Signature, sk_canvas_draw_bitmap_rect__0, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_bitmap_rect")]
		public static void sk_canvas_draw_bitmap_rect__0(
					global::System.IntPtr t, 
					global::System.IntPtr bitmap, 
					global::System.IntPtr srcZero, 
					ref global::SkiaSharp.SKRect__SkiaSharp dest, 
					global::System.IntPtr paint)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_dest = &(dest))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_bitmap_rect__0(
									t, 
									bitmap, 
									srcZero, 
									pinned_dest, 
									paint
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_canvas_reset_matrix, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_reset_matrix")]
		public static void sk_canvas_reset_matrix(global::System.IntPtr canvas)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_reset_matrix(canvas);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_set_matrix, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_set_matrix")]
		public static void sk_canvas_set_matrix(
					global::System.IntPtr canvas, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_set_matrix(
									canvas, 
									pinned_matrix
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_canvas_get_total_matrix, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_get_total_matrix")]
		public static void sk_canvas_get_total_matrix(
					global::System.IntPtr canvas, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_get_total_matrix(
									canvas, 
									pinned_matrix
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_canvas_draw_annotation, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_annotation")]
		public static void sk_canvas_draw_annotation(
					global::System.IntPtr t, 
					ref global::SkiaSharp.SKRect__SkiaSharp rect, 
					byte[] key, 
					global::System.IntPtr value)
		{
			// Setup
			byte* unsafe_key;
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_rect = &(rect))
				fixed (byte* pinned_key = ((key != null 
							&& key.Length == 0) ? new byte[1] : key))
				{
					unsafe_key = (byte*)pinned_key;
					// Call to native method
					global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_annotation(
										t, 
										pinned_rect, 
										unsafe_key, 
										value
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
		}

		// Signature, sk_canvas_draw_url_annotation, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_url_annotation")]
		public static void sk_canvas_draw_url_annotation(
					global::System.IntPtr t, 
					ref global::SkiaSharp.SKRect__SkiaSharp rect, 
					global::System.IntPtr value)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_url_annotation(
									t, 
									pinned_rect, 
									value
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_canvas_draw_named_destination_annotation, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_named_destination_annotation")]
		public static void sk_canvas_draw_named_destination_annotation(
					global::System.IntPtr t, 
					ref global::SkiaSharp.SKPoint__SkiaSharp point, 
					global::System.IntPtr value)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_point = &(point))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_named_destination_annotation(
									t, 
									pinned_point, 
									value
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_canvas_draw_link_destination_annotation, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_link_destination_annotation")]
		public static void sk_canvas_draw_link_destination_annotation(
					global::System.IntPtr t, 
					ref global::SkiaSharp.SKRect__SkiaSharp rect, 
					global::System.IntPtr value)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_link_destination_annotation(
									t, 
									pinned_rect, 
									value
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_canvas_clip_rect_with_operation, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKClipOperation__SkiaSharp__SKClipOperation__SkiaSharp, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_clip_rect_with_operation")]
		public static void sk_canvas_clip_rect_with_operation(
					global::System.IntPtr t, 
					ref global::SkiaSharp.SKRect__SkiaSharp crect, 
					global::SkiaSharp.SKClipOperation__SkiaSharp op, 
					bool doAA)
		{
			// Setup
			sbyte unsafe_doAA;
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_crect = &(crect))
			{
				unsafe_doAA = (doAA ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_clip_rect_with_operation(
									t, 
									pinned_crect, 
									op, 
									unsafe_doAA
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_canvas_clip_path_with_operation, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKClipOperation__SkiaSharp__SKClipOperation__SkiaSharp, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_clip_path_with_operation")]
		public static void sk_canvas_clip_path_with_operation(
					global::System.IntPtr t, 
					global::System.IntPtr cpath, 
					global::SkiaSharp.SKClipOperation__SkiaSharp op, 
					bool doAA)
		{
			// Setup
			sbyte unsafe_doAA;
			// Marshalling
			unsafe_doAA = (doAA ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_clip_path_with_operation(
								t, 
								cpath, 
								op, 
								unsafe_doAA
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_clip_region, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKClipOperation__SkiaSharp__SKClipOperation__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_clip_region")]
		public static void sk_canvas_clip_region(
					global::System.IntPtr t, 
					global::System.IntPtr region, 
					global::SkiaSharp.SKClipOperation__SkiaSharp op)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_clip_region(
								t, 
								region, 
								op
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_get_device_clip_bounds, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRectI__SkiaSharp__SkiaSharp__SKRectI__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_get_device_clip_bounds")]
		public static bool sk_canvas_get_device_clip_bounds(
					global::System.IntPtr t, 
					out global::SkiaSharp.SKRectI__SkiaSharp cbounds)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRectI__SkiaSharp* pinned_cbounds = &(cbounds))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_get_device_clip_bounds(
									t, 
									pinned_cbounds
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_canvas_get_local_clip_bounds, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_get_local_clip_bounds")]
		public static bool sk_canvas_get_local_clip_bounds(
					global::System.IntPtr t, 
					out global::SkiaSharp.SKRect__SkiaSharp cbounds)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_cbounds = &(cbounds))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_get_local_clip_bounds(
									t, 
									pinned_cbounds
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_canvas_new_from_bitmap, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_new_from_bitmap")]
		public static global::System.IntPtr sk_canvas_new_from_bitmap(global::System.IntPtr bitmap)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_new_from_bitmap(bitmap);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_canvas_flush, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_flush")]
		public static void sk_canvas_flush(global::System.IntPtr canvas)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_flush(canvas);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_draw_bitmap_lattice, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKLatticeInternal__SkiaSharp__SkiaSharp__SKLatticeInternal__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_bitmap_lattice")]
		public static void sk_canvas_draw_bitmap_lattice(
					global::System.IntPtr t, 
					global::System.IntPtr bitmap, 
					ref global::SkiaSharp.SKLatticeInternal__SkiaSharp lattice, 
					ref global::SkiaSharp.SKRect__SkiaSharp dst, 
					global::System.IntPtr paint)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKLatticeInternal__SkiaSharp* pinned_lattice = &(lattice))
				fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_dst = &(dst))
				{
					// Call to native method
					global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_bitmap_lattice(
										t, 
										bitmap, 
										pinned_lattice, 
										pinned_dst, 
										paint
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
		}

		// Signature, sk_canvas_draw_image_lattice, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKLatticeInternal__SkiaSharp__SkiaSharp__SKLatticeInternal__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_image_lattice")]
		public static void sk_canvas_draw_image_lattice(
					global::System.IntPtr t, 
					global::System.IntPtr image, 
					ref global::SkiaSharp.SKLatticeInternal__SkiaSharp lattice, 
					ref global::SkiaSharp.SKRect__SkiaSharp dst, 
					global::System.IntPtr paint)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKLatticeInternal__SkiaSharp* pinned_lattice = &(lattice))
				fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_dst = &(dst))
				{
					// Call to native method
					global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_image_lattice(
										t, 
										image, 
										pinned_lattice, 
										pinned_dst, 
										paint
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
		}

		// Signature, sk_canvas_destroy, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_destroy")]
		public static void sk_canvas_destroy(global::System.IntPtr canvas)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_destroy(canvas);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_canvas_draw_vertices, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKBlendMode__SkiaSharp__SKBlendMode__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_canvas_draw_vertices")]
		public static void sk_canvas_draw_vertices(
					global::System.IntPtr canvas, 
					global::System.IntPtr vertices, 
					global::SkiaSharp.SKBlendMode__SkiaSharp mode, 
					global::System.IntPtr paint)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_canvas_draw_vertices(
								canvas, 
								vertices, 
								mode, 
								paint
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_new, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_new")]
		public static global::System.IntPtr sk_paint_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_new();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_delete, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_delete")]
		public static void sk_paint_delete(global::System.IntPtr t)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_delete(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_is_antialias, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_is_antialias")]
		public static bool sk_paint_is_antialias(global::System.IntPtr t)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_is_antialias(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_paint_set_antialias, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_antialias")]
		public static void sk_paint_set_antialias(
					global::System.IntPtr t, 
					bool v)
		{
			// Setup
			sbyte unsafe_v;
			// Marshalling
			unsafe_v = (v ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_antialias(
								t, 
								unsafe_v
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_is_dither, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_is_dither")]
		public static bool sk_paint_is_dither(global::System.IntPtr t)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_is_dither(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_paint_set_dither, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_dither")]
		public static void sk_paint_set_dither(
					global::System.IntPtr t, 
					bool v)
		{
			// Setup
			sbyte unsafe_v;
			// Marshalling
			unsafe_v = (v ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_dither(
								t, 
								unsafe_v
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_is_verticaltext, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_is_verticaltext")]
		public static bool sk_paint_is_verticaltext(global::System.IntPtr t)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_is_verticaltext(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_paint_set_verticaltext, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_verticaltext")]
		public static void sk_paint_set_verticaltext(
					global::System.IntPtr t, 
					bool v)
		{
			// Setup
			sbyte unsafe_v;
			// Marshalling
			unsafe_v = (v ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_verticaltext(
								t, 
								unsafe_v
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_get_color, [fwd] [return] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_color")]
		public static uint sk_paint_get_color(global::System.IntPtr t)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_color(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_set_color, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_color")]
		public static void sk_paint_set_color(
					global::System.IntPtr t, 
					global::SkiaSharp.SKColor__SkiaSharp color)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_color(
								t, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_get_style, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKPaintStyle__SkiaSharp__SKPaintStyle__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_style")]
		public static global::SkiaSharp.SKPaintStyle__SkiaSharp sk_paint_get_style(global::System.IntPtr t)
		{
			// Setup
			global::SkiaSharp.SKPaintStyle__SkiaSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_style(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_set_style, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKPaintStyle__SkiaSharp__SKPaintStyle__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_style")]
		public static void sk_paint_set_style(
					global::System.IntPtr t, 
					global::SkiaSharp.SKPaintStyle__SkiaSharp style)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_style(
								t, 
								style
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_get_stroke_width, [fwd] [return] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_stroke_width")]
		public static float sk_paint_get_stroke_width(global::System.IntPtr paint)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_stroke_width(paint);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_set_stroke_width, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_stroke_width")]
		public static void sk_paint_set_stroke_width(
					global::System.IntPtr t, 
					float width)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_stroke_width(
								t, 
								width
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_get_stroke_miter, [fwd] [return] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_stroke_miter")]
		public static float sk_paint_get_stroke_miter(global::System.IntPtr t)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_stroke_miter(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_set_stroke_miter, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_stroke_miter")]
		public static void sk_paint_set_stroke_miter(
					global::System.IntPtr t, 
					float miter)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_stroke_miter(
								t, 
								miter
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_get_stroke_cap, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKStrokeCap__SkiaSharp__SKStrokeCap__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_stroke_cap")]
		public static global::SkiaSharp.SKStrokeCap__SkiaSharp sk_paint_get_stroke_cap(global::System.IntPtr t)
		{
			// Setup
			global::SkiaSharp.SKStrokeCap__SkiaSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_stroke_cap(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_set_stroke_cap, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKStrokeCap__SkiaSharp__SKStrokeCap__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_stroke_cap")]
		public static void sk_paint_set_stroke_cap(
					global::System.IntPtr t, 
					global::SkiaSharp.SKStrokeCap__SkiaSharp cap)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_stroke_cap(
								t, 
								cap
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_get_stroke_join, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKStrokeJoin__SkiaSharp__SKStrokeJoin__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_stroke_join")]
		public static global::SkiaSharp.SKStrokeJoin__SkiaSharp sk_paint_get_stroke_join(global::System.IntPtr t)
		{
			// Setup
			global::SkiaSharp.SKStrokeJoin__SkiaSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_stroke_join(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_set_stroke_join, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKStrokeJoin__SkiaSharp__SKStrokeJoin__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_stroke_join")]
		public static void sk_paint_set_stroke_join(
					global::System.IntPtr t, 
					global::SkiaSharp.SKStrokeJoin__SkiaSharp join)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_stroke_join(
								t, 
								join
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_set_shader, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_shader")]
		public static void sk_paint_set_shader(
					global::System.IntPtr t, 
					global::System.IntPtr shader)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_shader(
								t, 
								shader
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_get_shader, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_shader")]
		public static global::System.IntPtr sk_paint_get_shader(global::System.IntPtr t)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_shader(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_set_maskfilter, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_maskfilter")]
		public static void sk_paint_set_maskfilter(
					global::System.IntPtr t, 
					global::System.IntPtr filter)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_maskfilter(
								t, 
								filter
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_get_maskfilter, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_maskfilter")]
		public static global::System.IntPtr sk_paint_get_maskfilter(global::System.IntPtr t)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_maskfilter(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_set_colorfilter, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_colorfilter")]
		public static void sk_paint_set_colorfilter(
					global::System.IntPtr t, 
					global::System.IntPtr filter)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_colorfilter(
								t, 
								filter
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_get_colorfilter, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_colorfilter")]
		public static global::System.IntPtr sk_paint_get_colorfilter(global::System.IntPtr t)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_colorfilter(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_set_imagefilter, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_imagefilter")]
		public static void sk_paint_set_imagefilter(
					global::System.IntPtr t, 
					global::System.IntPtr filter)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_imagefilter(
								t, 
								filter
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_get_imagefilter, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_imagefilter")]
		public static global::System.IntPtr sk_paint_get_imagefilter(global::System.IntPtr t)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_imagefilter(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_set_blendmode, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKBlendMode__SkiaSharp__SKBlendMode__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_blendmode")]
		public static void sk_paint_set_blendmode(
					global::System.IntPtr t, 
					global::SkiaSharp.SKBlendMode__SkiaSharp mode)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_blendmode(
								t, 
								mode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_get_blendmode, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKBlendMode__SkiaSharp__SKBlendMode__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_blendmode")]
		public static global::SkiaSharp.SKBlendMode__SkiaSharp sk_paint_get_blendmode(global::System.IntPtr t)
		{
			// Setup
			global::SkiaSharp.SKBlendMode__SkiaSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_blendmode(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_set_filter_quality, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKFilterQuality__SkiaSharp__SKFilterQuality__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_filter_quality")]
		public static void sk_paint_set_filter_quality(
					global::System.IntPtr t, 
					global::SkiaSharp.SKFilterQuality__SkiaSharp filterQuality)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_filter_quality(
								t, 
								filterQuality
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_get_filter_quality, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKFilterQuality__SkiaSharp__SKFilterQuality__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_filter_quality")]
		public static global::SkiaSharp.SKFilterQuality__SkiaSharp sk_paint_get_filter_quality(global::System.IntPtr t)
		{
			// Setup
			global::SkiaSharp.SKFilterQuality__SkiaSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_filter_quality(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_get_typeface, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_typeface")]
		public static global::System.IntPtr sk_paint_get_typeface(global::System.IntPtr t)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_typeface(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_set_typeface, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_typeface")]
		public static void sk_paint_set_typeface(
					global::System.IntPtr t, 
					global::System.IntPtr typeface)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_typeface(
								t, 
								typeface
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_get_textsize, [fwd] [return] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_textsize")]
		public static float sk_paint_get_textsize(global::System.IntPtr t)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_textsize(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_set_textsize, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_textsize")]
		public static void sk_paint_set_textsize(
					global::System.IntPtr t, 
					float size)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_textsize(
								t, 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_get_text_align, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKTextAlign__SkiaSharp__SKTextAlign__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_text_align")]
		public static global::SkiaSharp.SKTextAlign__SkiaSharp sk_paint_get_text_align(global::System.IntPtr t)
		{
			// Setup
			global::SkiaSharp.SKTextAlign__SkiaSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_text_align(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_set_text_align, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKTextAlign__SkiaSharp__SKTextAlign__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_text_align")]
		public static void sk_paint_set_text_align(
					global::System.IntPtr t, 
					global::SkiaSharp.SKTextAlign__SkiaSharp align)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_text_align(
								t, 
								align
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_get_text_encoding, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKTextEncoding__SkiaSharp__SKTextEncoding__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_text_encoding")]
		public static global::SkiaSharp.SKTextEncoding__SkiaSharp sk_paint_get_text_encoding(global::System.IntPtr t)
		{
			// Setup
			global::SkiaSharp.SKTextEncoding__SkiaSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_text_encoding(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_set_text_encoding, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKTextEncoding__SkiaSharp__SKTextEncoding__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_text_encoding")]
		public static void sk_paint_set_text_encoding(
					global::System.IntPtr t, 
					global::SkiaSharp.SKTextEncoding__SkiaSharp encoding)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_text_encoding(
								t, 
								encoding
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_get_text_scale_x, [fwd] [return] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_text_scale_x")]
		public static float sk_paint_get_text_scale_x(global::System.IntPtr t)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_text_scale_x(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_set_text_scale_x, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_text_scale_x")]
		public static void sk_paint_set_text_scale_x(
					global::System.IntPtr t, 
					float scale)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_text_scale_x(
								t, 
								scale
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_get_text_skew_x, [fwd] [return] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_text_skew_x")]
		public static float sk_paint_get_text_skew_x(global::System.IntPtr t)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_text_skew_x(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_set_text_skew_x, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_text_skew_x")]
		public static void sk_paint_set_text_skew_x(
					global::System.IntPtr t, 
					float skew)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_text_skew_x(
								t, 
								skew
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_measure_text, [fwd] [return] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_measure_text")]
		public static float sk_paint_measure_text(
					global::System.IntPtr t, 
					byte[] text, 
					global::System.IntPtr length, 
					ref global::SkiaSharp.SKRect__SkiaSharp bounds)
		{
			// Setup
			byte* unsafe_text;
			float unsafe___value;
			// Marshalling
			fixed (byte* pinned_text = ((text != null 
						&& text.Length == 0) ? new byte[1] : text))
			{
				unsafe_text = (byte*)pinned_text;
				fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_bounds = &(bounds))
				{
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_measure_text(
										t, 
										unsafe_text, 
										length, 
										pinned_bounds
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_measure_text__0, [fwd] [return] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_measure_text")]
		public static float sk_paint_measure_text__0(
					global::System.IntPtr t, 
					byte[] text, 
					global::System.IntPtr length, 
					global::System.IntPtr boundsZero)
		{
			// Setup
			byte* unsafe_text;
			float unsafe___value;
			// Marshalling
			fixed (byte* pinned_text = ((text != null 
						&& text.Length == 0) ? new byte[1] : text))
			{
				unsafe_text = (byte*)pinned_text;
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_measure_text__0(
									t, 
									unsafe_text, 
									length, 
									boundsZero
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_measure_text__1, [fwd] [return] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_measure_text")]
		public static float sk_paint_measure_text__1(
					global::System.IntPtr t, 
					global::System.IntPtr text, 
					global::System.IntPtr length, 
					ref global::SkiaSharp.SKRect__SkiaSharp bounds)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_bounds = &(bounds))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_measure_text__1(
									t, 
									text, 
									length, 
									pinned_bounds
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_measure_text__2, [fwd] [return] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_measure_text")]
		public static float sk_paint_measure_text__2(
					global::System.IntPtr t, 
					global::System.IntPtr text, 
					global::System.IntPtr length, 
					global::System.IntPtr boundsZero)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_measure_text__2(
								t, 
								text, 
								length, 
								boundsZero
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_break_text, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_break_text")]
		public static global::System.IntPtr sk_paint_break_text(
					global::System.IntPtr t, 
					global::System.IntPtr text, 
					global::System.IntPtr length, 
					float maxWidth, 
					out float measuredWidth)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (float* pinned_measuredWidth = &(measuredWidth))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_break_text(
									t, 
									text, 
									length, 
									maxWidth, 
									pinned_measuredWidth
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_break_text__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_break_text")]
		public static global::System.IntPtr sk_paint_break_text__0(
					global::System.IntPtr t, 
					byte[] text, 
					global::System.IntPtr length, 
					float maxWidth, 
					out float measuredWidth)
		{
			// Setup
			byte* unsafe_text;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_text = ((text != null 
						&& text.Length == 0) ? new byte[1] : text))
			{
				unsafe_text = (byte*)pinned_text;
				fixed (float* pinned_measuredWidth = &(measuredWidth))
				{
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_break_text__0(
										t, 
										unsafe_text, 
										length, 
										maxWidth, 
										pinned_measuredWidth
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_get_text_path, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_text_path")]
		public static global::System.IntPtr sk_paint_get_text_path(
					global::System.IntPtr t, 
					global::System.IntPtr text, 
					global::System.IntPtr length, 
					float x, 
					float y)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_text_path(
								t, 
								text, 
								length, 
								x, 
								y
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_get_text_path__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_text_path")]
		public static global::System.IntPtr sk_paint_get_text_path__0(
					global::System.IntPtr t, 
					byte[] text, 
					global::System.IntPtr length, 
					float x, 
					float y)
		{
			// Setup
			byte* unsafe_text;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_text = ((text != null 
						&& text.Length == 0) ? new byte[1] : text))
			{
				unsafe_text = (byte*)pinned_text;
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_text_path__0(
									t, 
									unsafe_text, 
									length, 
									x, 
									y
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_get_pos_text_path, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_pos_text_path")]
		public static global::System.IntPtr sk_paint_get_pos_text_path(
					global::System.IntPtr t, 
					global::System.IntPtr text, 
					global::System.IntPtr length, 
					global::SkiaSharp.SKPoint__SkiaSharp[] points)
		{
			// Setup
			global::SkiaSharp.SKPoint__SkiaSharp* unsafe_points = default(global::SkiaSharp.SKPoint__SkiaSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::SkiaSharp.SKPoint__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::SkiaSharp.SKPoint__SkiaSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_pos_text_path(
									t, 
									text, 
									length, 
									unsafe_points
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, sk_paint_get_pos_text_path__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_pos_text_path")]
		public static global::System.IntPtr sk_paint_get_pos_text_path__0(
					global::System.IntPtr t, 
					byte[] text, 
					global::System.IntPtr length, 
					global::SkiaSharp.SKPoint__SkiaSharp[] points)
		{
			// Setup
			byte* unsafe_text;
			global::SkiaSharp.SKPoint__SkiaSharp* unsafe_points = default(global::SkiaSharp.SKPoint__SkiaSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_text = ((text != null 
							&& text.Length == 0) ? new byte[1] : text))
				{
					unsafe_text = (byte*)pinned_text;
					if (points == null)
						unsafe_points = null;
					else
					{
						if (points != null)
							unsafe_points = (global::SkiaSharp.SKPoint__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::SkiaSharp.SKPoint__SkiaSharp))));
						if (points != null)
							for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
							{
								// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp points
								unsafe_points[mcgIdx] = points[mcgIdx];
							}
					}
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_pos_text_path__0(
										t, 
										unsafe_text, 
										length, 
										unsafe_points
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, sk_paint_get_fontmetrics, [fwd] [return] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKFontMetrics__SkiaSharp__SkiaSharp__SKFontMetrics__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_fontmetrics")]
		public static float sk_paint_get_fontmetrics(
					global::System.IntPtr t, 
					out global::SkiaSharp.SKFontMetrics__SkiaSharp fontMetrics, 
					float scale)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKFontMetrics__SkiaSharp* pinned_fontMetrics = &(fontMetrics))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_fontmetrics(
									t, 
									pinned_fontMetrics, 
									scale
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_get_fontmetrics__0, [fwd] [return] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_fontmetrics")]
		public static float sk_paint_get_fontmetrics__0(
					global::System.IntPtr t, 
					global::System.IntPtr fontMetricsZero, 
					float scale)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_fontmetrics__0(
								t, 
								fontMetricsZero, 
								scale
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_get_path_effect, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_path_effect")]
		public static global::System.IntPtr sk_paint_get_path_effect(global::System.IntPtr cpaint)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_path_effect(cpaint);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_set_path_effect, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_path_effect")]
		public static void sk_paint_set_path_effect(
					global::System.IntPtr cpaint, 
					global::System.IntPtr effect)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_path_effect(
								cpaint, 
								effect
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_is_linear_text, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_is_linear_text")]
		public static bool sk_paint_is_linear_text(global::System.IntPtr cpaint)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_is_linear_text(cpaint);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_paint_set_linear_text, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_linear_text")]
		public static void sk_paint_set_linear_text(
					global::System.IntPtr cpaint, 
					bool linearText)
		{
			// Setup
			sbyte unsafe_linearText;
			// Marshalling
			unsafe_linearText = (linearText ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_linear_text(
								cpaint, 
								unsafe_linearText
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_is_subpixel_text, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_is_subpixel_text")]
		public static bool sk_paint_is_subpixel_text(global::System.IntPtr cpaint)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_is_subpixel_text(cpaint);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_paint_set_subpixel_text, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_subpixel_text")]
		public static void sk_paint_set_subpixel_text(
					global::System.IntPtr cpaint, 
					bool subpixelText)
		{
			// Setup
			sbyte unsafe_subpixelText;
			// Marshalling
			unsafe_subpixelText = (subpixelText ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_subpixel_text(
								cpaint, 
								unsafe_subpixelText
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_is_lcd_render_text, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_is_lcd_render_text")]
		public static bool sk_paint_is_lcd_render_text(global::System.IntPtr cpaint)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_is_lcd_render_text(cpaint);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_paint_set_lcd_render_text, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_lcd_render_text")]
		public static void sk_paint_set_lcd_render_text(
					global::System.IntPtr cpaint, 
					bool lcdText)
		{
			// Setup
			sbyte unsafe_lcdText;
			// Marshalling
			unsafe_lcdText = (lcdText ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_lcd_render_text(
								cpaint, 
								unsafe_lcdText
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_is_embedded_bitmap_text, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_is_embedded_bitmap_text")]
		public static bool sk_paint_is_embedded_bitmap_text(global::System.IntPtr cpaint)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_is_embedded_bitmap_text(cpaint);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_paint_set_embedded_bitmap_text, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_embedded_bitmap_text")]
		public static void sk_paint_set_embedded_bitmap_text(
					global::System.IntPtr cpaint, 
					bool useEmbeddedBitmapText)
		{
			// Setup
			sbyte unsafe_useEmbeddedBitmapText;
			// Marshalling
			unsafe_useEmbeddedBitmapText = (useEmbeddedBitmapText ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_embedded_bitmap_text(
								cpaint, 
								unsafe_useEmbeddedBitmapText
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_is_autohinted, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_is_autohinted")]
		public static bool sk_paint_is_autohinted(global::System.IntPtr cpaint)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_is_autohinted(cpaint);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_paint_set_autohinted, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_autohinted")]
		public static void sk_paint_set_autohinted(
					global::System.IntPtr cpaint, 
					bool useAutohinter)
		{
			// Setup
			sbyte unsafe_useAutohinter;
			// Marshalling
			unsafe_useAutohinter = (useAutohinter ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_autohinted(
								cpaint, 
								unsafe_useAutohinter
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_get_hinting, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKPaintHinting__SkiaSharp__SKPaintHinting__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_hinting")]
		public static global::SkiaSharp.SKPaintHinting__SkiaSharp sk_paint_get_hinting(global::System.IntPtr cpaint)
		{
			// Setup
			global::SkiaSharp.SKPaintHinting__SkiaSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_hinting(cpaint);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_paint_set_hinting, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKPaintHinting__SkiaSharp__SKPaintHinting__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_hinting")]
		public static void sk_paint_set_hinting(
					global::System.IntPtr cpaint, 
					global::SkiaSharp.SKPaintHinting__SkiaSharp hintingLevel)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_hinting(
								cpaint, 
								hintingLevel
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_is_fake_bold_text, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_is_fake_bold_text")]
		public static bool sk_paint_is_fake_bold_text(global::System.IntPtr cpaint)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_is_fake_bold_text(cpaint);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_paint_set_fake_bold_text, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_fake_bold_text")]
		public static void sk_paint_set_fake_bold_text(
					global::System.IntPtr cpaint, 
					bool fakeBoldText)
		{
			// Setup
			sbyte unsafe_fakeBoldText;
			// Marshalling
			unsafe_fakeBoldText = (fakeBoldText ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_fake_bold_text(
								cpaint, 
								unsafe_fakeBoldText
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_is_dev_kern_text, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_is_dev_kern_text")]
		public static bool sk_paint_is_dev_kern_text(global::System.IntPtr cpaint)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_is_dev_kern_text(cpaint);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_paint_set_dev_kern_text, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_set_dev_kern_text")]
		public static void sk_paint_set_dev_kern_text(
					global::System.IntPtr cpaint, 
					bool devKernText)
		{
			// Setup
			sbyte unsafe_devKernText;
			// Marshalling
			unsafe_devKernText = (devKernText ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_set_dev_kern_text(
								cpaint, 
								unsafe_devKernText
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_paint_get_fill_path, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_fill_path")]
		public static bool sk_paint_get_fill_path(
					global::System.IntPtr paint, 
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					ref global::SkiaSharp.SKRect__SkiaSharp cullRect, 
					float resScale)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_cullRect = &(cullRect))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_fill_path(
									paint, 
									src, 
									dst, 
									pinned_cullRect, 
									resScale
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_paint_get_fill_path__0, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_get_fill_path")]
		public static bool sk_paint_get_fill_path__0(
					global::System.IntPtr paint, 
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr cullRectZero, 
					float resScale)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_get_fill_path__0(
								paint, 
								src, 
								dst, 
								cullRectZero, 
								resScale
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_paint_clone, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_paint_clone")]
		public static global::System.IntPtr sk_paint_clone(global::System.IntPtr cpaint)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_paint_clone(cpaint);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_ref, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_ref")]
		public static void sk_image_ref(global::System.IntPtr image)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_ref(image);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_image_unref, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_unref")]
		public static void sk_image_unref(global::System.IntPtr image)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_unref(image);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_image_new_raster_copy, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_new_raster_copy")]
		public static global::System.IntPtr sk_image_new_raster_copy(
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp info, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_info = &(info))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_new_raster_copy(
									pinned_info, 
									pixels, 
									rowBytes
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_new_raster_copy_with_pixmap, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_new_raster_copy_with_pixmap")]
		public static global::System.IntPtr sk_image_new_raster_copy_with_pixmap(global::System.IntPtr pixmap)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_new_raster_copy_with_pixmap(pixmap);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_new_raster_copy_with_colortable, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_new_raster_copy_with_colortable")]
		public static global::System.IntPtr sk_image_new_raster_copy_with_colortable(
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp info, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes, 
					global::System.IntPtr ctable)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_info = &(info))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_new_raster_copy_with_colortable(
									pinned_info, 
									pixels, 
									rowBytes, 
									ctable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_new_raster_data, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_new_raster_data")]
		public static global::System.IntPtr sk_image_new_raster_data(
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp info, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_info = &(info))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_new_raster_data(
									pinned_info, 
									pixels, 
									rowBytes
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_new_raster, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_new_raster")]
		public static global::System.IntPtr sk_image_new_raster(
					global::System.IntPtr pixmap, 
					global::System.IntPtr releaseProc, 
					global::System.IntPtr context)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_new_raster(
								pixmap, 
								releaseProc, 
								context
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_new_from_bitmap, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_new_from_bitmap")]
		public static global::System.IntPtr sk_image_new_from_bitmap(global::System.IntPtr cbitmap)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_new_from_bitmap(cbitmap);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_new_from_encoded, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRectI__SkiaSharp__SkiaSharp__SKRectI__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_new_from_encoded")]
		public static global::System.IntPtr sk_image_new_from_encoded(
					global::System.IntPtr encoded, 
					ref global::SkiaSharp.SKRectI__SkiaSharp subset)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRectI__SkiaSharp* pinned_subset = &(subset))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_new_from_encoded(
									encoded, 
									pinned_subset
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_new_from_encoded__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_new_from_encoded")]
		public static global::System.IntPtr sk_image_new_from_encoded__0(
					global::System.IntPtr encoded, 
					global::System.IntPtr subsetZero)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_new_from_encoded__0(
								encoded, 
								subsetZero
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_new_from_texture, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_GRBackendTextureDesc__SkiaSharp__SkiaSharp__GRBackendTextureDesc__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKAlphaType__SkiaSharp__SKAlphaType__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_new_from_texture")]
		public static global::System.IntPtr sk_image_new_from_texture(
					global::System.IntPtr context, 
					ref global::SkiaSharp.GRBackendTextureDesc__SkiaSharp desc, 
					global::SkiaSharp.SKAlphaType__SkiaSharp alpha, 
					global::System.IntPtr colorSpace, 
					global::System.IntPtr releaseProc, 
					global::System.IntPtr releaseContext)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.GRBackendTextureDesc__SkiaSharp* pinned_desc = &(desc))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_new_from_texture(
									context, 
									pinned_desc, 
									alpha, 
									colorSpace, 
									releaseProc, 
									releaseContext
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_new_from_adopted_texture, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_GRBackendTextureDesc__SkiaSharp__SkiaSharp__GRBackendTextureDesc__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKAlphaType__SkiaSharp__SKAlphaType__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_new_from_adopted_texture")]
		public static global::System.IntPtr sk_image_new_from_adopted_texture(
					global::System.IntPtr context, 
					ref global::SkiaSharp.GRBackendTextureDesc__SkiaSharp desc, 
					global::SkiaSharp.SKAlphaType__SkiaSharp alpha, 
					global::System.IntPtr colorSpace)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.GRBackendTextureDesc__SkiaSharp* pinned_desc = &(desc))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_new_from_adopted_texture(
									context, 
									pinned_desc, 
									alpha, 
									colorSpace
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_new_from_picture, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKSizeI__SkiaSharp__SkiaSharp__SKSizeI__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_new_from_picture")]
		public static global::System.IntPtr sk_image_new_from_picture(
					global::System.IntPtr picture, 
					ref global::SkiaSharp.SKSizeI__SkiaSharp dimensions, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix, 
					global::System.IntPtr paint)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKSizeI__SkiaSharp* pinned_dimensions = &(dimensions))
				fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
				{
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_new_from_picture(
										picture, 
										pinned_dimensions, 
										pinned_matrix, 
										paint
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_new_from_picture__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKSizeI__SkiaSharp__SkiaSharp__SKSizeI__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_new_from_picture")]
		public static global::System.IntPtr sk_image_new_from_picture__0(
					global::System.IntPtr picture, 
					ref global::SkiaSharp.SKSizeI__SkiaSharp dimensions, 
					global::System.IntPtr matrixZero, 
					global::System.IntPtr paint)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKSizeI__SkiaSharp* pinned_dimensions = &(dimensions))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_new_from_picture__0(
									picture, 
									pinned_dimensions, 
									matrixZero, 
									paint
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_get_width, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_get_width")]
		public static int sk_image_get_width(global::System.IntPtr image)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_get_width(image);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_get_height, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_get_height")]
		public static int sk_image_get_height(global::System.IntPtr image)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_get_height(image);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_get_unique_id, [fwd] [return] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_get_unique_id")]
		public static uint sk_image_get_unique_id(global::System.IntPtr image)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_get_unique_id(image);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_get_alpha_type, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKAlphaType__SkiaSharp__SKAlphaType__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_get_alpha_type")]
		public static global::SkiaSharp.SKAlphaType__SkiaSharp sk_image_get_alpha_type(global::System.IntPtr image)
		{
			// Setup
			global::SkiaSharp.SKAlphaType__SkiaSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_get_alpha_type(image);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_is_alpha_only, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_is_alpha_only")]
		public static bool sk_image_is_alpha_only(global::System.IntPtr image)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_is_alpha_only(image);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_image_make_shader, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKShaderTileMode__SkiaSharp__SKShaderTileMode__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKShaderTileMode__SkiaSharp__SKShaderTileMode__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_make_shader")]
		public static global::System.IntPtr sk_image_make_shader(
					global::System.IntPtr image, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp tileX, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp tileY, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp localMatrix)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_localMatrix = &(localMatrix))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_make_shader(
									image, 
									tileX, 
									tileY, 
									pinned_localMatrix
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_make_shader__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKShaderTileMode__SkiaSharp__SKShaderTileMode__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKShaderTileMode__SkiaSharp__SKShaderTileMode__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_make_shader")]
		public static global::System.IntPtr sk_image_make_shader__0(
					global::System.IntPtr image, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp tileX, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp tileY, 
					global::System.IntPtr localMatrixZero)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_make_shader__0(
								image, 
								tileX, 
								tileY, 
								localMatrixZero
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_peek_pixels, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_peek_pixels")]
		public static bool sk_image_peek_pixels(
					global::System.IntPtr image, 
					global::System.IntPtr pixmap)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_peek_pixels(
								image, 
								pixmap
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_image_is_texture_backed, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_is_texture_backed")]
		public static bool sk_image_is_texture_backed(global::System.IntPtr image)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_is_texture_backed(image);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_image_read_pixels, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKImageCachingHint__SkiaSharp__SKImageCachingHint__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_read_pixels")]
		public static bool sk_image_read_pixels(
					global::System.IntPtr image, 
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp dstInfo, 
					global::System.IntPtr dstPixels, 
					global::System.IntPtr dstRowBytes, 
					int srcX, 
					int srcY, 
					global::SkiaSharp.SKImageCachingHint__SkiaSharp cachingHint)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_dstInfo = &(dstInfo))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_read_pixels(
									image, 
									pinned_dstInfo, 
									dstPixels, 
									dstRowBytes, 
									srcX, 
									srcY, 
									cachingHint
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_image_read_pixels_into_pixmap, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKImageCachingHint__SkiaSharp__SKImageCachingHint__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_read_pixels_into_pixmap")]
		public static bool sk_image_read_pixels_into_pixmap(
					global::System.IntPtr image, 
					global::System.IntPtr dst, 
					int srcX, 
					int srcY, 
					global::SkiaSharp.SKImageCachingHint__SkiaSharp cachingHint)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_read_pixels_into_pixmap(
								image, 
								dst, 
								srcX, 
								srcY, 
								cachingHint
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_image_scale_pixels, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKFilterQuality__SkiaSharp__SKFilterQuality__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKImageCachingHint__SkiaSharp__SKImageCachingHint__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_scale_pixels")]
		public static bool sk_image_scale_pixels(
					global::System.IntPtr image, 
					global::System.IntPtr dst, 
					global::SkiaSharp.SKFilterQuality__SkiaSharp quality, 
					global::SkiaSharp.SKImageCachingHint__SkiaSharp cachingHint)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_scale_pixels(
								image, 
								dst, 
								quality, 
								cachingHint
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_image_encode, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_encode")]
		public static global::System.IntPtr sk_image_encode(global::System.IntPtr image)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_encode(image);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_encode_specific, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKEncodedImageFormat__SkiaSharp__SKEncodedImageFormat__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_encode_specific")]
		public static global::System.IntPtr sk_image_encode_specific(
					global::System.IntPtr image, 
					global::SkiaSharp.SKEncodedImageFormat__SkiaSharp encoder, 
					int quality)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_encode_specific(
								image, 
								encoder, 
								quality
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_make_subset, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRectI__SkiaSharp__SkiaSharp__SKRectI__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_make_subset")]
		public static global::System.IntPtr sk_image_make_subset(
					global::System.IntPtr image, 
					ref global::SkiaSharp.SKRectI__SkiaSharp subset)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRectI__SkiaSharp* pinned_subset = &(subset))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_make_subset(
									image, 
									pinned_subset
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_make_non_texture_image, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_make_non_texture_image")]
		public static global::System.IntPtr sk_image_make_non_texture_image(global::System.IntPtr image)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_make_non_texture_image(image);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_image_make_with_filter, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRectI__SkiaSharp__SkiaSharp__SKRectI__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRectI__SkiaSharp__SkiaSharp__SKRectI__SkiaSharp, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRectI__SkiaSharp__SkiaSharp__SKRectI__SkiaSharp, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_image_make_with_filter")]
		public static global::System.IntPtr sk_image_make_with_filter(
					global::System.IntPtr image, 
					global::System.IntPtr filter, 
					ref global::SkiaSharp.SKRectI__SkiaSharp subset, 
					ref global::SkiaSharp.SKRectI__SkiaSharp clipbounds, 
					out global::SkiaSharp.SKRectI__SkiaSharp outSubset, 
					out global::SkiaSharp.SKPoint__SkiaSharp outOffset)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRectI__SkiaSharp* pinned_subset = &(subset))
				fixed (global::SkiaSharp.SKRectI__SkiaSharp* pinned_clipbounds = &(clipbounds))
					fixed (global::SkiaSharp.SKRectI__SkiaSharp* pinned_outSubset = &(outSubset))
						fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_outOffset = &(outOffset))
						{
							// Call to native method
							unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_image_make_with_filter(
												image, 
												filter, 
												pinned_subset, 
												pinned_clipbounds, 
												pinned_outSubset, 
												pinned_outOffset
											);
							global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						}
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_contains, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_contains")]
		public static bool sk_path_contains(
					global::System.IntPtr cpath, 
					float x, 
					float y)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_contains(
								cpath, 
								x, 
								y
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_path_get_last_point, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_get_last_point")]
		public static bool sk_path_get_last_point(
					global::System.IntPtr cpath, 
					out global::SkiaSharp.SKPoint__SkiaSharp point)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_point = &(point))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_get_last_point(
									cpath, 
									pinned_point
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_path_new, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_new")]
		public static global::System.IntPtr sk_path_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_new();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_delete, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_delete")]
		public static void sk_path_delete(global::System.IntPtr t)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_delete(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_move_to, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_move_to")]
		public static void sk_path_move_to(
					global::System.IntPtr t, 
					float x, 
					float y)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_move_to(
								t, 
								x, 
								y
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_rmove_to, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_rmove_to")]
		public static void sk_path_rmove_to(
					global::System.IntPtr t, 
					float dx, 
					float dy)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_rmove_to(
								t, 
								dx, 
								dy
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_line_to, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_line_to")]
		public static void sk_path_line_to(
					global::System.IntPtr t, 
					float x, 
					float y)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_line_to(
								t, 
								x, 
								y
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_rline_to, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_rline_to")]
		public static void sk_path_rline_to(
					global::System.IntPtr t, 
					float dx, 
					float dy)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_rline_to(
								t, 
								dx, 
								dy
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_quad_to, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_quad_to")]
		public static void sk_path_quad_to(
					global::System.IntPtr t, 
					float x0, 
					float y0, 
					float x1, 
					float y1)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_quad_to(
								t, 
								x0, 
								y0, 
								x1, 
								y1
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_rquad_to, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_rquad_to")]
		public static void sk_path_rquad_to(
					global::System.IntPtr t, 
					float dx0, 
					float dy0, 
					float dx1, 
					float dy1)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_rquad_to(
								t, 
								dx0, 
								dy0, 
								dx1, 
								dy1
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_conic_to, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_conic_to")]
		public static void sk_path_conic_to(
					global::System.IntPtr t, 
					float x0, 
					float y0, 
					float x1, 
					float y1, 
					float w)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_conic_to(
								t, 
								x0, 
								y0, 
								x1, 
								y1, 
								w
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_rconic_to, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_rconic_to")]
		public static void sk_path_rconic_to(
					global::System.IntPtr t, 
					float dx0, 
					float dy0, 
					float dx1, 
					float dy1, 
					float w)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_rconic_to(
								t, 
								dx0, 
								dy0, 
								dx1, 
								dy1, 
								w
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_cubic_to, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_cubic_to")]
		public static void sk_path_cubic_to(
					global::System.IntPtr t, 
					float x0, 
					float y0, 
					float x1, 
					float y1, 
					float x2, 
					float y2)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_cubic_to(
								t, 
								x0, 
								y0, 
								x1, 
								y1, 
								x2, 
								y2
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_rcubic_to, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_rcubic_to")]
		public static void sk_path_rcubic_to(
					global::System.IntPtr t, 
					float dx0, 
					float dy0, 
					float dx1, 
					float dy1, 
					float dx2, 
					float dy2)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_rcubic_to(
								t, 
								dx0, 
								dy0, 
								dx1, 
								dy1, 
								dx2, 
								dy2
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_close, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_close")]
		public static void sk_path_close(global::System.IntPtr t)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_close(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_rewind, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_rewind")]
		public static void sk_path_rewind(global::System.IntPtr t)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_rewind(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_reset, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_reset")]
		public static void sk_path_reset(global::System.IntPtr t)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_reset(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_add_rect, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKPathDirection__SkiaSharp__SKPathDirection__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_add_rect")]
		public static void sk_path_add_rect(
					global::System.IntPtr t, 
					ref global::SkiaSharp.SKRect__SkiaSharp rect, 
					global::SkiaSharp.SKPathDirection__SkiaSharp direction)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_add_rect(
									t, 
									pinned_rect, 
									direction
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_path_add_rect_start, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKPathDirection__SkiaSharp__SKPathDirection__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_add_rect_start")]
		public static void sk_path_add_rect_start(
					global::System.IntPtr t, 
					ref global::SkiaSharp.SKRect__SkiaSharp rect, 
					global::SkiaSharp.SKPathDirection__SkiaSharp direction, 
					uint startIndex)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_add_rect_start(
									t, 
									pinned_rect, 
									direction, 
									startIndex
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_path_add_oval, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKPathDirection__SkiaSharp__SKPathDirection__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_add_oval")]
		public static void sk_path_add_oval(
					global::System.IntPtr t, 
					ref global::SkiaSharp.SKRect__SkiaSharp rect, 
					global::SkiaSharp.SKPathDirection__SkiaSharp direction)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_add_oval(
									t, 
									pinned_rect, 
									direction
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_path_add_arc, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_add_arc")]
		public static void sk_path_add_arc(
					global::System.IntPtr t, 
					ref global::SkiaSharp.SKRect__SkiaSharp rect, 
					float startAngle, 
					float sweepAngle)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_add_arc(
									t, 
									pinned_rect, 
									startAngle, 
									sweepAngle
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_path_add_path_offset, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKPathAddMode__SkiaSharp__SKPathAddMode__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_add_path_offset")]
		public static void sk_path_add_path_offset(
					global::System.IntPtr t, 
					global::System.IntPtr other, 
					float dx, 
					float dy, 
					global::SkiaSharp.SKPathAddMode__SkiaSharp mode)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_add_path_offset(
								t, 
								other, 
								dx, 
								dy, 
								mode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_add_path_matrix, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKPathAddMode__SkiaSharp__SKPathAddMode__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_add_path_matrix")]
		public static void sk_path_add_path_matrix(
					global::System.IntPtr t, 
					global::System.IntPtr other, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix, 
					global::SkiaSharp.SKPathAddMode__SkiaSharp mode)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_add_path_matrix(
									t, 
									other, 
									pinned_matrix, 
									mode
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_path_add_path, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKPathAddMode__SkiaSharp__SKPathAddMode__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_add_path")]
		public static void sk_path_add_path(
					global::System.IntPtr t, 
					global::System.IntPtr other, 
					global::SkiaSharp.SKPathAddMode__SkiaSharp mode)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_add_path(
								t, 
								other, 
								mode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_add_path_reverse, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_add_path_reverse")]
		public static void sk_path_add_path_reverse(
					global::System.IntPtr t, 
					global::System.IntPtr other)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_add_path_reverse(
								t, 
								other
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_get_bounds, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_get_bounds")]
		public static bool sk_path_get_bounds(
					global::System.IntPtr t, 
					out global::SkiaSharp.SKRect__SkiaSharp rect)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_get_bounds(
									t, 
									pinned_rect
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_path_compute_tight_bounds, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_compute_tight_bounds")]
		public static void sk_path_compute_tight_bounds(
					global::System.IntPtr t, 
					out global::SkiaSharp.SKRect__SkiaSharp rect)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_compute_tight_bounds(
									t, 
									pinned_rect
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_path_get_filltype, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKPathFillType__SkiaSharp__SKPathFillType__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_get_filltype")]
		public static global::SkiaSharp.SKPathFillType__SkiaSharp sk_path_get_filltype(global::System.IntPtr t)
		{
			// Setup
			global::SkiaSharp.SKPathFillType__SkiaSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_get_filltype(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_set_filltype, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKPathFillType__SkiaSharp__SKPathFillType__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_set_filltype")]
		public static void sk_path_set_filltype(
					global::System.IntPtr t, 
					global::SkiaSharp.SKPathFillType__SkiaSharp filltype)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_set_filltype(
								t, 
								filltype
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_clone, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_clone")]
		public static global::System.IntPtr sk_path_clone(global::System.IntPtr t)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_clone(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_transform, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_transform")]
		public static global::System.IntPtr sk_path_transform(
					global::System.IntPtr t, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_transform(
									t, 
									pinned_matrix
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_arc_to, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKPathArcSize__SkiaSharp__SKPathArcSize__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKPathDirection__SkiaSharp__SKPathDirection__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_arc_to")]
		public static void sk_path_arc_to(
					global::System.IntPtr t, 
					float rx, 
					float ry, 
					float xAxisRotate, 
					global::SkiaSharp.SKPathArcSize__SkiaSharp largeArc, 
					global::SkiaSharp.SKPathDirection__SkiaSharp sweep, 
					float x, 
					float y)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_arc_to(
								t, 
								rx, 
								ry, 
								xAxisRotate, 
								largeArc, 
								sweep, 
								x, 
								y
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_rarc_to, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKPathArcSize__SkiaSharp__SKPathArcSize__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKPathDirection__SkiaSharp__SKPathDirection__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_rarc_to")]
		public static void sk_path_rarc_to(
					global::System.IntPtr t, 
					float rx, 
					float ry, 
					float xAxisRotate, 
					global::SkiaSharp.SKPathArcSize__SkiaSharp largeArc, 
					global::SkiaSharp.SKPathDirection__SkiaSharp sweep, 
					float x, 
					float y)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_rarc_to(
								t, 
								rx, 
								ry, 
								xAxisRotate, 
								largeArc, 
								sweep, 
								x, 
								y
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_arc_to_with_oval, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_arc_to_with_oval")]
		public static void sk_path_arc_to_with_oval(
					global::System.IntPtr t, 
					ref global::SkiaSharp.SKRect__SkiaSharp oval, 
					float startAngle, 
					float sweepAngle, 
					bool forceMoveTo)
		{
			// Setup
			sbyte unsafe_forceMoveTo;
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_oval = &(oval))
			{
				unsafe_forceMoveTo = (forceMoveTo ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_arc_to_with_oval(
									t, 
									pinned_oval, 
									startAngle, 
									sweepAngle, 
									unsafe_forceMoveTo
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_path_arc_to_with_points, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_arc_to_with_points")]
		public static void sk_path_arc_to_with_points(
					global::System.IntPtr t, 
					float x1, 
					float y1, 
					float x2, 
					float y2, 
					float radius)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_arc_to_with_points(
								t, 
								x1, 
								y1, 
								x2, 
								y2, 
								radius
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_add_rounded_rect, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKPathDirection__SkiaSharp__SKPathDirection__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_add_rounded_rect")]
		public static void sk_path_add_rounded_rect(
					global::System.IntPtr t, 
					ref global::SkiaSharp.SKRect__SkiaSharp rect, 
					float rx, 
					float ry, 
					global::SkiaSharp.SKPathDirection__SkiaSharp dir)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_add_rounded_rect(
									t, 
									pinned_rect, 
									rx, 
									ry, 
									dir
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_path_add_circle, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKPathDirection__SkiaSharp__SKPathDirection__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_add_circle")]
		public static void sk_path_add_circle(
					global::System.IntPtr t, 
					float x, 
					float y, 
					float radius, 
					global::SkiaSharp.SKPathDirection__SkiaSharp dir)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_add_circle(
								t, 
								x, 
								y, 
								radius, 
								dir
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_count_verbs, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_count_verbs")]
		public static int sk_path_count_verbs(global::System.IntPtr path)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_count_verbs(path);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_count_points, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_count_points")]
		public static int sk_path_count_points(global::System.IntPtr path)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_count_points(path);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_get_point, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_get_point")]
		public static void sk_path_get_point(
					global::System.IntPtr path, 
					int index, 
					out global::SkiaSharp.SKPoint__SkiaSharp point)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_point = &(point))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_get_point(
									path, 
									index, 
									pinned_point
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_path_get_points, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [EETypeRva:0x00040944] rg_SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp *, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_get_points")]
		public static int sk_path_get_points(
					global::System.IntPtr path, 
					global::SkiaSharp.SKPoint__SkiaSharp[] points, 
					int max)
		{
			// Setup
			global::SkiaSharp.SKPoint__SkiaSharp* unsafe_points = default(global::SkiaSharp.SKPoint__SkiaSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (points != null)
					unsafe_points = (global::SkiaSharp.SKPoint__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::SkiaSharp.SKPoint__SkiaSharp))));
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_get_points(
									path, 
									unsafe_points, 
									max
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (points != null)
					for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
					{
						// [fwd] [out] [optional] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp points
						points[mcgIdx] = unsafe_points[mcgIdx];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, sk_path_get_convexity, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKPathConvexity__SkiaSharp__SKPathConvexity__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_get_convexity")]
		public static global::SkiaSharp.SKPathConvexity__SkiaSharp sk_path_get_convexity(global::System.IntPtr cpath)
		{
			// Setup
			global::SkiaSharp.SKPathConvexity__SkiaSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_get_convexity(cpath);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_set_convexity, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKPathConvexity__SkiaSharp__SKPathConvexity__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_set_convexity")]
		public static void sk_path_set_convexity(
					global::System.IntPtr cpath, 
					global::SkiaSharp.SKPathConvexity__SkiaSharp convexity)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_set_convexity(
								cpath, 
								convexity
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_parse_svg_string, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040008] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_parse_svg_string")]
		public static bool sk_path_parse_svg_string(
					global::System.IntPtr cpath, 
					string str)
		{
			// Setup
			byte* unsafe_str = default(byte*);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_str = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(str, true, false);
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_parse_svg_string(
									cpath, 
									unsafe_str
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_str);
			}
		}

		// Signature, sk_path_to_svg_string, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_to_svg_string")]
		public static void sk_path_to_svg_string(
					global::System.IntPtr cpath, 
					global::System.IntPtr str)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_to_svg_string(
								cpath, 
								str
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_convert_conic_to_quads, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [out] [EETypeRva:0x00040944] rg_SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp *, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_convert_conic_to_quads")]
		public static int sk_path_convert_conic_to_quads(
					ref global::SkiaSharp.SKPoint__SkiaSharp p0, 
					ref global::SkiaSharp.SKPoint__SkiaSharp p1, 
					ref global::SkiaSharp.SKPoint__SkiaSharp p2, 
					float w, 
					global::SkiaSharp.SKPoint__SkiaSharp[] pts, 
					int pow2)
		{
			// Setup
			global::SkiaSharp.SKPoint__SkiaSharp* unsafe_pts = default(global::SkiaSharp.SKPoint__SkiaSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_p0 = &(p0))
					fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_p1 = &(p1))
						fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_p2 = &(p2))
						{
							if (pts != null)
								unsafe_pts = (global::SkiaSharp.SKPoint__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(pts.Length * sizeof(global::SkiaSharp.SKPoint__SkiaSharp))));
							// Call to native method
							unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_convert_conic_to_quads(
												pinned_p0, 
												pinned_p1, 
												pinned_p2, 
												w, 
												unsafe_pts, 
												pow2
											);
							global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
							if (pts != null)
								for (uint mcgIdx = 0; (mcgIdx < pts.Length); mcgIdx++)
								{
									// [fwd] [out] [optional] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp pts
									pts[mcgIdx] = unsafe_pts[mcgIdx];
								}
						}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_pts);
			}
		}

		// Signature, sk_path_add_poly, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_add_poly")]
		public static void sk_path_add_poly(
					global::System.IntPtr cpath, 
					global::SkiaSharp.SKPoint__SkiaSharp[] points, 
					int count, 
					bool close)
		{
			// Setup
			global::SkiaSharp.SKPoint__SkiaSharp* unsafe_points = default(global::SkiaSharp.SKPoint__SkiaSharp*);
			sbyte unsafe_close;
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::SkiaSharp.SKPoint__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::SkiaSharp.SKPoint__SkiaSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				unsafe_close = (close ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_add_poly(
									cpath, 
									unsafe_points, 
									count, 
									unsafe_close
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, sk_path_get_segment_masks, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKPathSegmentMask__SkiaSharp__SKPathSegmentMask__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_get_segment_masks")]
		public static global::SkiaSharp.SKPathSegmentMask__SkiaSharp sk_path_get_segment_masks(global::System.IntPtr t)
		{
			// Setup
			global::SkiaSharp.SKPathSegmentMask__SkiaSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_get_segment_masks(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_pathmeasure_new, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pathmeasure_new")]
		public static global::System.IntPtr sk_pathmeasure_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_pathmeasure_new();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_pathmeasure_new_with_path, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pathmeasure_new_with_path")]
		public static global::System.IntPtr sk_pathmeasure_new_with_path(
					global::System.IntPtr path, 
					bool forceClosed, 
					float resScale)
		{
			// Setup
			sbyte unsafe_forceClosed;
			global::System.IntPtr unsafe___value;
			// Marshalling
			unsafe_forceClosed = (forceClosed ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_pathmeasure_new_with_path(
								path, 
								unsafe_forceClosed, 
								resScale
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_pathmeasure_destroy, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pathmeasure_destroy")]
		public static void sk_pathmeasure_destroy(global::System.IntPtr pathMeasure)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_pathmeasure_destroy(pathMeasure);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_pathmeasure_set_path, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pathmeasure_set_path")]
		public static void sk_pathmeasure_set_path(
					global::System.IntPtr pathMeasure, 
					global::System.IntPtr path, 
					bool forceClosed)
		{
			// Setup
			sbyte unsafe_forceClosed;
			// Marshalling
			unsafe_forceClosed = (forceClosed ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_pathmeasure_set_path(
								pathMeasure, 
								path, 
								unsafe_forceClosed
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_pathmeasure_get_length, [fwd] [return] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pathmeasure_get_length")]
		public static float sk_pathmeasure_get_length(global::System.IntPtr pathMeasure)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_pathmeasure_get_length(pathMeasure);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_pathmeasure_get_pos_tan, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pathmeasure_get_pos_tan")]
		public static bool sk_pathmeasure_get_pos_tan(
					global::System.IntPtr pathMeasure, 
					float distance, 
					out global::SkiaSharp.SKPoint__SkiaSharp position, 
					out global::SkiaSharp.SKPoint__SkiaSharp tangent)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_position = &(position))
				fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_tangent = &(tangent))
				{
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_pathmeasure_get_pos_tan(
										pathMeasure, 
										distance, 
										pinned_position, 
										pinned_tangent
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					__value = unsafe___value != 0;
				}
			// Return
			return __value;
		}

		// Signature, sk_pathmeasure_get_pos_tan__0, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pathmeasure_get_pos_tan")]
		public static bool sk_pathmeasure_get_pos_tan__0(
					global::System.IntPtr pathMeasure, 
					float distance, 
					global::System.IntPtr positionZero, 
					out global::SkiaSharp.SKPoint__SkiaSharp tangent)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_tangent = &(tangent))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_pathmeasure_get_pos_tan__0(
									pathMeasure, 
									distance, 
									positionZero, 
									pinned_tangent
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_pathmeasure_get_pos_tan__1, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pathmeasure_get_pos_tan")]
		public static bool sk_pathmeasure_get_pos_tan__1(
					global::System.IntPtr pathMeasure, 
					float distance, 
					out global::SkiaSharp.SKPoint__SkiaSharp position, 
					global::System.IntPtr tangentZero)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_position = &(position))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_pathmeasure_get_pos_tan__1(
									pathMeasure, 
									distance, 
									pinned_position, 
									tangentZero
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_pathmeasure_get_matrix, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKPathMeasureMatrixFlags__SkiaSharp__SKPathMeasureMatrixFlags__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pathmeasure_get_matrix")]
		public static bool sk_pathmeasure_get_matrix(
					global::System.IntPtr pathMeasure, 
					float distance, 
					out global::SkiaSharp.SKMatrix__SkiaSharp matrix, 
					global::SkiaSharp.SKPathMeasureMatrixFlags__SkiaSharp flags)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_pathmeasure_get_matrix(
									pathMeasure, 
									distance, 
									pinned_matrix, 
									flags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_pathmeasure_get_segment, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pathmeasure_get_segment")]
		public static bool sk_pathmeasure_get_segment(
					global::System.IntPtr pathMeasure, 
					float start, 
					float stop, 
					global::System.IntPtr dst, 
					bool startWithMoveTo)
		{
			// Setup
			sbyte unsafe_startWithMoveTo;
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			unsafe_startWithMoveTo = (startWithMoveTo ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_pathmeasure_get_segment(
								pathMeasure, 
								start, 
								stop, 
								dst, 
								unsafe_startWithMoveTo
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_pathmeasure_is_closed, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pathmeasure_is_closed")]
		public static bool sk_pathmeasure_is_closed(global::System.IntPtr pathMeasure)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_pathmeasure_is_closed(pathMeasure);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_pathmeasure_next_contour, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pathmeasure_next_contour")]
		public static bool sk_pathmeasure_next_contour(global::System.IntPtr pathMeasure)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_pathmeasure_next_contour(pathMeasure);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_pathop_op, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKPathOp__SkiaSharp__SKPathOp__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pathop_op")]
		public static bool sk_pathop_op(
					global::System.IntPtr one, 
					global::System.IntPtr two, 
					global::SkiaSharp.SKPathOp__SkiaSharp op, 
					global::System.IntPtr result)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_pathop_op(
								one, 
								two, 
								op, 
								result
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_pathop_simplify, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pathop_simplify")]
		public static bool sk_pathop_simplify(
					global::System.IntPtr path, 
					global::System.IntPtr result)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_pathop_simplify(
								path, 
								result
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_pathop_tight_bounds, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pathop_tight_bounds")]
		public static bool sk_pathop_tight_bounds(
					global::System.IntPtr path, 
					out global::SkiaSharp.SKRect__SkiaSharp result)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_result = &(result))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_pathop_tight_bounds(
									path, 
									pinned_result
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_opbuilder_new, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_opbuilder_new")]
		public static global::System.IntPtr sk_opbuilder_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_opbuilder_new();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_opbuilder_destroy, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_opbuilder_destroy")]
		public static void sk_opbuilder_destroy(global::System.IntPtr builder)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_opbuilder_destroy(builder);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_opbuilder_add, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKPathOp__SkiaSharp__SKPathOp__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_opbuilder_add")]
		public static void sk_opbuilder_add(
					global::System.IntPtr builder, 
					global::System.IntPtr path, 
					global::SkiaSharp.SKPathOp__SkiaSharp op)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_opbuilder_add(
								builder, 
								path, 
								op
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_opbuilder_resolve, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_opbuilder_resolve")]
		public static bool sk_opbuilder_resolve(
					global::System.IntPtr builder, 
					global::System.IntPtr result)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_opbuilder_resolve(
								builder, 
								result
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_path_create_iter, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_create_iter")]
		public static global::System.IntPtr sk_path_create_iter(
					global::System.IntPtr path, 
					int forceClose)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_create_iter(
								path, 
								forceClose
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_iter_next, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKPathVerb__SkiaSharp__SKPathVerb__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [EETypeRva:0x00040944] rg_SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_iter_next")]
		public static global::SkiaSharp.SKPathVerb__SkiaSharp sk_path_iter_next(
					global::System.IntPtr iterator, 
					global::SkiaSharp.SKPoint__SkiaSharp[] points, 
					int doConsumeDegenerates, 
					int exact)
		{
			// Setup
			global::SkiaSharp.SKPoint__SkiaSharp* unsafe_points = default(global::SkiaSharp.SKPoint__SkiaSharp*);
			global::SkiaSharp.SKPathVerb__SkiaSharp unsafe___value;
			try
			{
				// Marshalling
				if (points != null)
					unsafe_points = (global::SkiaSharp.SKPoint__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::SkiaSharp.SKPoint__SkiaSharp))));
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_iter_next(
									iterator, 
									unsafe_points, 
									doConsumeDegenerates, 
									exact
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (points != null)
					for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
					{
						// [fwd] [out] [optional] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp points
						points[mcgIdx] = unsafe_points[mcgIdx];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, sk_path_iter_conic_weight, [fwd] [return] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_iter_conic_weight")]
		public static float sk_path_iter_conic_weight(global::System.IntPtr iterator)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_iter_conic_weight(iterator);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_iter_is_close_line, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_iter_is_close_line")]
		public static int sk_path_iter_is_close_line(global::System.IntPtr iterator)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_iter_is_close_line(iterator);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_iter_is_closed_contour, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_iter_is_closed_contour")]
		public static int sk_path_iter_is_closed_contour(global::System.IntPtr iterator)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_iter_is_closed_contour(iterator);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_iter_destroy, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_iter_destroy")]
		public static void sk_path_iter_destroy(global::System.IntPtr path)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_iter_destroy(path);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_create_rawiter, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_create_rawiter")]
		public static global::System.IntPtr sk_path_create_rawiter(global::System.IntPtr path)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_create_rawiter(path);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_rawiter_next, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKPathVerb__SkiaSharp__SKPathVerb__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [EETypeRva:0x00040944] rg_SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_rawiter_next")]
		public static global::SkiaSharp.SKPathVerb__SkiaSharp sk_path_rawiter_next(
					global::System.IntPtr iterator, 
					global::SkiaSharp.SKPoint__SkiaSharp[] points)
		{
			// Setup
			global::SkiaSharp.SKPoint__SkiaSharp* unsafe_points = default(global::SkiaSharp.SKPoint__SkiaSharp*);
			global::SkiaSharp.SKPathVerb__SkiaSharp unsafe___value;
			try
			{
				// Marshalling
				if (points != null)
					unsafe_points = (global::SkiaSharp.SKPoint__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::SkiaSharp.SKPoint__SkiaSharp))));
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_rawiter_next(
									iterator, 
									unsafe_points
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (points != null)
					for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
					{
						// [fwd] [out] [optional] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp points
						points[mcgIdx] = unsafe_points[mcgIdx];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, sk_path_rawiter_peek, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKPathVerb__SkiaSharp__SKPathVerb__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_rawiter_peek")]
		public static global::SkiaSharp.SKPathVerb__SkiaSharp sk_path_rawiter_peek(global::System.IntPtr iterator)
		{
			// Setup
			global::SkiaSharp.SKPathVerb__SkiaSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_rawiter_peek(iterator);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_rawiter_conic_weight, [fwd] [return] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_rawiter_conic_weight")]
		public static float sk_path_rawiter_conic_weight(global::System.IntPtr iterator)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_rawiter_conic_weight(iterator);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_rawiter_destroy, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_rawiter_destroy")]
		public static void sk_path_rawiter_destroy(global::System.IntPtr path)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_rawiter_destroy(path);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_maskfilter_unref, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_maskfilter_unref")]
		public static void sk_maskfilter_unref(global::System.IntPtr t)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_maskfilter_unref(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_maskfilter_new_blur, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKBlurStyle__SkiaSharp__SKBlurStyle__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_maskfilter_new_blur")]
		public static global::System.IntPtr sk_maskfilter_new_blur(
					global::SkiaSharp.SKBlurStyle__SkiaSharp style, 
					float sigma)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_maskfilter_new_blur(
								style, 
								sigma
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_maskfilter_new_blur_with_flags, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKBlurStyle__SkiaSharp__SKBlurStyle__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKBlurMaskFilterFlags__SkiaSharp__SKBlurMaskFilterFlags__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_maskfilter_new_blur_with_flags")]
		public static global::System.IntPtr sk_maskfilter_new_blur_with_flags(
					global::SkiaSharp.SKBlurStyle__SkiaSharp style, 
					float sigma, 
					ref global::SkiaSharp.SKRect__SkiaSharp occluder, 
					global::SkiaSharp.SKBlurMaskFilterFlags__SkiaSharp flags)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_occluder = &(occluder))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_maskfilter_new_blur_with_flags(
									style, 
									sigma, 
									pinned_occluder, 
									flags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_maskfilter_new_table, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_maskfilter_new_table")]
		public static global::System.IntPtr sk_maskfilter_new_table(byte[] table)
		{
			// Setup
			byte* unsafe_table;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_table = ((table != null 
						&& table.Length == 0) ? new byte[1] : table))
			{
				unsafe_table = (byte*)pinned_table;
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_maskfilter_new_table(unsafe_table);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_maskfilter_new_gamma, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_maskfilter_new_gamma")]
		public static global::System.IntPtr sk_maskfilter_new_gamma(float gamma)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_maskfilter_new_gamma(gamma);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_maskfilter_new_clip, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] byte__unsigned char, [fwd] [in] [EETypeRva:0x000413DC] byte__unsigned char, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_maskfilter_new_clip")]
		public static global::System.IntPtr sk_maskfilter_new_clip(
					byte min, 
					byte max)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_maskfilter_new_clip(
								min, 
								max
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_croprect_new, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_croprect_new")]
		public static global::System.IntPtr sk_imagefilter_croprect_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_croprect_new();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_croprect_new_with_rect, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKCropRectFlags__SkiaSharp__SKCropRectFlags__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_croprect_new_with_rect")]
		public static global::System.IntPtr sk_imagefilter_croprect_new_with_rect(
					ref global::SkiaSharp.SKRect__SkiaSharp rect, 
					global::SkiaSharp.SKCropRectFlags__SkiaSharp flags)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_croprect_new_with_rect(
									pinned_rect, 
									flags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_croprect_destructor, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_croprect_destructor")]
		public static void sk_imagefilter_croprect_destructor(global::System.IntPtr cropRect)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_croprect_destructor(cropRect);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_imagefilter_croprect_get_rect, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_croprect_get_rect")]
		public static void sk_imagefilter_croprect_get_rect(
					global::System.IntPtr cropRect, 
					out global::SkiaSharp.SKRect__SkiaSharp rect)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_croprect_get_rect(
									cropRect, 
									pinned_rect
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_imagefilter_croprect_get_flags, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKCropRectFlags__SkiaSharp__SKCropRectFlags__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_croprect_get_flags")]
		public static global::SkiaSharp.SKCropRectFlags__SkiaSharp sk_imagefilter_croprect_get_flags(global::System.IntPtr cropRect)
		{
			// Setup
			global::SkiaSharp.SKCropRectFlags__SkiaSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_croprect_get_flags(cropRect);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_unref, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_unref")]
		public static void sk_imagefilter_unref(global::System.IntPtr filter)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_unref(filter);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_imagefilter_new_matrix, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKFilterQuality__SkiaSharp__SKFilterQuality__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_matrix")]
		public static global::System.IntPtr sk_imagefilter_new_matrix(
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix, 
					global::SkiaSharp.SKFilterQuality__SkiaSharp quality, 
					global::System.IntPtr input)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_matrix(
									pinned_matrix, 
									quality, 
									input
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_alpha_threshold, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRectI__SkiaSharp__SkiaSharp__SKRectI__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_alpha_threshold")]
		public static global::System.IntPtr sk_imagefilter_new_alpha_threshold(
					ref global::SkiaSharp.SKRectI__SkiaSharp region, 
					float innerThreshold, 
					float outerThreshold, 
					global::System.IntPtr input)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRectI__SkiaSharp* pinned_region = &(region))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_alpha_threshold(
									pinned_region, 
									innerThreshold, 
									outerThreshold, 
									input
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_blur, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_blur")]
		public static global::System.IntPtr sk_imagefilter_new_blur(
					float sigmaX, 
					float sigmaY, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_blur(
								sigmaX, 
								sigmaY, 
								input, 
								cropRect
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_color_filter, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_color_filter")]
		public static global::System.IntPtr sk_imagefilter_new_color_filter(
					global::System.IntPtr cf, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_color_filter(
								cf, 
								input, 
								cropRect
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_compose, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_compose")]
		public static global::System.IntPtr sk_imagefilter_new_compose(
					global::System.IntPtr outer, 
					global::System.IntPtr inner)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_compose(
								outer, 
								inner
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_displacement_map_effect, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKDisplacementMapEffectChannelSelectorType__SkiaSharp__SKDisplacementMapEffectChannelSelectorType__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKDisplacementMapEffectChannelSelectorType__SkiaSharp__SKDisplacementMapEffectChannelSelectorType__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_displacement_map_effect")]
		public static global::System.IntPtr sk_imagefilter_new_displacement_map_effect(
					global::SkiaSharp.SKDisplacementMapEffectChannelSelectorType__SkiaSharp xChannelSelector, 
					global::SkiaSharp.SKDisplacementMapEffectChannelSelectorType__SkiaSharp yChannelSelector, 
					float scale, 
					global::System.IntPtr displacement, 
					global::System.IntPtr color, 
					global::System.IntPtr cropRect)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_displacement_map_effect(
								xChannelSelector, 
								yChannelSelector, 
								scale, 
								displacement, 
								color, 
								cropRect
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_drop_shadow, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKDropShadowImageFilterShadowMode__SkiaSharp__SKDropShadowImageFilterShadowMode__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_drop_shadow")]
		public static global::System.IntPtr sk_imagefilter_new_drop_shadow(
					float dx, 
					float dy, 
					float sigmaX, 
					float sigmaY, 
					global::SkiaSharp.SKColor__SkiaSharp color, 
					global::SkiaSharp.SKDropShadowImageFilterShadowMode__SkiaSharp shadowMode, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_drop_shadow(
								dx, 
								dy, 
								sigmaX, 
								sigmaY, 
								color, 
								shadowMode, 
								input, 
								cropRect
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_distant_lit_diffuse, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint3__SkiaSharp__SkiaSharp__SKPoint3__SkiaSharp, [fwd] [in] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_distant_lit_diffuse")]
		public static global::System.IntPtr sk_imagefilter_new_distant_lit_diffuse(
					ref global::SkiaSharp.SKPoint3__SkiaSharp direction, 
					global::SkiaSharp.SKColor__SkiaSharp lightColor, 
					float surfaceScale, 
					float kd, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKPoint3__SkiaSharp* pinned_direction = &(direction))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_distant_lit_diffuse(
									pinned_direction, 
									lightColor, 
									surfaceScale, 
									kd, 
									input, 
									cropRect
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_point_lit_diffuse, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint3__SkiaSharp__SkiaSharp__SKPoint3__SkiaSharp, [fwd] [in] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_point_lit_diffuse")]
		public static global::System.IntPtr sk_imagefilter_new_point_lit_diffuse(
					ref global::SkiaSharp.SKPoint3__SkiaSharp location, 
					global::SkiaSharp.SKColor__SkiaSharp lightColor, 
					float surfaceScale, 
					float kd, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKPoint3__SkiaSharp* pinned_location = &(location))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_point_lit_diffuse(
									pinned_location, 
									lightColor, 
									surfaceScale, 
									kd, 
									input, 
									cropRect
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_spot_lit_diffuse, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint3__SkiaSharp__SkiaSharp__SKPoint3__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint3__SkiaSharp__SkiaSharp__SKPoint3__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_spot_lit_diffuse")]
		public static global::System.IntPtr sk_imagefilter_new_spot_lit_diffuse(
					ref global::SkiaSharp.SKPoint3__SkiaSharp location, 
					ref global::SkiaSharp.SKPoint3__SkiaSharp target, 
					float specularExponent, 
					float cutoffAngle, 
					global::SkiaSharp.SKColor__SkiaSharp lightColor, 
					float surfaceScale, 
					float kd, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKPoint3__SkiaSharp* pinned_location = &(location))
				fixed (global::SkiaSharp.SKPoint3__SkiaSharp* pinned_target = &(target))
				{
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_spot_lit_diffuse(
										pinned_location, 
										pinned_target, 
										specularExponent, 
										cutoffAngle, 
										lightColor, 
										surfaceScale, 
										kd, 
										input, 
										cropRect
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_distant_lit_specular, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint3__SkiaSharp__SkiaSharp__SKPoint3__SkiaSharp, [fwd] [in] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_distant_lit_specular")]
		public static global::System.IntPtr sk_imagefilter_new_distant_lit_specular(
					ref global::SkiaSharp.SKPoint3__SkiaSharp direction, 
					global::SkiaSharp.SKColor__SkiaSharp lightColor, 
					float surfaceScale, 
					float ks, 
					float shininess, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKPoint3__SkiaSharp* pinned_direction = &(direction))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_distant_lit_specular(
									pinned_direction, 
									lightColor, 
									surfaceScale, 
									ks, 
									shininess, 
									input, 
									cropRect
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_point_lit_specular, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint3__SkiaSharp__SkiaSharp__SKPoint3__SkiaSharp, [fwd] [in] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_point_lit_specular")]
		public static global::System.IntPtr sk_imagefilter_new_point_lit_specular(
					ref global::SkiaSharp.SKPoint3__SkiaSharp location, 
					global::SkiaSharp.SKColor__SkiaSharp lightColor, 
					float surfaceScale, 
					float ks, 
					float shininess, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKPoint3__SkiaSharp* pinned_location = &(location))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_point_lit_specular(
									pinned_location, 
									lightColor, 
									surfaceScale, 
									ks, 
									shininess, 
									input, 
									cropRect
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_spot_lit_specular, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint3__SkiaSharp__SkiaSharp__SKPoint3__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint3__SkiaSharp__SkiaSharp__SKPoint3__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_spot_lit_specular")]
		public static global::System.IntPtr sk_imagefilter_new_spot_lit_specular(
					ref global::SkiaSharp.SKPoint3__SkiaSharp location, 
					ref global::SkiaSharp.SKPoint3__SkiaSharp target, 
					float specularExponent, 
					float cutoffAngle, 
					global::SkiaSharp.SKColor__SkiaSharp lightColor, 
					float surfaceScale, 
					float ks, 
					float shininess, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKPoint3__SkiaSharp* pinned_location = &(location))
				fixed (global::SkiaSharp.SKPoint3__SkiaSharp* pinned_target = &(target))
				{
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_spot_lit_specular(
										pinned_location, 
										pinned_target, 
										specularExponent, 
										cutoffAngle, 
										lightColor, 
										surfaceScale, 
										ks, 
										shininess, 
										input, 
										cropRect
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_magnifier, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_magnifier")]
		public static global::System.IntPtr sk_imagefilter_new_magnifier(
					ref global::SkiaSharp.SKRect__SkiaSharp src, 
					float inset, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_src = &(src))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_magnifier(
									pinned_src, 
									inset, 
									input, 
									cropRect
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_matrix_convolution, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKSizeI__SkiaSharp__SkiaSharp__SKSizeI__SkiaSharp, [fwd] [in] [EETypeRva:0x00040EE4] rg_float__float *, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPointI__SkiaSharp__SkiaSharp__SKPointI__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKMatrixConvolutionTileMode__SkiaSharp__SKMatrixConvolutionTileMode__SkiaSharp, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_matrix_convolution")]
		public static global::System.IntPtr sk_imagefilter_new_matrix_convolution(
					ref global::SkiaSharp.SKSizeI__SkiaSharp kernelSize, 
					float[] kernel, 
					float gain, 
					float bias, 
					ref global::SkiaSharp.SKPointI__SkiaSharp kernelOffset, 
					global::SkiaSharp.SKMatrixConvolutionTileMode__SkiaSharp tileMode, 
					bool convolveAlpha, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect)
		{
			// Setup
			float* unsafe_kernel;
			sbyte unsafe_convolveAlpha;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKSizeI__SkiaSharp* pinned_kernelSize = &(kernelSize))
				fixed (float* pinned_kernel = ((kernel != null 
							&& kernel.Length == 0) ? new float[1] : kernel))
				{
					unsafe_kernel = (float*)pinned_kernel;
					fixed (global::SkiaSharp.SKPointI__SkiaSharp* pinned_kernelOffset = &(kernelOffset))
					{
						unsafe_convolveAlpha = (convolveAlpha ? ((sbyte)1) : ((sbyte)0));
						// Call to native method
						unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_matrix_convolution(
											pinned_kernelSize, 
											unsafe_kernel, 
											gain, 
											bias, 
											pinned_kernelOffset, 
											tileMode, 
											unsafe_convolveAlpha, 
											input, 
											cropRect
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
				}
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_merge, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_System_IntPtr____w64 int *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKBlendMode__SkiaSharp__SKBlendMode__SkiaSharp *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_merge")]
		public static global::System.IntPtr sk_imagefilter_new_merge(
					global::System.IntPtr[] filters, 
					int count, 
					global::SkiaSharp.SKBlendMode__SkiaSharp[] modes, 
					global::System.IntPtr cropRect)
		{
			// Setup
			global::System.IntPtr* unsafe_filters;
			global::SkiaSharp.SKBlendMode__SkiaSharp* unsafe_modes = default(global::SkiaSharp.SKBlendMode__SkiaSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_filters = ((filters != null 
							&& filters.Length == 0) ? new global::System.IntPtr[1] : filters))
				{
					unsafe_filters = (global::System.IntPtr*)pinned_filters;
					if (modes == null)
						unsafe_modes = null;
					else
					{
						if (modes != null)
							unsafe_modes = (global::SkiaSharp.SKBlendMode__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(modes.Length * sizeof(global::SkiaSharp.SKBlendMode__SkiaSharp))));
						if (modes != null)
							for (uint mcgIdx = 0; (mcgIdx < modes.Length); mcgIdx++)
							{
								// [fwd] [in] [optional] [EETypeRva:0x00041308] SkiaSharp_SKBlendMode__SkiaSharp__SKBlendMode__SkiaSharp modes
								unsafe_modes[mcgIdx] = modes[mcgIdx];
							}
					}
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_merge(
										unsafe_filters, 
										count, 
										unsafe_modes, 
										cropRect
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_modes);
			}
		}

		// Signature, sk_imagefilter_new_dilate, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_dilate")]
		public static global::System.IntPtr sk_imagefilter_new_dilate(
					int radiusX, 
					int radiusY, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_dilate(
								radiusX, 
								radiusY, 
								input, 
								cropRect
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_erode, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_erode")]
		public static global::System.IntPtr sk_imagefilter_new_erode(
					int radiusX, 
					int radiusY, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_erode(
								radiusX, 
								radiusY, 
								input, 
								cropRect
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_offset, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_offset")]
		public static global::System.IntPtr sk_imagefilter_new_offset(
					float dx, 
					float dy, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_offset(
								dx, 
								dy, 
								input, 
								cropRect
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_picture, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_picture")]
		public static global::System.IntPtr sk_imagefilter_new_picture(global::System.IntPtr picture)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_picture(picture);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_picture_with_croprect, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_picture_with_croprect")]
		public static global::System.IntPtr sk_imagefilter_new_picture_with_croprect(
					global::System.IntPtr picture, 
					ref global::SkiaSharp.SKRect__SkiaSharp cropRect)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_cropRect = &(cropRect))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_picture_with_croprect(
									picture, 
									pinned_cropRect
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_picture_for_localspace, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKFilterQuality__SkiaSharp__SKFilterQuality__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_picture_for_localspace")]
		public static global::System.IntPtr sk_imagefilter_new_picture_for_localspace(
					global::System.IntPtr picture, 
					ref global::SkiaSharp.SKRect__SkiaSharp cropRect, 
					global::SkiaSharp.SKFilterQuality__SkiaSharp filterQuality)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_cropRect = &(cropRect))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_picture_for_localspace(
									picture, 
									pinned_cropRect, 
									filterQuality
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_tile, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_tile")]
		public static global::System.IntPtr sk_imagefilter_new_tile(
					ref global::SkiaSharp.SKRect__SkiaSharp src, 
					ref global::SkiaSharp.SKRect__SkiaSharp dst, 
					global::System.IntPtr input)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_src = &(src))
				fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_dst = &(dst))
				{
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_tile(
										pinned_src, 
										pinned_dst, 
										input
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_xfermode, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKBlendMode__SkiaSharp__SKBlendMode__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_xfermode")]
		public static global::System.IntPtr sk_imagefilter_new_xfermode(
					global::SkiaSharp.SKBlendMode__SkiaSharp mode, 
					global::System.IntPtr background, 
					global::System.IntPtr foreground, 
					global::System.IntPtr cropRect)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_xfermode(
								mode, 
								background, 
								foreground, 
								cropRect
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_arithmetic, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_arithmetic")]
		public static global::System.IntPtr sk_imagefilter_new_arithmetic(
					float k1, 
					float k2, 
					float k3, 
					float k4, 
					bool enforcePMColor, 
					global::System.IntPtr background, 
					global::System.IntPtr foreground, 
					global::System.IntPtr cropRect)
		{
			// Setup
			sbyte unsafe_enforcePMColor;
			global::System.IntPtr unsafe___value;
			// Marshalling
			unsafe_enforcePMColor = (enforcePMColor ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_arithmetic(
								k1, 
								k2, 
								k3, 
								k4, 
								unsafe_enforcePMColor, 
								background, 
								foreground, 
								cropRect
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_image_source, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKFilterQuality__SkiaSharp__SKFilterQuality__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_image_source")]
		public static global::System.IntPtr sk_imagefilter_new_image_source(
					global::System.IntPtr image, 
					ref global::SkiaSharp.SKRect__SkiaSharp srcRect, 
					ref global::SkiaSharp.SKRect__SkiaSharp dstRect, 
					global::SkiaSharp.SKFilterQuality__SkiaSharp filterQuality)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_srcRect = &(srcRect))
				fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_dstRect = &(dstRect))
				{
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_image_source(
										image, 
										pinned_srcRect, 
										pinned_dstRect, 
										filterQuality
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_image_source_default, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_image_source_default")]
		public static global::System.IntPtr sk_imagefilter_new_image_source_default(global::System.IntPtr image)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_image_source_default(image);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_imagefilter_new_paint, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_imagefilter_new_paint")]
		public static global::System.IntPtr sk_imagefilter_new_paint(
					global::System.IntPtr paint, 
					global::System.IntPtr cropRect)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_imagefilter_new_paint(
								paint, 
								cropRect
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_colorfilter_unref, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorfilter_unref")]
		public static void sk_colorfilter_unref(global::System.IntPtr filter)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorfilter_unref(filter);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_colorfilter_new_mode, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKBlendMode__SkiaSharp__SKBlendMode__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorfilter_new_mode")]
		public static global::System.IntPtr sk_colorfilter_new_mode(
					global::SkiaSharp.SKColor__SkiaSharp c, 
					global::SkiaSharp.SKBlendMode__SkiaSharp mode)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorfilter_new_mode(
								c, 
								mode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_colorfilter_new_lighting, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp, [fwd] [in] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorfilter_new_lighting")]
		public static global::System.IntPtr sk_colorfilter_new_lighting(
					global::SkiaSharp.SKColor__SkiaSharp mul, 
					global::SkiaSharp.SKColor__SkiaSharp add)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorfilter_new_lighting(
								mul, 
								add
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_colorfilter_new_compose, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorfilter_new_compose")]
		public static global::System.IntPtr sk_colorfilter_new_compose(
					global::System.IntPtr outer, 
					global::System.IntPtr inner)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorfilter_new_compose(
								outer, 
								inner
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_colorfilter_new_color_matrix, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_float__float *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorfilter_new_color_matrix")]
		public static global::System.IntPtr sk_colorfilter_new_color_matrix(float[] array)
		{
			// Setup
			float* unsafe_array;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (float* pinned_array = ((array != null 
						&& array.Length == 0) ? new float[1] : array))
			{
				unsafe_array = (float*)pinned_array;
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorfilter_new_color_matrix(unsafe_array);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_colorfilter_new_luma_color, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorfilter_new_luma_color")]
		public static global::System.IntPtr sk_colorfilter_new_luma_color()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorfilter_new_luma_color();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_colorfilter_new_table, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorfilter_new_table")]
		public static global::System.IntPtr sk_colorfilter_new_table(byte[] table)
		{
			// Setup
			byte* unsafe_table;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_table = ((table != null 
						&& table.Length == 0) ? new byte[1] : table))
			{
				unsafe_table = (byte*)pinned_table;
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorfilter_new_table(unsafe_table);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_colorfilter_new_table_argb, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorfilter_new_table_argb")]
		public static global::System.IntPtr sk_colorfilter_new_table_argb(
					byte[] tableA, 
					byte[] tableR, 
					byte[] tableG, 
					byte[] tableB)
		{
			// Setup
			byte* unsafe_tableA;
			byte* unsafe_tableR;
			byte* unsafe_tableG;
			byte* unsafe_tableB;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_tableA = ((tableA != null 
						&& tableA.Length == 0) ? new byte[1] : tableA))
			{
				unsafe_tableA = (byte*)pinned_tableA;
				fixed (byte* pinned_tableR = ((tableR != null 
							&& tableR.Length == 0) ? new byte[1] : tableR))
				{
					unsafe_tableR = (byte*)pinned_tableR;
					fixed (byte* pinned_tableG = ((tableG != null 
								&& tableG.Length == 0) ? new byte[1] : tableG))
					{
						unsafe_tableG = (byte*)pinned_tableG;
						fixed (byte* pinned_tableB = ((tableB != null 
									&& tableB.Length == 0) ? new byte[1] : tableB))
						{
							unsafe_tableB = (byte*)pinned_tableB;
							// Call to native method
							unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorfilter_new_table_argb(
												unsafe_tableA, 
												unsafe_tableR, 
												unsafe_tableG, 
												unsafe_tableB
											);
							global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						}
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_colorfilter_new_high_contrast, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKHighContrastConfig__SkiaSharp__SkiaSharp__SKHighContrastConfig__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colorfilter_new_high_contrast")]
		public static global::System.IntPtr sk_colorfilter_new_high_contrast(ref global::SkiaSharp.SKHighContrastConfig__SkiaSharp config)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKHighContrastConfig__SkiaSharp* pinned_config = &(config))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colorfilter_new_high_contrast(pinned_config);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_data_new_empty, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_data_new_empty")]
		public static global::System.IntPtr sk_data_new_empty()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_data_new_empty();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_data_new_with_copy, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_data_new_with_copy")]
		public static global::System.IntPtr sk_data_new_with_copy(
					global::System.IntPtr src, 
					global::System.IntPtr length)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_data_new_with_copy(
								src, 
								length
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_data_new_with_copy__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_data_new_with_copy")]
		public static global::System.IntPtr sk_data_new_with_copy__0(
					byte[] src, 
					global::System.IntPtr length)
		{
			// Setup
			byte* unsafe_src;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_src = ((src != null 
						&& src.Length == 0) ? new byte[1] : src))
			{
				unsafe_src = (byte*)pinned_src;
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_data_new_with_copy__0(
									unsafe_src, 
									length
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_data_new_from_malloc, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_data_new_from_malloc")]
		public static global::System.IntPtr sk_data_new_from_malloc(
					global::System.IntPtr malloc, 
					global::System.IntPtr length)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_data_new_from_malloc(
								malloc, 
								length
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_data_new_from_malloc__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_data_new_from_malloc")]
		public static global::System.IntPtr sk_data_new_from_malloc__0(
					byte[] malloc, 
					global::System.IntPtr length)
		{
			// Setup
			byte* unsafe_malloc;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_malloc = ((malloc != null 
						&& malloc.Length == 0) ? new byte[1] : malloc))
			{
				unsafe_malloc = (byte*)pinned_malloc;
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_data_new_from_malloc__0(
									unsafe_malloc, 
									length
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_data_new_subset, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_data_new_subset")]
		public static global::System.IntPtr sk_data_new_subset(
					global::System.IntPtr src, 
					global::System.IntPtr offset, 
					global::System.IntPtr length)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_data_new_subset(
								src, 
								offset, 
								length
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_data_new_from_file, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040008] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_data_new_from_file")]
		public static global::System.IntPtr sk_data_new_from_file(string path)
		{
			// Setup
			byte* unsafe_path = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_path = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(path, true, false);
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_data_new_from_file(unsafe_path);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_path);
			}
		}

		// Signature, sk_data_new_from_stream, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_data_new_from_stream")]
		public static global::System.IntPtr sk_data_new_from_stream(
					global::System.IntPtr stream, 
					global::System.IntPtr length)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_data_new_from_stream(
								stream, 
								length
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_data_new_with_proc, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_data_new_with_proc")]
		public static global::System.IntPtr sk_data_new_with_proc(
					global::System.IntPtr ptr, 
					global::System.IntPtr length, 
					global::System.IntPtr proc, 
					global::System.IntPtr ctx)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_data_new_with_proc(
								ptr, 
								length, 
								proc, 
								ctx
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_data_unref, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_data_unref")]
		public static void sk_data_unref(global::System.IntPtr d)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_data_unref(d);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_data_get_size, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_data_get_size")]
		public static global::System.IntPtr sk_data_get_size(global::System.IntPtr d)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_data_get_size(d);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_data_get_data, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_data_get_data")]
		public static global::System.IntPtr sk_data_get_data(global::System.IntPtr d)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_data_get_data(d);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_data_new_uninitialized, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_data_new_uninitialized")]
		public static global::System.IntPtr sk_data_new_uninitialized(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_data_new_uninitialized(size);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_string_new_empty, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_string_new_empty")]
		public static global::System.IntPtr sk_string_new_empty()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_string_new_empty();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_string_new_with_copy, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_string_new_with_copy")]
		public static global::System.IntPtr sk_string_new_with_copy(
					byte[] src, 
					global::System.IntPtr length)
		{
			// Setup
			byte* unsafe_src;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_src = ((src != null 
						&& src.Length == 0) ? new byte[1] : src))
			{
				unsafe_src = (byte*)pinned_src;
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_string_new_with_copy(
									unsafe_src, 
									length
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_string_destructor, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_string_destructor")]
		public static void sk_string_destructor(global::System.IntPtr skstring)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_string_destructor(skstring);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_string_get_size, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_string_get_size")]
		public static global::System.IntPtr sk_string_get_size(global::System.IntPtr skstring)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_string_get_size(skstring);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_string_get_c_str, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_string_get_c_str")]
		public static global::System.IntPtr sk_string_get_c_str(global::System.IntPtr skstring)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_string_get_c_str(skstring);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_picture_recorder_delete, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_picture_recorder_delete")]
		public static void sk_picture_recorder_delete(global::System.IntPtr r)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_picture_recorder_delete(r);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_picture_recorder_new, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_picture_recorder_new")]
		public static global::System.IntPtr sk_picture_recorder_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_picture_recorder_new();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_picture_recorder_begin_recording, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_picture_recorder_begin_recording")]
		public static global::System.IntPtr sk_picture_recorder_begin_recording(
					global::System.IntPtr r, 
					ref global::SkiaSharp.SKRect__SkiaSharp rect)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_picture_recorder_begin_recording(
									r, 
									pinned_rect
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_picture_recorder_end_recording, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_picture_recorder_end_recording")]
		public static global::System.IntPtr sk_picture_recorder_end_recording(global::System.IntPtr r)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_picture_recorder_end_recording(r);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_picture_get_recording_canvas, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_picture_get_recording_canvas")]
		public static global::System.IntPtr sk_picture_get_recording_canvas(global::System.IntPtr r)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_picture_get_recording_canvas(r);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_picture_unref, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_picture_unref")]
		public static void sk_picture_unref(global::System.IntPtr t)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_picture_unref(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_picture_get_unique_id, [fwd] [return] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_picture_get_unique_id")]
		public static uint sk_picture_get_unique_id(global::System.IntPtr p)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_picture_get_unique_id(p);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_picture_get_cull_rect, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_picture_get_cull_rect")]
		public static void sk_picture_get_cull_rect(
					global::System.IntPtr p, 
					out global::SkiaSharp.SKRect__SkiaSharp rect)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_picture_get_cull_rect(
									p, 
									pinned_rect
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_shader_unref, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_unref")]
		public static void sk_shader_unref(global::System.IntPtr t)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_unref(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_shader_new_empty, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_empty")]
		public static global::System.IntPtr sk_shader_new_empty()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_empty();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_shader_new_color, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_color")]
		public static global::System.IntPtr sk_shader_new_color(global::SkiaSharp.SKColor__SkiaSharp color)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_color(color);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_shader_new_local_matrix, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_local_matrix")]
		public static global::System.IntPtr sk_shader_new_local_matrix(
					global::System.IntPtr proxy, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_local_matrix(
									proxy, 
									pinned_matrix
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_shader_new_color_filter, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_color_filter")]
		public static global::System.IntPtr sk_shader_new_color_filter(
					global::System.IntPtr proxy, 
					global::System.IntPtr filter)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_color_filter(
								proxy, 
								filter
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_shader_new_bitmap, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKShaderTileMode__SkiaSharp__SKShaderTileMode__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKShaderTileMode__SkiaSharp__SKShaderTileMode__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_bitmap")]
		public static global::System.IntPtr sk_shader_new_bitmap(
					global::System.IntPtr src, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp tmx, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp tmy, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_bitmap(
									src, 
									tmx, 
									tmy, 
									pinned_matrix
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_shader_new_bitmap__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKShaderTileMode__SkiaSharp__SKShaderTileMode__SkiaSharp, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKShaderTileMode__SkiaSharp__SKShaderTileMode__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_bitmap")]
		public static global::System.IntPtr sk_shader_new_bitmap__0(
					global::System.IntPtr src, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp tmx, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp tmy, 
					global::System.IntPtr matrixZero)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_bitmap__0(
								src, 
								tmx, 
								tmy, 
								matrixZero
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_shader_new_linear_gradient, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp *, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp *, [fwd] [in] [EETypeRva:0x00040EE4] rg_float__float *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKShaderTileMode__SkiaSharp__SKShaderTileMode__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_linear_gradient")]
		public static global::System.IntPtr sk_shader_new_linear_gradient(
					global::SkiaSharp.SKPoint__SkiaSharp[] points, 
					global::SkiaSharp.SKColor__SkiaSharp[] colors, 
					float[] colorPos, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix)
		{
			// Setup
			global::SkiaSharp.SKPoint__SkiaSharp* unsafe_points = default(global::SkiaSharp.SKPoint__SkiaSharp*);
			global::SkiaSharp.SKColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKColor__SkiaSharp*);
			float* unsafe_colorPos;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::SkiaSharp.SKPoint__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::SkiaSharp.SKPoint__SkiaSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				if (colors == null)
					unsafe_colors = null;
				else
				{
					if (colors != null)
						unsafe_colors = (global::SkiaSharp.SKColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKColor__SkiaSharp))));
					if (colors != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < colors.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp colors
							unsafe_colors[mcgIdx_2] = colors[mcgIdx_2];
						}
				}
				fixed (float* pinned_colorPos = ((colorPos != null 
							&& colorPos.Length == 0) ? new float[1] : colorPos))
				{
					unsafe_colorPos = (float*)pinned_colorPos;
					fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
					{
						// Call to native method
						unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_linear_gradient(
											unsafe_points, 
											unsafe_colors, 
											unsafe_colorPos, 
											count, 
											mode, 
											pinned_matrix
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, sk_shader_new_linear_gradient__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp *, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp *, [fwd] [in] [EETypeRva:0x00040EE4] rg_float__float *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKShaderTileMode__SkiaSharp__SKShaderTileMode__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_linear_gradient")]
		public static global::System.IntPtr sk_shader_new_linear_gradient__0(
					global::SkiaSharp.SKPoint__SkiaSharp[] points, 
					global::SkiaSharp.SKColor__SkiaSharp[] colors, 
					float[] colorPos, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					global::System.IntPtr matrixZero)
		{
			// Setup
			global::SkiaSharp.SKPoint__SkiaSharp* unsafe_points = default(global::SkiaSharp.SKPoint__SkiaSharp*);
			global::SkiaSharp.SKColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKColor__SkiaSharp*);
			float* unsafe_colorPos;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::SkiaSharp.SKPoint__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::SkiaSharp.SKPoint__SkiaSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				if (colors == null)
					unsafe_colors = null;
				else
				{
					if (colors != null)
						unsafe_colors = (global::SkiaSharp.SKColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKColor__SkiaSharp))));
					if (colors != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < colors.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp colors
							unsafe_colors[mcgIdx_2] = colors[mcgIdx_2];
						}
				}
				fixed (float* pinned_colorPos = ((colorPos != null 
							&& colorPos.Length == 0) ? new float[1] : colorPos))
				{
					unsafe_colorPos = (float*)pinned_colorPos;
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_linear_gradient__0(
										unsafe_points, 
										unsafe_colors, 
										unsafe_colorPos, 
										count, 
										mode, 
										matrixZero
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, sk_shader_new_radial_gradient, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp *, [fwd] [in] [EETypeRva:0x00040EE4] rg_float__float *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKShaderTileMode__SkiaSharp__SKShaderTileMode__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_radial_gradient")]
		public static global::System.IntPtr sk_shader_new_radial_gradient(
					ref global::SkiaSharp.SKPoint__SkiaSharp center, 
					float radius, 
					global::SkiaSharp.SKColor__SkiaSharp[] colors, 
					float[] colorPos, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix)
		{
			// Setup
			global::SkiaSharp.SKColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKColor__SkiaSharp*);
			float* unsafe_colorPos;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_center = &(center))
				{
					if (colors == null)
						unsafe_colors = null;
					else
					{
						if (colors != null)
							unsafe_colors = (global::SkiaSharp.SKColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKColor__SkiaSharp))));
						if (colors != null)
							for (uint mcgIdx = 0; (mcgIdx < colors.Length); mcgIdx++)
							{
								// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp colors
								unsafe_colors[mcgIdx] = colors[mcgIdx];
							}
					}
					fixed (float* pinned_colorPos = ((colorPos != null 
								&& colorPos.Length == 0) ? new float[1] : colorPos))
					{
						unsafe_colorPos = (float*)pinned_colorPos;
						fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
						{
							// Call to native method
							unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_radial_gradient(
												pinned_center, 
												radius, 
												unsafe_colors, 
												unsafe_colorPos, 
												count, 
												mode, 
												pinned_matrix
											);
							global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						}
					}
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, sk_shader_new_radial_gradient__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp *, [fwd] [in] [EETypeRva:0x00040EE4] rg_float__float *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKShaderTileMode__SkiaSharp__SKShaderTileMode__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_radial_gradient")]
		public static global::System.IntPtr sk_shader_new_radial_gradient__0(
					ref global::SkiaSharp.SKPoint__SkiaSharp center, 
					float radius, 
					global::SkiaSharp.SKColor__SkiaSharp[] colors, 
					float[] colorPos, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					global::System.IntPtr matrixZero)
		{
			// Setup
			global::SkiaSharp.SKColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKColor__SkiaSharp*);
			float* unsafe_colorPos;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_center = &(center))
				{
					if (colors == null)
						unsafe_colors = null;
					else
					{
						if (colors != null)
							unsafe_colors = (global::SkiaSharp.SKColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKColor__SkiaSharp))));
						if (colors != null)
							for (uint mcgIdx = 0; (mcgIdx < colors.Length); mcgIdx++)
							{
								// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp colors
								unsafe_colors[mcgIdx] = colors[mcgIdx];
							}
					}
					fixed (float* pinned_colorPos = ((colorPos != null 
								&& colorPos.Length == 0) ? new float[1] : colorPos))
					{
						unsafe_colorPos = (float*)pinned_colorPos;
						// Call to native method
						unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_radial_gradient__0(
											pinned_center, 
											radius, 
											unsafe_colors, 
											unsafe_colorPos, 
											count, 
											mode, 
											matrixZero
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, sk_shader_new_sweep_gradient, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp *, [fwd] [in] [EETypeRva:0x00040EE4] rg_float__float *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_sweep_gradient")]
		public static global::System.IntPtr sk_shader_new_sweep_gradient(
					ref global::SkiaSharp.SKPoint__SkiaSharp center, 
					global::SkiaSharp.SKColor__SkiaSharp[] colors, 
					float[] colorPos, 
					int count, 
					global::System.IntPtr matrixZero)
		{
			// Setup
			global::SkiaSharp.SKColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKColor__SkiaSharp*);
			float* unsafe_colorPos;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_center = &(center))
				{
					if (colors == null)
						unsafe_colors = null;
					else
					{
						if (colors != null)
							unsafe_colors = (global::SkiaSharp.SKColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKColor__SkiaSharp))));
						if (colors != null)
							for (uint mcgIdx = 0; (mcgIdx < colors.Length); mcgIdx++)
							{
								// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp colors
								unsafe_colors[mcgIdx] = colors[mcgIdx];
							}
					}
					fixed (float* pinned_colorPos = ((colorPos != null 
								&& colorPos.Length == 0) ? new float[1] : colorPos))
					{
						unsafe_colorPos = (float*)pinned_colorPos;
						// Call to native method
						unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_sweep_gradient(
											pinned_center, 
											unsafe_colors, 
											unsafe_colorPos, 
											count, 
											matrixZero
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, sk_shader_new_sweep_gradient__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp *, [fwd] [in] [EETypeRva:0x00040EE4] rg_float__float *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_sweep_gradient")]
		public static global::System.IntPtr sk_shader_new_sweep_gradient__0(
					ref global::SkiaSharp.SKPoint__SkiaSharp center, 
					global::SkiaSharp.SKColor__SkiaSharp[] colors, 
					float[] colorPos, 
					int count, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrixZero)
		{
			// Setup
			global::SkiaSharp.SKColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKColor__SkiaSharp*);
			float* unsafe_colorPos;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_center = &(center))
				{
					if (colors == null)
						unsafe_colors = null;
					else
					{
						if (colors != null)
							unsafe_colors = (global::SkiaSharp.SKColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKColor__SkiaSharp))));
						if (colors != null)
							for (uint mcgIdx = 0; (mcgIdx < colors.Length); mcgIdx++)
							{
								// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp colors
								unsafe_colors[mcgIdx] = colors[mcgIdx];
							}
					}
					fixed (float* pinned_colorPos = ((colorPos != null 
								&& colorPos.Length == 0) ? new float[1] : colorPos))
					{
						unsafe_colorPos = (float*)pinned_colorPos;
						fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrixZero = &(matrixZero))
						{
							// Call to native method
							unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_sweep_gradient__0(
												pinned_center, 
												unsafe_colors, 
												unsafe_colorPos, 
												count, 
												pinned_matrixZero
											);
							global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						}
					}
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, sk_shader_new_two_point_conical_gradient, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp *, [fwd] [in] [EETypeRva:0x00040EE4] rg_float__float *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKShaderTileMode__SkiaSharp__SKShaderTileMode__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_two_point_conical_gradient")]
		public static global::System.IntPtr sk_shader_new_two_point_conical_gradient(
					ref global::SkiaSharp.SKPoint__SkiaSharp start, 
					float startRadius, 
					ref global::SkiaSharp.SKPoint__SkiaSharp end, 
					float endRadius, 
					global::SkiaSharp.SKColor__SkiaSharp[] colors, 
					float[] colorPos, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix)
		{
			// Setup
			global::SkiaSharp.SKColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKColor__SkiaSharp*);
			float* unsafe_colorPos;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_start = &(start))
					fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_end = &(end))
					{
						if (colors == null)
							unsafe_colors = null;
						else
						{
							if (colors != null)
								unsafe_colors = (global::SkiaSharp.SKColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKColor__SkiaSharp))));
							if (colors != null)
								for (uint mcgIdx = 0; (mcgIdx < colors.Length); mcgIdx++)
								{
									// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp colors
									unsafe_colors[mcgIdx] = colors[mcgIdx];
								}
						}
						fixed (float* pinned_colorPos = ((colorPos != null 
									&& colorPos.Length == 0) ? new float[1] : colorPos))
						{
							unsafe_colorPos = (float*)pinned_colorPos;
							fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
							{
								// Call to native method
								unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_two_point_conical_gradient(
													pinned_start, 
													startRadius, 
													pinned_end, 
													endRadius, 
													unsafe_colors, 
													unsafe_colorPos, 
													count, 
													mode, 
													pinned_matrix
												);
								global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
							}
						}
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, sk_shader_new_two_point_conical_gradient__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp *, [fwd] [in] [EETypeRva:0x00040EE4] rg_float__float *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKShaderTileMode__SkiaSharp__SKShaderTileMode__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_two_point_conical_gradient")]
		public static global::System.IntPtr sk_shader_new_two_point_conical_gradient__0(
					ref global::SkiaSharp.SKPoint__SkiaSharp start, 
					float startRadius, 
					ref global::SkiaSharp.SKPoint__SkiaSharp end, 
					float endRadius, 
					global::SkiaSharp.SKColor__SkiaSharp[] colors, 
					float[] colorPos, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					global::System.IntPtr matrixZero)
		{
			// Setup
			global::SkiaSharp.SKColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKColor__SkiaSharp*);
			float* unsafe_colorPos;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_start = &(start))
					fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_end = &(end))
					{
						if (colors == null)
							unsafe_colors = null;
						else
						{
							if (colors != null)
								unsafe_colors = (global::SkiaSharp.SKColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKColor__SkiaSharp))));
							if (colors != null)
								for (uint mcgIdx = 0; (mcgIdx < colors.Length); mcgIdx++)
								{
									// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp colors
									unsafe_colors[mcgIdx] = colors[mcgIdx];
								}
						}
						fixed (float* pinned_colorPos = ((colorPos != null 
									&& colorPos.Length == 0) ? new float[1] : colorPos))
						{
							unsafe_colorPos = (float*)pinned_colorPos;
							// Call to native method
							unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_two_point_conical_gradient__0(
												pinned_start, 
												startRadius, 
												pinned_end, 
												endRadius, 
												unsafe_colors, 
												unsafe_colorPos, 
												count, 
												mode, 
												matrixZero
											);
							global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						}
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, sk_shader_new_linear_gradient__1, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp *, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKShaderTileMode__SkiaSharp__SKShaderTileMode__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_linear_gradient")]
		public static global::System.IntPtr sk_shader_new_linear_gradient__1(
					global::SkiaSharp.SKPoint__SkiaSharp[] points, 
					global::SkiaSharp.SKColor__SkiaSharp[] colors, 
					global::System.IntPtr colorPosZero, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix)
		{
			// Setup
			global::SkiaSharp.SKPoint__SkiaSharp* unsafe_points = default(global::SkiaSharp.SKPoint__SkiaSharp*);
			global::SkiaSharp.SKColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKColor__SkiaSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::SkiaSharp.SKPoint__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::SkiaSharp.SKPoint__SkiaSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				if (colors == null)
					unsafe_colors = null;
				else
				{
					if (colors != null)
						unsafe_colors = (global::SkiaSharp.SKColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKColor__SkiaSharp))));
					if (colors != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < colors.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp colors
							unsafe_colors[mcgIdx_2] = colors[mcgIdx_2];
						}
				}
				fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
				{
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_linear_gradient__1(
										unsafe_points, 
										unsafe_colors, 
										colorPosZero, 
										count, 
										mode, 
										pinned_matrix
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, sk_shader_new_linear_gradient__2, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp *, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKShaderTileMode__SkiaSharp__SKShaderTileMode__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_linear_gradient")]
		public static global::System.IntPtr sk_shader_new_linear_gradient__2(
					global::SkiaSharp.SKPoint__SkiaSharp[] points, 
					global::SkiaSharp.SKColor__SkiaSharp[] colors, 
					global::System.IntPtr colorPosZero, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					global::System.IntPtr matrixZero)
		{
			// Setup
			global::SkiaSharp.SKPoint__SkiaSharp* unsafe_points = default(global::SkiaSharp.SKPoint__SkiaSharp*);
			global::SkiaSharp.SKColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKColor__SkiaSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::SkiaSharp.SKPoint__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::SkiaSharp.SKPoint__SkiaSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				if (colors == null)
					unsafe_colors = null;
				else
				{
					if (colors != null)
						unsafe_colors = (global::SkiaSharp.SKColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKColor__SkiaSharp))));
					if (colors != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < colors.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp colors
							unsafe_colors[mcgIdx_2] = colors[mcgIdx_2];
						}
				}
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_linear_gradient__2(
									unsafe_points, 
									unsafe_colors, 
									colorPosZero, 
									count, 
									mode, 
									matrixZero
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, sk_shader_new_radial_gradient__1, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKShaderTileMode__SkiaSharp__SKShaderTileMode__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_radial_gradient")]
		public static global::System.IntPtr sk_shader_new_radial_gradient__1(
					ref global::SkiaSharp.SKPoint__SkiaSharp center, 
					float radius, 
					global::SkiaSharp.SKColor__SkiaSharp[] colors, 
					global::System.IntPtr colorPosZero, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix)
		{
			// Setup
			global::SkiaSharp.SKColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKColor__SkiaSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_center = &(center))
				{
					if (colors == null)
						unsafe_colors = null;
					else
					{
						if (colors != null)
							unsafe_colors = (global::SkiaSharp.SKColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKColor__SkiaSharp))));
						if (colors != null)
							for (uint mcgIdx = 0; (mcgIdx < colors.Length); mcgIdx++)
							{
								// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp colors
								unsafe_colors[mcgIdx] = colors[mcgIdx];
							}
					}
					fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
					{
						// Call to native method
						unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_radial_gradient__1(
											pinned_center, 
											radius, 
											unsafe_colors, 
											colorPosZero, 
											count, 
											mode, 
											pinned_matrix
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, sk_shader_new_radial_gradient__2, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKShaderTileMode__SkiaSharp__SKShaderTileMode__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_radial_gradient")]
		public static global::System.IntPtr sk_shader_new_radial_gradient__2(
					ref global::SkiaSharp.SKPoint__SkiaSharp center, 
					float radius, 
					global::SkiaSharp.SKColor__SkiaSharp[] colors, 
					global::System.IntPtr colorPosZero, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					global::System.IntPtr matrixZero)
		{
			// Setup
			global::SkiaSharp.SKColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKColor__SkiaSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_center = &(center))
				{
					if (colors == null)
						unsafe_colors = null;
					else
					{
						if (colors != null)
							unsafe_colors = (global::SkiaSharp.SKColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKColor__SkiaSharp))));
						if (colors != null)
							for (uint mcgIdx = 0; (mcgIdx < colors.Length); mcgIdx++)
							{
								// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp colors
								unsafe_colors[mcgIdx] = colors[mcgIdx];
							}
					}
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_radial_gradient__2(
										pinned_center, 
										radius, 
										unsafe_colors, 
										colorPosZero, 
										count, 
										mode, 
										matrixZero
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, sk_shader_new_sweep_gradient__1, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_sweep_gradient")]
		public static global::System.IntPtr sk_shader_new_sweep_gradient__1(
					ref global::SkiaSharp.SKPoint__SkiaSharp center, 
					global::SkiaSharp.SKColor__SkiaSharp[] colors, 
					global::System.IntPtr colorPosZero, 
					int count, 
					global::System.IntPtr matrixZero)
		{
			// Setup
			global::SkiaSharp.SKColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKColor__SkiaSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_center = &(center))
				{
					if (colors == null)
						unsafe_colors = null;
					else
					{
						if (colors != null)
							unsafe_colors = (global::SkiaSharp.SKColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKColor__SkiaSharp))));
						if (colors != null)
							for (uint mcgIdx = 0; (mcgIdx < colors.Length); mcgIdx++)
							{
								// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp colors
								unsafe_colors[mcgIdx] = colors[mcgIdx];
							}
					}
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_sweep_gradient__1(
										pinned_center, 
										unsafe_colors, 
										colorPosZero, 
										count, 
										matrixZero
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, sk_shader_new_sweep_gradient__2, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_sweep_gradient")]
		public static global::System.IntPtr sk_shader_new_sweep_gradient__2(
					ref global::SkiaSharp.SKPoint__SkiaSharp center, 
					global::SkiaSharp.SKColor__SkiaSharp[] colors, 
					global::System.IntPtr colorPosZero, 
					int count, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrixZero)
		{
			// Setup
			global::SkiaSharp.SKColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKColor__SkiaSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_center = &(center))
				{
					if (colors == null)
						unsafe_colors = null;
					else
					{
						if (colors != null)
							unsafe_colors = (global::SkiaSharp.SKColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKColor__SkiaSharp))));
						if (colors != null)
							for (uint mcgIdx = 0; (mcgIdx < colors.Length); mcgIdx++)
							{
								// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp colors
								unsafe_colors[mcgIdx] = colors[mcgIdx];
							}
					}
					fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrixZero = &(matrixZero))
					{
						// Call to native method
						unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_sweep_gradient__2(
											pinned_center, 
											unsafe_colors, 
											colorPosZero, 
											count, 
											pinned_matrixZero
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, sk_shader_new_two_point_conical_gradient__1, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKShaderTileMode__SkiaSharp__SKShaderTileMode__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_two_point_conical_gradient")]
		public static global::System.IntPtr sk_shader_new_two_point_conical_gradient__1(
					ref global::SkiaSharp.SKPoint__SkiaSharp start, 
					float startRadius, 
					ref global::SkiaSharp.SKPoint__SkiaSharp end, 
					float endRadius, 
					global::SkiaSharp.SKColor__SkiaSharp[] colors, 
					global::System.IntPtr colorPosZero, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix)
		{
			// Setup
			global::SkiaSharp.SKColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKColor__SkiaSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_start = &(start))
					fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_end = &(end))
					{
						if (colors == null)
							unsafe_colors = null;
						else
						{
							if (colors != null)
								unsafe_colors = (global::SkiaSharp.SKColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKColor__SkiaSharp))));
							if (colors != null)
								for (uint mcgIdx = 0; (mcgIdx < colors.Length); mcgIdx++)
								{
									// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp colors
									unsafe_colors[mcgIdx] = colors[mcgIdx];
								}
						}
						fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
						{
							// Call to native method
							unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_two_point_conical_gradient__1(
												pinned_start, 
												startRadius, 
												pinned_end, 
												endRadius, 
												unsafe_colors, 
												colorPosZero, 
												count, 
												mode, 
												pinned_matrix
											);
							global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						}
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, sk_shader_new_two_point_conical_gradient__2, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKShaderTileMode__SkiaSharp__SKShaderTileMode__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_two_point_conical_gradient")]
		public static global::System.IntPtr sk_shader_new_two_point_conical_gradient__2(
					ref global::SkiaSharp.SKPoint__SkiaSharp start, 
					float startRadius, 
					ref global::SkiaSharp.SKPoint__SkiaSharp end, 
					float endRadius, 
					global::SkiaSharp.SKColor__SkiaSharp[] colors, 
					global::System.IntPtr colorPosZero, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					global::System.IntPtr matrixZero)
		{
			// Setup
			global::SkiaSharp.SKColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKColor__SkiaSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_start = &(start))
					fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_end = &(end))
					{
						if (colors == null)
							unsafe_colors = null;
						else
						{
							if (colors != null)
								unsafe_colors = (global::SkiaSharp.SKColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKColor__SkiaSharp))));
							if (colors != null)
								for (uint mcgIdx = 0; (mcgIdx < colors.Length); mcgIdx++)
								{
									// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp colors
									unsafe_colors[mcgIdx] = colors[mcgIdx];
								}
						}
						// Call to native method
						unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_two_point_conical_gradient__2(
											pinned_start, 
											startRadius, 
											pinned_end, 
											endRadius, 
											unsafe_colors, 
											colorPosZero, 
											count, 
											mode, 
											matrixZero
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, sk_shader_new_perlin_noise_fractal_noise, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_perlin_noise_fractal_noise")]
		public static global::System.IntPtr sk_shader_new_perlin_noise_fractal_noise(
					float baseFrequencyX, 
					float baseFrequencyY, 
					int numOctaves, 
					float seed, 
					global::System.IntPtr tileSizeZero)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_perlin_noise_fractal_noise(
								baseFrequencyX, 
								baseFrequencyY, 
								numOctaves, 
								seed, 
								tileSizeZero
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_shader_new_perlin_noise_fractal_noise__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPointI__SkiaSharp__SkiaSharp__SKPointI__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_perlin_noise_fractal_noise")]
		public static global::System.IntPtr sk_shader_new_perlin_noise_fractal_noise__0(
					float baseFrequencyX, 
					float baseFrequencyY, 
					int numOctaves, 
					float seed, 
					ref global::SkiaSharp.SKPointI__SkiaSharp tileSize)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKPointI__SkiaSharp* pinned_tileSize = &(tileSize))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_perlin_noise_fractal_noise__0(
									baseFrequencyX, 
									baseFrequencyY, 
									numOctaves, 
									seed, 
									pinned_tileSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_shader_new_perlin_noise_turbulence, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_perlin_noise_turbulence")]
		public static global::System.IntPtr sk_shader_new_perlin_noise_turbulence(
					float baseFrequencyX, 
					float baseFrequencyY, 
					int numOctaves, 
					float seed, 
					global::System.IntPtr tileSizeZero)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_perlin_noise_turbulence(
								baseFrequencyX, 
								baseFrequencyY, 
								numOctaves, 
								seed, 
								tileSizeZero
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_shader_new_perlin_noise_turbulence__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPointI__SkiaSharp__SkiaSharp__SKPointI__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_perlin_noise_turbulence")]
		public static global::System.IntPtr sk_shader_new_perlin_noise_turbulence__0(
					float baseFrequencyX, 
					float baseFrequencyY, 
					int numOctaves, 
					float seed, 
					ref global::SkiaSharp.SKPointI__SkiaSharp tileSize)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKPointI__SkiaSharp* pinned_tileSize = &(tileSize))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_perlin_noise_turbulence__0(
									baseFrequencyX, 
									baseFrequencyY, 
									numOctaves, 
									seed, 
									pinned_tileSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_shader_new_compose, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_compose")]
		public static global::System.IntPtr sk_shader_new_compose(
					global::System.IntPtr shaderA, 
					global::System.IntPtr shaderB)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_compose(
								shaderA, 
								shaderB
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_shader_new_compose_with_mode, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKBlendMode__SkiaSharp__SKBlendMode__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_shader_new_compose_with_mode")]
		public static global::System.IntPtr sk_shader_new_compose_with_mode(
					global::System.IntPtr shaderA, 
					global::System.IntPtr shaderB, 
					global::SkiaSharp.SKBlendMode__SkiaSharp mode)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_shader_new_compose_with_mode(
								shaderA, 
								shaderB, 
								mode
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_typeface_create_from_name, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040008] string__unsigned char *, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKTypefaceStyle__SkiaSharp__SKTypefaceStyle__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_typeface_create_from_name")]
		public static global::System.IntPtr sk_typeface_create_from_name(
					string str, 
					global::SkiaSharp.SKTypefaceStyle__SkiaSharp style)
		{
			// Setup
			byte* unsafe_str = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_str = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(str, true, false);
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_typeface_create_from_name(
									unsafe_str, 
									style
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_str);
			}
		}

		// Signature, sk_typeface_create_from_name_with_font_style, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040008] string__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKFontStyleSlant__SkiaSharp__SKFontStyleSlant__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_typeface_create_from_name_with_font_style")]
		public static global::System.IntPtr sk_typeface_create_from_name_with_font_style(
					string familyName, 
					int weight, 
					int width, 
					global::SkiaSharp.SKFontStyleSlant__SkiaSharp slant)
		{
			// Setup
			byte* unsafe_familyName = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_familyName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(familyName, true, false);
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_typeface_create_from_name_with_font_style(
									unsafe_familyName, 
									weight, 
									width, 
									slant
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_familyName);
			}
		}

		// Signature, sk_typeface_create_from_typeface, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKTypefaceStyle__SkiaSharp__SKTypefaceStyle__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_typeface_create_from_typeface")]
		public static global::System.IntPtr sk_typeface_create_from_typeface(
					global::System.IntPtr typeface, 
					global::SkiaSharp.SKTypefaceStyle__SkiaSharp style)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_typeface_create_from_typeface(
								typeface, 
								style
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_typeface_create_from_file, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040008] string__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_typeface_create_from_file")]
		public static global::System.IntPtr sk_typeface_create_from_file(
					string path, 
					int index)
		{
			// Setup
			byte* unsafe_path = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_path = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(path, true, false);
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_typeface_create_from_file(
									unsafe_path, 
									index
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_path);
			}
		}

		// Signature, sk_typeface_create_from_stream, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_typeface_create_from_stream")]
		public static global::System.IntPtr sk_typeface_create_from_stream(
					global::System.IntPtr stream, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_typeface_create_from_stream(
								stream, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_typeface_unref, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_typeface_unref")]
		public static void sk_typeface_unref(global::System.IntPtr t)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_typeface_unref(t);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_typeface_chars_to_glyphs, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKEncoding__SkiaSharp__SKEncoding__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_typeface_chars_to_glyphs")]
		public static int sk_typeface_chars_to_glyphs(
					global::System.IntPtr t, 
					global::System.IntPtr chars, 
					global::SkiaSharp.SKEncoding__SkiaSharp encoding, 
					global::System.IntPtr glyphPtr, 
					int glyphCount)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_typeface_chars_to_glyphs(
								t, 
								chars, 
								encoding, 
								glyphPtr, 
								glyphCount
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_typeface_get_family_name, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_typeface_get_family_name")]
		public static global::System.IntPtr sk_typeface_get_family_name(global::System.IntPtr typeface)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_typeface_get_family_name(typeface);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_typeface_count_tables, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_typeface_count_tables")]
		public static int sk_typeface_count_tables(global::System.IntPtr typeface)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_typeface_count_tables(typeface);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_typeface_get_table_tags, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_uint__unsigned int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_typeface_get_table_tags")]
		public static int sk_typeface_get_table_tags(
					global::System.IntPtr typeface, 
					uint[] tags)
		{
			// Setup
			uint* unsafe_tags;
			int unsafe___value;
			// Marshalling
			fixed (uint* pinned_tags = ((tags != null 
						&& tags.Length == 0) ? new uint[1] : tags))
			{
				unsafe_tags = (uint*)pinned_tags;
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_typeface_get_table_tags(
									typeface, 
									unsafe_tags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_typeface_get_table_size, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_typeface_get_table_size")]
		public static global::System.IntPtr sk_typeface_get_table_size(
					global::System.IntPtr typeface, 
					uint tag)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_typeface_get_table_size(
								typeface, 
								tag
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_typeface_get_table_data, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_typeface_get_table_data")]
		public static global::System.IntPtr sk_typeface_get_table_data(
					global::System.IntPtr typeface, 
					uint tag, 
					global::System.IntPtr offset, 
					global::System.IntPtr length, 
					byte[] data)
		{
			// Setup
			byte* unsafe_data;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_data = ((data != null 
						&& data.Length == 0) ? new byte[1] : data))
			{
				unsafe_data = (byte*)pinned_data;
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_typeface_get_table_data(
									typeface, 
									tag, 
									offset, 
									length, 
									unsafe_data
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_typeface_get_font_weight, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_typeface_get_font_weight")]
		public static int sk_typeface_get_font_weight(global::System.IntPtr typeface)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_typeface_get_font_weight(typeface);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_typeface_get_font_width, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_typeface_get_font_width")]
		public static int sk_typeface_get_font_width(global::System.IntPtr typeface)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_typeface_get_font_width(typeface);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_typeface_get_font_slant, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKFontStyleSlant__SkiaSharp__SKFontStyleSlant__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_typeface_get_font_slant")]
		public static global::SkiaSharp.SKFontStyleSlant__SkiaSharp sk_typeface_get_font_slant(global::System.IntPtr typeface)
		{
			// Setup
			global::SkiaSharp.SKFontStyleSlant__SkiaSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_typeface_get_font_slant(typeface);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_typeface_get_style, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKTypefaceStyle__SkiaSharp__SKTypefaceStyle__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_typeface_get_style")]
		public static global::SkiaSharp.SKTypefaceStyle__SkiaSharp sk_typeface_get_style(global::System.IntPtr typeface)
		{
			// Setup
			global::SkiaSharp.SKTypefaceStyle__SkiaSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_typeface_get_style(typeface);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_typeface_open_stream, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_typeface_open_stream")]
		public static global::System.IntPtr sk_typeface_open_stream(
					global::System.IntPtr typeface, 
					out int ttcIndex)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (int* pinned_ttcIndex = &(ttcIndex))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_typeface_open_stream(
									typeface, 
									pinned_ttcIndex
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_typeface_get_units_per_em, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_typeface_get_units_per_em")]
		public static int sk_typeface_get_units_per_em(global::System.IntPtr typeface)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_typeface_get_units_per_em(typeface);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_fontmgr_ref_default, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_fontmgr_ref_default")]
		public static global::System.IntPtr sk_fontmgr_ref_default()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_fontmgr_ref_default();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_fontmgr_unref, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_fontmgr_unref")]
		public static void sk_fontmgr_unref(global::System.IntPtr fontmgr)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_fontmgr_unref(fontmgr);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_fontmgr_count_families, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_fontmgr_count_families")]
		public static int sk_fontmgr_count_families(global::System.IntPtr fontmgr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_fontmgr_count_families(fontmgr);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_fontmgr_get_family_name, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_fontmgr_get_family_name")]
		public static void sk_fontmgr_get_family_name(
					global::System.IntPtr fontmgr, 
					int index, 
					global::System.IntPtr familyName)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_fontmgr_get_family_name(
								fontmgr, 
								index, 
								familyName
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_fontmgr_match_family_style_character, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040008] string__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKFontStyleSlant__SkiaSharp__SKFontStyleSlant__SkiaSharp, [fwd] [in] [EETypeRva:0x00040944] rg_string__unsigned char * *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_fontmgr_match_family_style_character")]
		public static global::System.IntPtr sk_fontmgr_match_family_style_character(
					global::System.IntPtr fontmgr, 
					string familyName, 
					int weight, 
					int width, 
					global::SkiaSharp.SKFontStyleSlant__SkiaSharp slant, 
					string[] bcp47, 
					int bcp47Count, 
					int character)
		{
			// Setup
			byte* unsafe_familyName = default(byte*);
			byte** unsafe_bcp47 = default(byte**);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_familyName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(familyName, true, false);
				if (bcp47 == null)
					unsafe_bcp47 = null;
				else
				{
					if (bcp47 != null)
						unsafe_bcp47 = (byte**)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(bcp47.Length * sizeof(byte*))));
					if (bcp47 != null)
						for (uint mcgIdx = 0; (mcgIdx < bcp47.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x00040008] string__unsigned char * bcp47
							unsafe_bcp47[mcgIdx] = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(bcp47[mcgIdx], true, false);
						}
				}
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_fontmgr_match_family_style_character(
									fontmgr, 
									unsafe_familyName, 
									weight, 
									width, 
									slant, 
									unsafe_bcp47, 
									bcp47Count, 
									character
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_familyName);
				if (unsafe_bcp47 != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < bcp47.Length); mcgIdx_1++)
					{
						// [fwd] [in] [out] [optional] [EETypeRva:0x00040008] string__unsigned char * bcp47
						global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_bcp47[mcgIdx_1]);
					}
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_bcp47);
			}
		}

		// Signature, sk_memorystream_destroy, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_memorystream_destroy")]
		public static void sk_memorystream_destroy(global::System.IntPtr stream)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_memorystream_destroy(stream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_filestream_destroy, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_filestream_destroy")]
		public static void sk_filestream_destroy(global::System.IntPtr stream)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_filestream_destroy(stream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_stream_asset_destroy, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_stream_asset_destroy")]
		public static void sk_stream_asset_destroy(global::System.IntPtr stream)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_stream_asset_destroy(stream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_stream_read, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_stream_read")]
		public static global::System.IntPtr sk_stream_read(
					global::System.IntPtr stream, 
					global::System.IntPtr buffer, 
					global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_stream_read(
								stream, 
								buffer, 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_stream_skip, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_stream_skip")]
		public static global::System.IntPtr sk_stream_skip(
					global::System.IntPtr stream, 
					global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_stream_skip(
								stream, 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_stream_is_at_end, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_stream_is_at_end")]
		public static bool sk_stream_is_at_end(global::System.IntPtr stream)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_stream_is_at_end(stream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_stream_read_s8, [fwd] [return] [EETypeRva:0x000413DC] sbyte__char, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_stream_read_s8")]
		public static sbyte sk_stream_read_s8(global::System.IntPtr stream)
		{
			// Setup
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_stream_read_s8(stream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_stream_read_s16, [fwd] [return] [EETypeRva:0x000413DC] short__short, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_stream_read_s16")]
		public static short sk_stream_read_s16(global::System.IntPtr stream)
		{
			// Setup
			short unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_stream_read_s16(stream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_stream_read_s32, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_stream_read_s32")]
		public static int sk_stream_read_s32(global::System.IntPtr stream)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_stream_read_s32(stream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_stream_read_u8, [fwd] [return] [EETypeRva:0x000413DC] byte__unsigned char, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_stream_read_u8")]
		public static byte sk_stream_read_u8(global::System.IntPtr stream)
		{
			// Setup
			byte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_stream_read_u8(stream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_stream_read_u16, [fwd] [return] [EETypeRva:0x000413DC] ushort__unsigned short, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_stream_read_u16")]
		public static ushort sk_stream_read_u16(global::System.IntPtr stream)
		{
			// Setup
			ushort unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_stream_read_u16(stream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_stream_read_u32, [fwd] [return] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_stream_read_u32")]
		public static uint sk_stream_read_u32(global::System.IntPtr stream)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_stream_read_u32(stream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_stream_read_bool, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_stream_read_bool")]
		public static bool sk_stream_read_bool(global::System.IntPtr stream)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_stream_read_bool(stream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_stream_rewind, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_stream_rewind")]
		public static bool sk_stream_rewind(global::System.IntPtr stream)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_stream_rewind(stream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_stream_has_position, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_stream_has_position")]
		public static bool sk_stream_has_position(global::System.IntPtr stream)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_stream_has_position(stream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_stream_get_position, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_stream_get_position")]
		public static global::System.IntPtr sk_stream_get_position(global::System.IntPtr stream)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_stream_get_position(stream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_stream_seek, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_stream_seek")]
		public static bool sk_stream_seek(
					global::System.IntPtr stream, 
					global::System.IntPtr position)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_stream_seek(
								stream, 
								position
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_stream_move, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] long____int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_stream_move")]
		public static bool sk_stream_move(
					global::System.IntPtr stream, 
					long offset)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_stream_move(
								stream, 
								offset
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_stream_has_length, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_stream_has_length")]
		public static bool sk_stream_has_length(global::System.IntPtr stream)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_stream_has_length(stream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_stream_get_length, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_stream_get_length")]
		public static global::System.IntPtr sk_stream_get_length(global::System.IntPtr stream)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_stream_get_length(stream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_stream_get_memory_base, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_stream_get_memory_base")]
		public static global::System.IntPtr sk_stream_get_memory_base(global::System.IntPtr cstream)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_stream_get_memory_base(cstream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_filestream_new, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040008] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_filestream_new")]
		public static global::System.IntPtr sk_filestream_new(string path)
		{
			// Setup
			byte* unsafe_path = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_path = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(path, true, false);
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_filestream_new(unsafe_path);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_path);
			}
		}

		// Signature, sk_memorystream_new, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_memorystream_new")]
		public static global::System.IntPtr sk_memorystream_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_memorystream_new();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_memorystream_new_with_length, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_memorystream_new_with_length")]
		public static global::System.IntPtr sk_memorystream_new_with_length(global::System.IntPtr length)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_memorystream_new_with_length(length);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_memorystream_new_with_data, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_memorystream_new_with_data")]
		public static global::System.IntPtr sk_memorystream_new_with_data(
					global::System.IntPtr data, 
					global::System.IntPtr length, 
					bool copyData)
		{
			// Setup
			sbyte unsafe_copyData;
			global::System.IntPtr unsafe___value;
			// Marshalling
			unsafe_copyData = (copyData ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_memorystream_new_with_data(
								data, 
								length, 
								unsafe_copyData
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_memorystream_new_with_data__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_memorystream_new_with_data")]
		public static global::System.IntPtr sk_memorystream_new_with_data__0(
					byte[] data, 
					global::System.IntPtr length, 
					bool copyData)
		{
			// Setup
			byte* unsafe_data;
			sbyte unsafe_copyData;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_data = ((data != null 
						&& data.Length == 0) ? new byte[1] : data))
			{
				unsafe_data = (byte*)pinned_data;
				unsafe_copyData = (copyData ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_memorystream_new_with_data__0(
									unsafe_data, 
									length, 
									unsafe_copyData
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_memorystream_new_with_skdata, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_memorystream_new_with_skdata")]
		public static global::System.IntPtr sk_memorystream_new_with_skdata(global::System.IntPtr data)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_memorystream_new_with_skdata(data);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_memorystream_set_memory, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_memorystream_set_memory")]
		public static void sk_memorystream_set_memory(
					global::System.IntPtr s, 
					global::System.IntPtr data, 
					global::System.IntPtr length, 
					bool copyData)
		{
			// Setup
			sbyte unsafe_copyData;
			// Marshalling
			unsafe_copyData = (copyData ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_memorystream_set_memory(
								s, 
								data, 
								length, 
								unsafe_copyData
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_memorystream_set_memory__0, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_memorystream_set_memory")]
		public static void sk_memorystream_set_memory__0(
					global::System.IntPtr s, 
					byte[] data, 
					global::System.IntPtr length, 
					bool copyData)
		{
			// Setup
			byte* unsafe_data;
			sbyte unsafe_copyData;
			// Marshalling
			fixed (byte* pinned_data = ((data != null 
						&& data.Length == 0) ? new byte[1] : data))
			{
				unsafe_data = (byte*)pinned_data;
				unsafe_copyData = (copyData ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_memorystream_set_memory__0(
									s, 
									unsafe_data, 
									length, 
									unsafe_copyData
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_managedstream_new, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_managedstream_new")]
		public static global::System.IntPtr sk_managedstream_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_managedstream_new();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_managedstream_set_delegates, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_managedstream_set_delegates")]
		public static void sk_managedstream_set_delegates(
					global::System.IntPtr pRead, 
					global::System.IntPtr pPeek, 
					global::System.IntPtr pIsAtEnd, 
					global::System.IntPtr pRewind, 
					global::System.IntPtr pGetPosition, 
					global::System.IntPtr pSeek, 
					global::System.IntPtr pMove, 
					global::System.IntPtr pGetLength, 
					global::System.IntPtr pCreateNew, 
					global::System.IntPtr pDestroy)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_managedstream_set_delegates(
								pRead, 
								pPeek, 
								pIsAtEnd, 
								pRewind, 
								pGetPosition, 
								pSeek, 
								pMove, 
								pGetLength, 
								pCreateNew, 
								pDestroy
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_managedstream_destroy, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_managedstream_destroy")]
		public static void sk_managedstream_destroy(global::System.IntPtr stream)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_managedstream_destroy(stream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_managedwstream_new, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_managedwstream_new")]
		public static global::System.IntPtr sk_managedwstream_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_managedwstream_new();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_managedwstream_destroy, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_managedwstream_destroy")]
		public static void sk_managedwstream_destroy(global::System.IntPtr stream)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_managedwstream_destroy(stream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_managedwstream_set_delegates, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_managedwstream_set_delegates")]
		public static void sk_managedwstream_set_delegates(
					global::System.IntPtr pWrite, 
					global::System.IntPtr pFlush, 
					global::System.IntPtr pBytesWritten, 
					global::System.IntPtr pDestroy)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_managedwstream_set_delegates(
								pWrite, 
								pFlush, 
								pBytesWritten, 
								pDestroy
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_filewstream_destroy, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_filewstream_destroy")]
		public static void sk_filewstream_destroy(global::System.IntPtr cstream)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_filewstream_destroy(cstream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_dynamicmemorywstream_destroy, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_dynamicmemorywstream_destroy")]
		public static void sk_dynamicmemorywstream_destroy(global::System.IntPtr cstream)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_dynamicmemorywstream_destroy(cstream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_filewstream_new, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040008] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_filewstream_new")]
		public static global::System.IntPtr sk_filewstream_new(string path)
		{
			// Setup
			byte* unsafe_path = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_path = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(path, true, false);
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_filewstream_new(unsafe_path);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_path);
			}
		}

		// Signature, sk_dynamicmemorywstream_new, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_dynamicmemorywstream_new")]
		public static global::System.IntPtr sk_dynamicmemorywstream_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_dynamicmemorywstream_new();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_dynamicmemorywstream_detach_as_stream, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_dynamicmemorywstream_detach_as_stream")]
		public static global::System.IntPtr sk_dynamicmemorywstream_detach_as_stream(global::System.IntPtr cstream)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_dynamicmemorywstream_detach_as_stream(cstream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_dynamicmemorywstream_detach_as_data, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_dynamicmemorywstream_detach_as_data")]
		public static global::System.IntPtr sk_dynamicmemorywstream_detach_as_data(global::System.IntPtr cstream)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_dynamicmemorywstream_detach_as_data(cstream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_dynamicmemorywstream_copy_to, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_dynamicmemorywstream_copy_to")]
		public static void sk_dynamicmemorywstream_copy_to(
					global::System.IntPtr cstream, 
					global::System.IntPtr data)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_dynamicmemorywstream_copy_to(
								cstream, 
								data
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_dynamicmemorywstream_write_to_stream, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_dynamicmemorywstream_write_to_stream")]
		public static void sk_dynamicmemorywstream_write_to_stream(
					global::System.IntPtr cstream, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_dynamicmemorywstream_write_to_stream(
								cstream, 
								dst
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_wstream_write, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_wstream_write")]
		public static bool sk_wstream_write(
					global::System.IntPtr cstream, 
					global::System.IntPtr buffer, 
					global::System.IntPtr size)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_wstream_write(
								cstream, 
								buffer, 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_wstream_write__0, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_wstream_write")]
		public static bool sk_wstream_write__0(
					global::System.IntPtr cstream, 
					byte[] buffer, 
					global::System.IntPtr size)
		{
			// Setup
			byte* unsafe_buffer;
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (byte* pinned_buffer = ((buffer != null 
						&& buffer.Length == 0) ? new byte[1] : buffer))
			{
				unsafe_buffer = (byte*)pinned_buffer;
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_wstream_write__0(
									cstream, 
									unsafe_buffer, 
									size
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_wstream_newline, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_wstream_newline")]
		public static bool sk_wstream_newline(global::System.IntPtr cstream)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_wstream_newline(cstream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_wstream_flush, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_wstream_flush")]
		public static void sk_wstream_flush(global::System.IntPtr cstream)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_wstream_flush(cstream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_wstream_bytes_written, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_wstream_bytes_written")]
		public static global::System.IntPtr sk_wstream_bytes_written(global::System.IntPtr cstream)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_wstream_bytes_written(cstream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_wstream_write_8, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] byte__unsigned char, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_wstream_write_8")]
		public static bool sk_wstream_write_8(
					global::System.IntPtr cstream, 
					byte value)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_wstream_write_8(
								cstream, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_wstream_write_16, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_wstream_write_16")]
		public static bool sk_wstream_write_16(
					global::System.IntPtr cstream, 
					ushort value)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_wstream_write_16(
								cstream, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_wstream_write_32, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_wstream_write_32")]
		public static bool sk_wstream_write_32(
					global::System.IntPtr cstream, 
					uint value)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_wstream_write_32(
								cstream, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_wstream_write_text, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040008] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_wstream_write_text")]
		public static bool sk_wstream_write_text(
					global::System.IntPtr cstream, 
					string value)
		{
			// Setup
			byte* unsafe_value = default(byte*);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_value = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(value, true, false);
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_wstream_write_text(
									cstream, 
									unsafe_value
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_value);
			}
		}

		// Signature, sk_wstream_write_dec_as_text, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_wstream_write_dec_as_text")]
		public static bool sk_wstream_write_dec_as_text(
					global::System.IntPtr cstream, 
					int value)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_wstream_write_dec_as_text(
								cstream, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_wstream_write_bigdec_as_text, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] long____int64, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_wstream_write_bigdec_as_text")]
		public static bool sk_wstream_write_bigdec_as_text(
					global::System.IntPtr cstream, 
					long value, 
					int minDigits)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_wstream_write_bigdec_as_text(
								cstream, 
								value, 
								minDigits
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_wstream_write_hex_as_text, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_wstream_write_hex_as_text")]
		public static bool sk_wstream_write_hex_as_text(
					global::System.IntPtr cstream, 
					uint value, 
					int minDigits)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_wstream_write_hex_as_text(
								cstream, 
								value, 
								minDigits
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_wstream_write_scalar_as_text, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_wstream_write_scalar_as_text")]
		public static bool sk_wstream_write_scalar_as_text(
					global::System.IntPtr cstream, 
					float value)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_wstream_write_scalar_as_text(
								cstream, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_wstream_write_bool, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_wstream_write_bool")]
		public static bool sk_wstream_write_bool(
					global::System.IntPtr cstream, 
					bool value)
		{
			// Setup
			sbyte unsafe_value;
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			unsafe_value = (value ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_wstream_write_bool(
								cstream, 
								unsafe_value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_wstream_write_scalar, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_wstream_write_scalar")]
		public static bool sk_wstream_write_scalar(
					global::System.IntPtr cstream, 
					float value)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_wstream_write_scalar(
								cstream, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_wstream_write_packed_uint, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_wstream_write_packed_uint")]
		public static bool sk_wstream_write_packed_uint(
					global::System.IntPtr cstream, 
					global::System.IntPtr value)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_wstream_write_packed_uint(
								cstream, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_wstream_write_stream, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_wstream_write_stream")]
		public static bool sk_wstream_write_stream(
					global::System.IntPtr cstream, 
					global::System.IntPtr input, 
					global::System.IntPtr length)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_wstream_write_stream(
								cstream, 
								input, 
								length
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_wstream_get_size_of_packed_uint, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_wstream_get_size_of_packed_uint")]
		public static int sk_wstream_get_size_of_packed_uint(global::System.IntPtr value)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_wstream_get_size_of_packed_uint(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_document_unref, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_document_unref")]
		public static void sk_document_unref(global::System.IntPtr document)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_document_unref(document);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_document_create_pdf_from_stream, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_document_create_pdf_from_stream")]
		public static global::System.IntPtr sk_document_create_pdf_from_stream(
					global::System.IntPtr stream, 
					float dpi)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_document_create_pdf_from_stream(
								stream, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_document_create_pdf_from_stream_with_metadata, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKDocumentPdfMetadataInternal__SkiaSharp__SkiaSharp__SKDocumentPdfMetadataInternal__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_document_create_pdf_from_stream_with_metadata")]
		public static global::System.IntPtr sk_document_create_pdf_from_stream_with_metadata(
					global::System.IntPtr stream, 
					float dpi, 
					ref global::SkiaSharp.SKDocumentPdfMetadataInternal__SkiaSharp metadata)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKDocumentPdfMetadataInternal__SkiaSharp* pinned_metadata = &(metadata))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_document_create_pdf_from_stream_with_metadata(
									stream, 
									dpi, 
									pinned_metadata
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_document_create_pdf_from_filename, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040008] string__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_document_create_pdf_from_filename")]
		public static global::System.IntPtr sk_document_create_pdf_from_filename(
					string path, 
					float dpi)
		{
			// Setup
			byte* unsafe_path = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_path = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(path, true, false);
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_document_create_pdf_from_filename(
									unsafe_path, 
									dpi
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_path);
			}
		}

		// Signature, sk_document_create_xps_from_stream, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_document_create_xps_from_stream")]
		public static global::System.IntPtr sk_document_create_xps_from_stream(
					global::System.IntPtr stream, 
					float dpi)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_document_create_xps_from_stream(
								stream, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_document_begin_page, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_document_begin_page")]
		public static global::System.IntPtr sk_document_begin_page(
					global::System.IntPtr document, 
					float width, 
					float height, 
					ref global::SkiaSharp.SKRect__SkiaSharp content)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_content = &(content))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_document_begin_page(
									document, 
									width, 
									height, 
									pinned_content
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_document_begin_page__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_document_begin_page")]
		public static global::System.IntPtr sk_document_begin_page__0(
					global::System.IntPtr document, 
					float width, 
					float height, 
					global::System.IntPtr content)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_document_begin_page__0(
								document, 
								width, 
								height, 
								content
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_document_end_page, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_document_end_page")]
		public static void sk_document_end_page(global::System.IntPtr document)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_document_end_page(document);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_document_close, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_document_close")]
		public static void sk_document_close(global::System.IntPtr document)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_document_close(document);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_document_abort, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_document_abort")]
		public static void sk_document_abort(global::System.IntPtr document)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_document_abort(document);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_codec_min_buffered_bytes_needed, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_min_buffered_bytes_needed")]
		public static global::System.IntPtr sk_codec_min_buffered_bytes_needed()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_min_buffered_bytes_needed();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_codec_new_from_stream, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_new_from_stream")]
		public static global::System.IntPtr sk_codec_new_from_stream(global::System.IntPtr stream)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_new_from_stream(stream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_codec_new_from_data, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_new_from_data")]
		public static global::System.IntPtr sk_codec_new_from_data(global::System.IntPtr data)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_new_from_data(data);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_codec_destroy, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_destroy")]
		public static void sk_codec_destroy(global::System.IntPtr codec)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_destroy(codec);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_codec_get_info, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_get_info")]
		public static void sk_codec_get_info(
					global::System.IntPtr codec, 
					out global::SkiaSharp.SKImageInfoNative__SkiaSharp info)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_info = &(info))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_get_info(
									codec, 
									pinned_info
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_codec_get_encodedinfo, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKEncodedInfo__SkiaSharp__SkiaSharp__SKEncodedInfo__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_get_encodedinfo")]
		public static void sk_codec_get_encodedinfo(
					global::System.IntPtr codec, 
					out global::SkiaSharp.SKEncodedInfo__SkiaSharp info)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKEncodedInfo__SkiaSharp* pinned_info = &(info))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_get_encodedinfo(
									codec, 
									pinned_info
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_codec_get_origin, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKCodecOrigin__SkiaSharp__SKCodecOrigin__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_get_origin")]
		public static global::SkiaSharp.SKCodecOrigin__SkiaSharp sk_codec_get_origin(global::System.IntPtr codec)
		{
			// Setup
			global::SkiaSharp.SKCodecOrigin__SkiaSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_get_origin(codec);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_codec_get_scaled_dimensions, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKSizeI__SkiaSharp__SkiaSharp__SKSizeI__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_get_scaled_dimensions")]
		public static void sk_codec_get_scaled_dimensions(
					global::System.IntPtr codec, 
					float desiredScale, 
					out global::SkiaSharp.SKSizeI__SkiaSharp dimensions)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKSizeI__SkiaSharp* pinned_dimensions = &(dimensions))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_get_scaled_dimensions(
									codec, 
									desiredScale, 
									pinned_dimensions
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_codec_get_valid_subset, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRectI__SkiaSharp__SkiaSharp__SKRectI__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_get_valid_subset")]
		public static bool sk_codec_get_valid_subset(
					global::System.IntPtr codec, 
					ref global::SkiaSharp.SKRectI__SkiaSharp desiredSubset)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRectI__SkiaSharp* pinned_desiredSubset = &(desiredSubset))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_get_valid_subset(
									codec, 
									pinned_desiredSubset
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_codec_get_encoded_format, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKEncodedImageFormat__SkiaSharp__SKEncodedImageFormat__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_get_encoded_format")]
		public static global::SkiaSharp.SKEncodedImageFormat__SkiaSharp sk_codec_get_encoded_format(global::System.IntPtr codec)
		{
			// Setup
			global::SkiaSharp.SKEncodedImageFormat__SkiaSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_get_encoded_format(codec);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_codec_get_pixels, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKCodecResult__SkiaSharp__SKCodecResult__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKCodecOptionsInternal__SkiaSharp__SkiaSharp__SKCodecOptionsInternal__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_get_pixels")]
		public static global::SkiaSharp.SKCodecResult__SkiaSharp sk_codec_get_pixels(
					global::System.IntPtr codec, 
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp info, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes, 
					ref global::SkiaSharp.SKCodecOptionsInternal__SkiaSharp options, 
					global::System.IntPtr ctable, 
					ref int ctableCount)
		{
			// Setup
			global::SkiaSharp.SKCodecResult__SkiaSharp unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_info = &(info))
				fixed (global::SkiaSharp.SKCodecOptionsInternal__SkiaSharp* pinned_options = &(options))
					fixed (int* pinned_ctableCount = &(ctableCount))
					{
						// Call to native method
						unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_get_pixels(
											codec, 
											pinned_info, 
											pixels, 
											rowBytes, 
											pinned_options, 
											ctable, 
											pinned_ctableCount
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
			// Return
			return unsafe___value;
		}

		// Signature, sk_codec_get_pixels_using_defaults, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKCodecResult__SkiaSharp__SKCodecResult__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_get_pixels_using_defaults")]
		public static global::SkiaSharp.SKCodecResult__SkiaSharp sk_codec_get_pixels_using_defaults(
					global::System.IntPtr codec, 
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp info, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes)
		{
			// Setup
			global::SkiaSharp.SKCodecResult__SkiaSharp unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_info = &(info))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_get_pixels_using_defaults(
									codec, 
									pinned_info, 
									pixels, 
									rowBytes
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_codec_start_incremental_decode, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKCodecResult__SkiaSharp__SKCodecResult__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKCodecOptionsInternal__SkiaSharp__SkiaSharp__SKCodecOptionsInternal__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_start_incremental_decode")]
		public static global::SkiaSharp.SKCodecResult__SkiaSharp sk_codec_start_incremental_decode(
					global::System.IntPtr codec, 
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp info, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes, 
					ref global::SkiaSharp.SKCodecOptionsInternal__SkiaSharp options, 
					global::System.IntPtr ctable, 
					ref int ctableCount)
		{
			// Setup
			global::SkiaSharp.SKCodecResult__SkiaSharp unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_info = &(info))
				fixed (global::SkiaSharp.SKCodecOptionsInternal__SkiaSharp* pinned_options = &(options))
					fixed (int* pinned_ctableCount = &(ctableCount))
					{
						// Call to native method
						unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_start_incremental_decode(
											codec, 
											pinned_info, 
											pixels, 
											rowBytes, 
											pinned_options, 
											ctable, 
											pinned_ctableCount
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
			// Return
			return unsafe___value;
		}

		// Signature, sk_codec_start_incremental_decode__0, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKCodecResult__SkiaSharp__SKCodecResult__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKCodecOptionsInternal__SkiaSharp__SkiaSharp__SKCodecOptionsInternal__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_start_incremental_decode")]
		public static global::SkiaSharp.SKCodecResult__SkiaSharp sk_codec_start_incremental_decode__0(
					global::System.IntPtr codec, 
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp info, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes, 
					ref global::SkiaSharp.SKCodecOptionsInternal__SkiaSharp options, 
					global::System.IntPtr ctableZero, 
					global::System.IntPtr ctableCountZero)
		{
			// Setup
			global::SkiaSharp.SKCodecResult__SkiaSharp unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_info = &(info))
				fixed (global::SkiaSharp.SKCodecOptionsInternal__SkiaSharp* pinned_options = &(options))
				{
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_start_incremental_decode__0(
										codec, 
										pinned_info, 
										pixels, 
										rowBytes, 
										pinned_options, 
										ctableZero, 
										ctableCountZero
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, sk_codec_start_incremental_decode__1, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKCodecResult__SkiaSharp__SKCodecResult__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_start_incremental_decode")]
		public static global::SkiaSharp.SKCodecResult__SkiaSharp sk_codec_start_incremental_decode__1(
					global::System.IntPtr codec, 
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp info, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes, 
					global::System.IntPtr optionsZero, 
					global::System.IntPtr ctableZero, 
					global::System.IntPtr ctableCountZero)
		{
			// Setup
			global::SkiaSharp.SKCodecResult__SkiaSharp unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_info = &(info))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_start_incremental_decode__1(
									codec, 
									pinned_info, 
									pixels, 
									rowBytes, 
									optionsZero, 
									ctableZero, 
									ctableCountZero
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_codec_incremental_decode, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKCodecResult__SkiaSharp__SKCodecResult__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_incremental_decode")]
		public static global::SkiaSharp.SKCodecResult__SkiaSharp sk_codec_incremental_decode(
					global::System.IntPtr codec, 
					out int rowsDecoded)
		{
			// Setup
			global::SkiaSharp.SKCodecResult__SkiaSharp unsafe___value;
			// Marshalling
			fixed (int* pinned_rowsDecoded = &(rowsDecoded))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_incremental_decode(
									codec, 
									pinned_rowsDecoded
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_codec_get_repetition_count, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_get_repetition_count")]
		public static int sk_codec_get_repetition_count(global::System.IntPtr codec)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_get_repetition_count(codec);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_codec_get_frame_count, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_get_frame_count")]
		public static int sk_codec_get_frame_count(global::System.IntPtr codec)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_get_frame_count(codec);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_codec_get_frame_info, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [EETypeRva:0x00040944] rg_SkiaSharp_SKCodecFrameInfo__SkiaSharp__SkiaSharp__SKCodecFrameInfo__SkiaSharp *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_get_frame_info")]
		public static void sk_codec_get_frame_info(
					global::System.IntPtr codec, 
					global::SkiaSharp.SKCodecFrameInfo__SkiaSharp[] frameInfo)
		{
			// Setup
			global::SkiaSharp.SKCodecFrameInfo__SkiaSharp* unsafe_frameInfo = default(global::SkiaSharp.SKCodecFrameInfo__SkiaSharp*);
			try
			{
				// Marshalling
				if (frameInfo != null)
					unsafe_frameInfo = (global::SkiaSharp.SKCodecFrameInfo__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(frameInfo.Length * sizeof(global::SkiaSharp.SKCodecFrameInfo__SkiaSharp))));
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_get_frame_info(
									codec, 
									unsafe_frameInfo
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (frameInfo != null)
					for (uint mcgIdx = 0; (mcgIdx < frameInfo.Length); mcgIdx++)
					{
						// [fwd] [out] [optional] [EETypeRva:0x00041808] SkiaSharp_SKCodecFrameInfo__SkiaSharp__SkiaSharp__SKCodecFrameInfo__SkiaSharp frameInfo
						frameInfo[mcgIdx] = unsafe_frameInfo[mcgIdx];
					}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_frameInfo);
			}
		}

		// Signature, sk_codec_start_scanline_decode, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKCodecResult__SkiaSharp__SKCodecResult__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKCodecOptionsInternal__SkiaSharp__SkiaSharp__SKCodecOptionsInternal__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_start_scanline_decode")]
		public static global::SkiaSharp.SKCodecResult__SkiaSharp sk_codec_start_scanline_decode(
					global::System.IntPtr codec, 
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp info, 
					ref global::SkiaSharp.SKCodecOptionsInternal__SkiaSharp options, 
					global::System.IntPtr ctable, 
					ref int ctableCount)
		{
			// Setup
			global::SkiaSharp.SKCodecResult__SkiaSharp unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_info = &(info))
				fixed (global::SkiaSharp.SKCodecOptionsInternal__SkiaSharp* pinned_options = &(options))
					fixed (int* pinned_ctableCount = &(ctableCount))
					{
						// Call to native method
						unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_start_scanline_decode(
											codec, 
											pinned_info, 
											pinned_options, 
											ctable, 
											pinned_ctableCount
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
			// Return
			return unsafe___value;
		}

		// Signature, sk_codec_start_scanline_decode__0, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKCodecResult__SkiaSharp__SKCodecResult__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKCodecOptionsInternal__SkiaSharp__SkiaSharp__SKCodecOptionsInternal__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_start_scanline_decode")]
		public static global::SkiaSharp.SKCodecResult__SkiaSharp sk_codec_start_scanline_decode__0(
					global::System.IntPtr codec, 
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp info, 
					ref global::SkiaSharp.SKCodecOptionsInternal__SkiaSharp options, 
					global::System.IntPtr ctableZero, 
					global::System.IntPtr ctableCountZero)
		{
			// Setup
			global::SkiaSharp.SKCodecResult__SkiaSharp unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_info = &(info))
				fixed (global::SkiaSharp.SKCodecOptionsInternal__SkiaSharp* pinned_options = &(options))
				{
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_start_scanline_decode__0(
										codec, 
										pinned_info, 
										pinned_options, 
										ctableZero, 
										ctableCountZero
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, sk_codec_start_scanline_decode__1, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKCodecResult__SkiaSharp__SKCodecResult__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_start_scanline_decode")]
		public static global::SkiaSharp.SKCodecResult__SkiaSharp sk_codec_start_scanline_decode__1(
					global::System.IntPtr codec, 
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp info, 
					global::System.IntPtr optionsZero, 
					global::System.IntPtr ctableZero, 
					global::System.IntPtr ctableCountZero)
		{
			// Setup
			global::SkiaSharp.SKCodecResult__SkiaSharp unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_info = &(info))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_start_scanline_decode__1(
									codec, 
									pinned_info, 
									optionsZero, 
									ctableZero, 
									ctableCountZero
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_codec_get_scanlines, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_get_scanlines")]
		public static int sk_codec_get_scanlines(
					global::System.IntPtr codec, 
					global::System.IntPtr dst, 
					int countLines, 
					global::System.IntPtr rowBytes)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_get_scanlines(
								codec, 
								dst, 
								countLines, 
								rowBytes
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_codec_skip_scanlines, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_skip_scanlines")]
		public static bool sk_codec_skip_scanlines(
					global::System.IntPtr codec, 
					int countLines)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_skip_scanlines(
								codec, 
								countLines
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_codec_get_scanline_order, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKCodecScanlineOrder__SkiaSharp__SKCodecScanlineOrder__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_get_scanline_order")]
		public static global::SkiaSharp.SKCodecScanlineOrder__SkiaSharp sk_codec_get_scanline_order(global::System.IntPtr codec)
		{
			// Setup
			global::SkiaSharp.SKCodecScanlineOrder__SkiaSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_get_scanline_order(codec);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_codec_next_scanline, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_next_scanline")]
		public static int sk_codec_next_scanline(global::System.IntPtr codec)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_next_scanline(codec);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_codec_output_scanline, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_codec_output_scanline")]
		public static int sk_codec_output_scanline(
					global::System.IntPtr codec, 
					int inputScanline)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_codec_output_scanline(
								codec, 
								inputScanline
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_bitmap_new, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_new")]
		public static global::System.IntPtr sk_bitmap_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_new();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_bitmap_destructor, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_destructor")]
		public static void sk_bitmap_destructor(global::System.IntPtr b)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_destructor(b);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_bitmap_get_info, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_get_info")]
		public static void sk_bitmap_get_info(
					global::System.IntPtr b, 
					out global::SkiaSharp.SKImageInfoNative__SkiaSharp info)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_info = &(info))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_get_info(
									b, 
									pinned_info
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_bitmap_get_pixels, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_get_pixels")]
		public static global::System.IntPtr sk_bitmap_get_pixels(
					global::System.IntPtr b, 
					out global::System.IntPtr length)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_length = &(length))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_get_pixels(
									b, 
									pinned_length
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_bitmap_get_pixel_colors, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [EETypeRva:0x00040944] rg_SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_get_pixel_colors")]
		public static void sk_bitmap_get_pixel_colors(
					global::System.IntPtr b, 
					global::SkiaSharp.SKColor__SkiaSharp[] colors)
		{
			// Setup
			global::SkiaSharp.SKColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKColor__SkiaSharp*);
			try
			{
				// Marshalling
				if (colors != null)
					unsafe_colors = (global::SkiaSharp.SKColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKColor__SkiaSharp))));
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_get_pixel_colors(
									b, 
									unsafe_colors
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (colors != null)
					for (uint mcgIdx = 0; (mcgIdx < colors.Length); mcgIdx++)
					{
						// [fwd] [out] [optional] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp colors
						colors[mcgIdx] = unsafe_colors[mcgIdx];
					}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, sk_bitmap_set_pixel_colors, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_set_pixel_colors")]
		public static void sk_bitmap_set_pixel_colors(
					global::System.IntPtr b, 
					global::SkiaSharp.SKColor__SkiaSharp[] colors)
		{
			// Setup
			global::SkiaSharp.SKColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKColor__SkiaSharp*);
			try
			{
				// Marshalling
				if (colors == null)
					unsafe_colors = null;
				else
				{
					if (colors != null)
						unsafe_colors = (global::SkiaSharp.SKColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKColor__SkiaSharp))));
					if (colors != null)
						for (uint mcgIdx = 0; (mcgIdx < colors.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp colors
							unsafe_colors[mcgIdx] = colors[mcgIdx];
						}
				}
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_set_pixel_colors(
									b, 
									unsafe_colors
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, sk_bitmap_reset, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_reset")]
		public static void sk_bitmap_reset(global::System.IntPtr b)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_reset(b);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_bitmap_get_row_bytes, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_get_row_bytes")]
		public static global::System.IntPtr sk_bitmap_get_row_bytes(global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_get_row_bytes(b);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_bitmap_get_byte_count, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_get_byte_count")]
		public static global::System.IntPtr sk_bitmap_get_byte_count(global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_get_byte_count(b);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_bitmap_is_null, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_is_null")]
		public static bool sk_bitmap_is_null(global::System.IntPtr b)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_is_null(b);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_bitmap_is_immutable, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_is_immutable")]
		public static bool sk_bitmap_is_immutable(global::System.IntPtr b)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_is_immutable(b);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_bitmap_set_immutable, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_set_immutable")]
		public static void sk_bitmap_set_immutable(global::System.IntPtr b)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_set_immutable(b);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_bitmap_is_volatile, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_is_volatile")]
		public static bool sk_bitmap_is_volatile(global::System.IntPtr b)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_is_volatile(b);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_bitmap_set_volatile, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003EBD4] bool__bool, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_set_volatile")]
		public static void sk_bitmap_set_volatile(
					global::System.IntPtr b, 
					bool value)
		{
			// Setup
			sbyte unsafe_value;
			// Marshalling
			unsafe_value = (value ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_set_volatile(
								b, 
								unsafe_value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_bitmap_erase, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_erase")]
		public static void sk_bitmap_erase(
					global::System.IntPtr cbitmap, 
					global::SkiaSharp.SKColor__SkiaSharp color)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_erase(
								cbitmap, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_bitmap_erase_rect, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRectI__SkiaSharp__SkiaSharp__SKRectI__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_erase_rect")]
		public static void sk_bitmap_erase_rect(
					global::System.IntPtr cbitmap, 
					global::SkiaSharp.SKColor__SkiaSharp color, 
					ref global::SkiaSharp.SKRectI__SkiaSharp rect)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKRectI__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_erase_rect(
									cbitmap, 
									color, 
									pinned_rect
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_bitmap_get_addr_8, [fwd] [return] [EETypeRva:0x000413DC] byte__unsigned char, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_get_addr_8")]
		public static byte sk_bitmap_get_addr_8(
					global::System.IntPtr cbitmap, 
					int x, 
					int y)
		{
			// Setup
			byte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_get_addr_8(
								cbitmap, 
								x, 
								y
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_bitmap_get_addr_16, [fwd] [return] [EETypeRva:0x000413DC] ushort__unsigned short, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_get_addr_16")]
		public static ushort sk_bitmap_get_addr_16(
					global::System.IntPtr cbitmap, 
					int x, 
					int y)
		{
			// Setup
			ushort unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_get_addr_16(
								cbitmap, 
								x, 
								y
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_bitmap_get_addr_32, [fwd] [return] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_get_addr_32")]
		public static uint sk_bitmap_get_addr_32(
					global::System.IntPtr cbitmap, 
					int x, 
					int y)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_get_addr_32(
								cbitmap, 
								x, 
								y
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_bitmap_get_addr, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_get_addr")]
		public static global::System.IntPtr sk_bitmap_get_addr(
					global::System.IntPtr cbitmap, 
					int x, 
					int y)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_get_addr(
								cbitmap, 
								x, 
								y
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_bitmap_get_pixel_color, [fwd] [return] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_get_pixel_color")]
		public static uint sk_bitmap_get_pixel_color(
					global::System.IntPtr cbitmap, 
					int x, 
					int y)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_get_pixel_color(
								cbitmap, 
								x, 
								y
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_bitmap_get_index8_color, [fwd] [return] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_get_index8_color")]
		public static uint sk_bitmap_get_index8_color(
					global::System.IntPtr cbitmap, 
					int x, 
					int y)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_get_index8_color(
								cbitmap, 
								x, 
								y
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_bitmap_set_pixel_color, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_set_pixel_color")]
		public static void sk_bitmap_set_pixel_color(
					global::System.IntPtr cbitmap, 
					int x, 
					int y, 
					global::SkiaSharp.SKColor__SkiaSharp color)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_set_pixel_color(
								cbitmap, 
								x, 
								y, 
								color
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_bitmap_ready_to_draw, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_ready_to_draw")]
		public static bool sk_bitmap_ready_to_draw(global::System.IntPtr b)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_ready_to_draw(b);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_bitmap_copy, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKColorType__SkiaSharp__SKColorType__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_copy")]
		public static bool sk_bitmap_copy(
					global::System.IntPtr cbitmap, 
					global::System.IntPtr dst, 
					global::SkiaSharp.SKColorType__SkiaSharp ct)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_copy(
								cbitmap, 
								dst, 
								ct
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_bitmap_can_copy_to, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKColorType__SkiaSharp__SKColorType__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_can_copy_to")]
		public static bool sk_bitmap_can_copy_to(
					global::System.IntPtr cbitmap, 
					global::SkiaSharp.SKColorType__SkiaSharp ct)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_can_copy_to(
								cbitmap, 
								ct
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_bitmap_lock_pixels, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_lock_pixels")]
		public static void sk_bitmap_lock_pixels(global::System.IntPtr b)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_lock_pixels(b);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_bitmap_unlock_pixels, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_unlock_pixels")]
		public static void sk_bitmap_unlock_pixels(global::System.IntPtr b)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_unlock_pixels(b);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_bitmap_install_pixels, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_install_pixels")]
		public static bool sk_bitmap_install_pixels(
					global::System.IntPtr cbitmap, 
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp cinfo, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes, 
					global::System.IntPtr ctable, 
					global::System.IntPtr releaseProc, 
					global::System.IntPtr context)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_cinfo = &(cinfo))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_install_pixels(
									cbitmap, 
									pinned_cinfo, 
									pixels, 
									rowBytes, 
									ctable, 
									releaseProc, 
									context
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_bitmap_install_pixels_with_pixmap, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_install_pixels_with_pixmap")]
		public static bool sk_bitmap_install_pixels_with_pixmap(
					global::System.IntPtr cbitmap, 
					global::System.IntPtr cpixmap)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_install_pixels_with_pixmap(
								cbitmap, 
								cpixmap
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_bitmap_install_mask_pixels, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMask__SkiaSharp__SkiaSharp__SKMask__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_install_mask_pixels")]
		public static bool sk_bitmap_install_mask_pixels(
					global::System.IntPtr cbitmap, 
					ref global::SkiaSharp.SKMask__SkiaSharp cmask)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKMask__SkiaSharp* pinned_cmask = &(cmask))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_install_mask_pixels(
									cbitmap, 
									pinned_cmask
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_bitmap_try_alloc_pixels, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_try_alloc_pixels")]
		public static bool sk_bitmap_try_alloc_pixels(
					global::System.IntPtr cbitmap, 
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp requestedInfo, 
					global::System.IntPtr rowBytes)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_requestedInfo = &(requestedInfo))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_try_alloc_pixels(
									cbitmap, 
									pinned_requestedInfo, 
									rowBytes
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_bitmap_try_alloc_pixels_with_color_table, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKBitmapAllocFlags__SkiaSharp__SKBitmapAllocFlags__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_try_alloc_pixels_with_color_table")]
		public static bool sk_bitmap_try_alloc_pixels_with_color_table(
					global::System.IntPtr cbitmap, 
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp requestedInfo, 
					global::System.IntPtr ctable, 
					global::SkiaSharp.SKBitmapAllocFlags__SkiaSharp flags)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_requestedInfo = &(requestedInfo))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_try_alloc_pixels_with_color_table(
									cbitmap, 
									pinned_requestedInfo, 
									ctable, 
									flags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_bitmap_get_colortable, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_get_colortable")]
		public static global::System.IntPtr sk_bitmap_get_colortable(global::System.IntPtr cbitmap)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_get_colortable(cbitmap);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_bitmap_set_pixels, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_set_pixels")]
		public static void sk_bitmap_set_pixels(
					global::System.IntPtr cbitmap, 
					global::System.IntPtr pixels, 
					global::System.IntPtr ctable)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_set_pixels(
								cbitmap, 
								pixels, 
								ctable
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_bitmap_peek_pixels, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_peek_pixels")]
		public static bool sk_bitmap_peek_pixels(
					global::System.IntPtr cbitmap, 
					global::System.IntPtr cpixmap)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_peek_pixels(
								cbitmap, 
								cpixmap
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_bitmapscaler_resize, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKBitmapResizeMethod__SkiaSharp__SKBitmapResizeMethod__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmapscaler_resize")]
		public static bool sk_bitmapscaler_resize(
					global::System.IntPtr cdst, 
					global::System.IntPtr csrc, 
					global::SkiaSharp.SKBitmapResizeMethod__SkiaSharp method)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmapscaler_resize(
								cdst, 
								csrc, 
								method
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_bitmap_extract_subset, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRectI__SkiaSharp__SkiaSharp__SKRectI__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_extract_subset")]
		public static bool sk_bitmap_extract_subset(
					global::System.IntPtr cbitmap, 
					global::System.IntPtr cdst, 
					ref global::SkiaSharp.SKRectI__SkiaSharp subset)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRectI__SkiaSharp* pinned_subset = &(subset))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_extract_subset(
									cbitmap, 
									cdst, 
									pinned_subset
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_bitmap_extract_alpha, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPointI__SkiaSharp__SkiaSharp__SKPointI__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_extract_alpha")]
		public static bool sk_bitmap_extract_alpha(
					global::System.IntPtr cbitmap, 
					global::System.IntPtr dst, 
					global::System.IntPtr paint, 
					out global::SkiaSharp.SKPointI__SkiaSharp offset)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKPointI__SkiaSharp* pinned_offset = &(offset))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_extract_alpha(
									cbitmap, 
									dst, 
									paint, 
									pinned_offset
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_bitmap_notify_pixels_changed, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_bitmap_notify_pixels_changed")]
		public static void sk_bitmap_notify_pixels_changed(global::System.IntPtr cbitmap)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_bitmap_notify_pixels_changed(cbitmap);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_color_unpremultiply, [fwd] [return] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x00041808] SkiaSharp_SKPMColor__SkiaSharp__SkiaSharp__SKPMColor__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_color_unpremultiply")]
		public static uint sk_color_unpremultiply(global::SkiaSharp.SKPMColor__SkiaSharp pmcolor)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_color_unpremultiply(pmcolor);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_color_premultiply, [fwd] [return] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_color_premultiply")]
		public static uint sk_color_premultiply(global::SkiaSharp.SKColor__SkiaSharp color)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_color_premultiply(color);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_color_unpremultiply_array, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKPMColor__SkiaSharp__SkiaSharp__SKPMColor__SkiaSharp *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [EETypeRva:0x00040944] rg_SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_color_unpremultiply_array")]
		public static void sk_color_unpremultiply_array(
					global::SkiaSharp.SKPMColor__SkiaSharp[] pmcolors, 
					int size, 
					global::SkiaSharp.SKColor__SkiaSharp[] colors)
		{
			// Setup
			global::SkiaSharp.SKPMColor__SkiaSharp* unsafe_pmcolors = default(global::SkiaSharp.SKPMColor__SkiaSharp*);
			global::SkiaSharp.SKColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKColor__SkiaSharp*);
			try
			{
				// Marshalling
				if (pmcolors == null)
					unsafe_pmcolors = null;
				else
				{
					if (pmcolors != null)
						unsafe_pmcolors = (global::SkiaSharp.SKPMColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(pmcolors.Length * sizeof(global::SkiaSharp.SKPMColor__SkiaSharp))));
					if (pmcolors != null)
						for (uint mcgIdx = 0; (mcgIdx < pmcolors.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKPMColor__SkiaSharp__SkiaSharp__SKPMColor__SkiaSharp pmcolors
							unsafe_pmcolors[mcgIdx] = pmcolors[mcgIdx];
						}
				}
				if (colors != null)
					unsafe_colors = (global::SkiaSharp.SKColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKColor__SkiaSharp))));
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_color_unpremultiply_array(
									unsafe_pmcolors, 
									size, 
									unsafe_colors
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (colors != null)
					for (uint mcgIdx_2 = 0; (mcgIdx_2 < colors.Length); mcgIdx_2++)
					{
						// [fwd] [out] [optional] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp colors
						colors[mcgIdx_2] = unsafe_colors[mcgIdx_2];
					}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_pmcolors);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, sk_color_premultiply_array, [fwd] [return] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [EETypeRva:0x00040944] rg_SkiaSharp_SKPMColor__SkiaSharp__SkiaSharp__SKPMColor__SkiaSharp *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_color_premultiply_array")]
		public static uint sk_color_premultiply_array(
					global::SkiaSharp.SKColor__SkiaSharp[] colors, 
					int size, 
					global::SkiaSharp.SKPMColor__SkiaSharp[] pmcolors)
		{
			// Setup
			global::SkiaSharp.SKColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKColor__SkiaSharp*);
			global::SkiaSharp.SKPMColor__SkiaSharp* unsafe_pmcolors = default(global::SkiaSharp.SKPMColor__SkiaSharp*);
			uint unsafe___value;
			try
			{
				// Marshalling
				if (colors == null)
					unsafe_colors = null;
				else
				{
					if (colors != null)
						unsafe_colors = (global::SkiaSharp.SKColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKColor__SkiaSharp))));
					if (colors != null)
						for (uint mcgIdx = 0; (mcgIdx < colors.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp colors
							unsafe_colors[mcgIdx] = colors[mcgIdx];
						}
				}
				if (pmcolors != null)
					unsafe_pmcolors = (global::SkiaSharp.SKPMColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(pmcolors.Length * sizeof(global::SkiaSharp.SKPMColor__SkiaSharp))));
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_color_premultiply_array(
									unsafe_colors, 
									size, 
									unsafe_pmcolors
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (pmcolors != null)
					for (uint mcgIdx_2 = 0; (mcgIdx_2 < pmcolors.Length); mcgIdx_2++)
					{
						// [fwd] [out] [optional] [EETypeRva:0x00041808] SkiaSharp_SKPMColor__SkiaSharp__SkiaSharp__SKPMColor__SkiaSharp pmcolors
						pmcolors[mcgIdx_2] = unsafe_pmcolors[mcgIdx_2];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_pmcolors);
			}
		}

		// Signature, sk_color_get_bit_shift, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_color_get_bit_shift")]
		public static void sk_color_get_bit_shift(
					out int a, 
					out int r, 
					out int g, 
					out int b)
		{
			// Marshalling
			fixed (int* pinned_a = &(a))
				fixed (int* pinned_r = &(r))
					fixed (int* pinned_g = &(g))
						fixed (int* pinned_b = &(b))
						{
							// Call to native method
							global::__Interop.libSkiaSharp_dll_PInvokes.sk_color_get_bit_shift(
												pinned_a, 
												pinned_r, 
												pinned_g, 
												pinned_b
											);
							global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						}
			// Return
		}

		// Signature, sk_pixmap_destructor, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pixmap_destructor")]
		public static void sk_pixmap_destructor(global::System.IntPtr cpixmap)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_pixmap_destructor(cpixmap);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_pixmap_new, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pixmap_new")]
		public static global::System.IntPtr sk_pixmap_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_pixmap_new();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_pixmap_new_with_params, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pixmap_new_with_params")]
		public static global::System.IntPtr sk_pixmap_new_with_params(
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp cinfo, 
					global::System.IntPtr addr, 
					global::System.IntPtr rowBytes, 
					global::System.IntPtr ctable)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_cinfo = &(cinfo))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_pixmap_new_with_params(
									pinned_cinfo, 
									addr, 
									rowBytes, 
									ctable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_pixmap_reset, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pixmap_reset")]
		public static void sk_pixmap_reset(global::System.IntPtr cpixmap)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_pixmap_reset(cpixmap);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_pixmap_reset_with_params, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pixmap_reset_with_params")]
		public static void sk_pixmap_reset_with_params(
					global::System.IntPtr cpixmap, 
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp cinfo, 
					global::System.IntPtr addr, 
					global::System.IntPtr rowBytes, 
					global::System.IntPtr ctable)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_cinfo = &(cinfo))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_pixmap_reset_with_params(
									cpixmap, 
									pinned_cinfo, 
									addr, 
									rowBytes, 
									ctable
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_pixmap_get_info, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pixmap_get_info")]
		public static void sk_pixmap_get_info(
					global::System.IntPtr cpixmap, 
					out global::SkiaSharp.SKImageInfoNative__SkiaSharp cinfo)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_cinfo = &(cinfo))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_pixmap_get_info(
									cpixmap, 
									pinned_cinfo
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_pixmap_get_row_bytes, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pixmap_get_row_bytes")]
		public static global::System.IntPtr sk_pixmap_get_row_bytes(global::System.IntPtr cpixmap)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_pixmap_get_row_bytes(cpixmap);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_pixmap_get_pixels, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pixmap_get_pixels")]
		public static global::System.IntPtr sk_pixmap_get_pixels(global::System.IntPtr cpixmap)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_pixmap_get_pixels(cpixmap);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_pixmap_get_colortable, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pixmap_get_colortable")]
		public static global::System.IntPtr sk_pixmap_get_colortable(global::System.IntPtr cpixmap)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_pixmap_get_colortable(cpixmap);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_pixmap_encode_image, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKEncodedImageFormat__SkiaSharp__SKEncodedImageFormat__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pixmap_encode_image")]
		public static bool sk_pixmap_encode_image(
					global::System.IntPtr dst, 
					global::System.IntPtr src, 
					global::SkiaSharp.SKEncodedImageFormat__SkiaSharp encoder, 
					int quality)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_pixmap_encode_image(
								dst, 
								src, 
								encoder, 
								quality
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_pixmap_read_pixels, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKImageInfoNative__SkiaSharp__SkiaSharp__SKImageInfoNative__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_pixmap_read_pixels")]
		public static bool sk_pixmap_read_pixels(
					global::System.IntPtr cpixmap, 
					ref global::SkiaSharp.SKImageInfoNative__SkiaSharp dstInfo, 
					global::System.IntPtr dstPixels, 
					global::System.IntPtr dstRowBytes, 
					int srcX, 
					int srcY)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKImageInfoNative__SkiaSharp* pinned_dstInfo = &(dstInfo))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_pixmap_read_pixels(
									cpixmap, 
									pinned_dstInfo, 
									dstPixels, 
									dstRowBytes, 
									srcX, 
									srcY
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_mask_alloc_image, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_mask_alloc_image")]
		public static global::System.IntPtr sk_mask_alloc_image(global::System.IntPtr bytes)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_mask_alloc_image(bytes);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_mask_free_image, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_mask_free_image")]
		public static void sk_mask_free_image(global::System.IntPtr image)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_mask_free_image(image);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_mask_is_empty, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMask__SkiaSharp__SkiaSharp__SKMask__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_mask_is_empty")]
		public static bool sk_mask_is_empty(ref global::SkiaSharp.SKMask__SkiaSharp cmask)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKMask__SkiaSharp* pinned_cmask = &(cmask))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_mask_is_empty(pinned_cmask);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_mask_compute_image_size, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMask__SkiaSharp__SkiaSharp__SKMask__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_mask_compute_image_size")]
		public static global::System.IntPtr sk_mask_compute_image_size(ref global::SkiaSharp.SKMask__SkiaSharp cmask)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKMask__SkiaSharp* pinned_cmask = &(cmask))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_mask_compute_image_size(pinned_cmask);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_mask_compute_total_image_size, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMask__SkiaSharp__SkiaSharp__SKMask__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_mask_compute_total_image_size")]
		public static global::System.IntPtr sk_mask_compute_total_image_size(ref global::SkiaSharp.SKMask__SkiaSharp cmask)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKMask__SkiaSharp* pinned_cmask = &(cmask))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_mask_compute_total_image_size(pinned_cmask);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_mask_get_addr_1, [fwd] [return] [EETypeRva:0x000413DC] byte__unsigned char, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMask__SkiaSharp__SkiaSharp__SKMask__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_mask_get_addr_1")]
		public static byte sk_mask_get_addr_1(
					ref global::SkiaSharp.SKMask__SkiaSharp cmask, 
					int x, 
					int y)
		{
			// Setup
			byte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKMask__SkiaSharp* pinned_cmask = &(cmask))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_mask_get_addr_1(
									pinned_cmask, 
									x, 
									y
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_mask_get_addr_8, [fwd] [return] [EETypeRva:0x000413DC] byte__unsigned char, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMask__SkiaSharp__SkiaSharp__SKMask__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_mask_get_addr_8")]
		public static byte sk_mask_get_addr_8(
					ref global::SkiaSharp.SKMask__SkiaSharp cmask, 
					int x, 
					int y)
		{
			// Setup
			byte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKMask__SkiaSharp* pinned_cmask = &(cmask))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_mask_get_addr_8(
									pinned_cmask, 
									x, 
									y
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_mask_get_addr_lcd_16, [fwd] [return] [EETypeRva:0x000413DC] ushort__unsigned short, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMask__SkiaSharp__SkiaSharp__SKMask__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_mask_get_addr_lcd_16")]
		public static ushort sk_mask_get_addr_lcd_16(
					ref global::SkiaSharp.SKMask__SkiaSharp cmask, 
					int x, 
					int y)
		{
			// Setup
			ushort unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKMask__SkiaSharp* pinned_cmask = &(cmask))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_mask_get_addr_lcd_16(
									pinned_cmask, 
									x, 
									y
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_mask_get_addr_32, [fwd] [return] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMask__SkiaSharp__SkiaSharp__SKMask__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_mask_get_addr_32")]
		public static uint sk_mask_get_addr_32(
					ref global::SkiaSharp.SKMask__SkiaSharp cmask, 
					int x, 
					int y)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKMask__SkiaSharp* pinned_cmask = &(cmask))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_mask_get_addr_32(
									pinned_cmask, 
									x, 
									y
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_mask_get_addr, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMask__SkiaSharp__SkiaSharp__SKMask__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_mask_get_addr")]
		public static global::System.IntPtr sk_mask_get_addr(
					ref global::SkiaSharp.SKMask__SkiaSharp cmask, 
					int x, 
					int y)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKMask__SkiaSharp* pinned_cmask = &(cmask))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_mask_get_addr(
									pinned_cmask, 
									x, 
									y
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_matrix_try_invert, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix_try_invert")]
		public static int sk_matrix_try_invert(
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix, 
					out global::SkiaSharp.SKMatrix__SkiaSharp result)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
				fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_result = &(result))
				{
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix_try_invert(
										pinned_matrix, 
										pinned_result
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, sk_matrix_concat, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix_concat")]
		public static void sk_matrix_concat(
					ref global::SkiaSharp.SKMatrix__SkiaSharp target, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp first, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp second)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_target = &(target))
				fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_first = &(first))
					fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_second = &(second))
					{
						// Call to native method
						global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix_concat(
											pinned_target, 
											pinned_first, 
											pinned_second
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
			// Return
		}

		// Signature, sk_matrix_pre_concat, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix_pre_concat")]
		public static void sk_matrix_pre_concat(
					ref global::SkiaSharp.SKMatrix__SkiaSharp target, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_target = &(target))
				fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
				{
					// Call to native method
					global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix_pre_concat(
										pinned_target, 
										pinned_matrix
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
		}

		// Signature, sk_matrix_post_concat, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix_post_concat")]
		public static void sk_matrix_post_concat(
					ref global::SkiaSharp.SKMatrix__SkiaSharp target, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_target = &(target))
				fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
				{
					// Call to native method
					global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix_post_concat(
										pinned_target, 
										pinned_matrix
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
		}

		// Signature, sk_matrix_map_rect, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix_map_rect")]
		public static void sk_matrix_map_rect(
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix, 
					out global::SkiaSharp.SKRect__SkiaSharp dest, 
					ref global::SkiaSharp.SKRect__SkiaSharp source)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
				fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_dest = &(dest))
					fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_source = &(source))
					{
						// Call to native method
						global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix_map_rect(
											pinned_matrix, 
											pinned_dest, 
											pinned_source
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
			// Return
		}

		// Signature, sk_matrix_map_points, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix_map_points")]
		public static void sk_matrix_map_points(
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix, 
					global::System.IntPtr dst, 
					global::System.IntPtr src, 
					int count)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix_map_points(
									pinned_matrix, 
									dst, 
									src, 
									count
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_matrix_map_vectors, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix_map_vectors")]
		public static void sk_matrix_map_vectors(
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix, 
					global::System.IntPtr dst, 
					global::System.IntPtr src, 
					int count)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix_map_vectors(
									pinned_matrix, 
									dst, 
									src, 
									count
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_matrix_map_xy, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix_map_xy")]
		public static void sk_matrix_map_xy(
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix, 
					float x, 
					float y, 
					out global::SkiaSharp.SKPoint__SkiaSharp result)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
				fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_result = &(result))
				{
					// Call to native method
					global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix_map_xy(
										pinned_matrix, 
										x, 
										y, 
										pinned_result
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
		}

		// Signature, sk_matrix_map_vector, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix_map_vector")]
		public static void sk_matrix_map_vector(
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix, 
					float x, 
					float y, 
					out global::SkiaSharp.SKPoint__SkiaSharp result)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
				fixed (global::SkiaSharp.SKPoint__SkiaSharp* pinned_result = &(result))
				{
					// Call to native method
					global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix_map_vector(
										pinned_matrix, 
										x, 
										y, 
										pinned_result
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
		}

		// Signature, sk_matrix_map_radius, [fwd] [return] [EETypeRva:0x000413DC] float__float, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix_map_radius")]
		public static float sk_matrix_map_radius(
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix, 
					float radius)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix_map_radius(
									pinned_matrix, 
									radius
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_3dview_new, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_3dview_new")]
		public static global::System.IntPtr sk_3dview_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_3dview_new();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_3dview_destroy, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_3dview_destroy")]
		public static void sk_3dview_destroy(global::System.IntPtr cview)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_3dview_destroy(cview);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_3dview_save, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_3dview_save")]
		public static void sk_3dview_save(global::System.IntPtr cview)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_3dview_save(cview);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_3dview_restore, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_3dview_restore")]
		public static void sk_3dview_restore(global::System.IntPtr cview)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_3dview_restore(cview);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_3dview_translate, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_3dview_translate")]
		public static void sk_3dview_translate(
					global::System.IntPtr cview, 
					float x, 
					float y, 
					float z)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_3dview_translate(
								cview, 
								x, 
								y, 
								z
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_3dview_rotate_x_degrees, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_3dview_rotate_x_degrees")]
		public static void sk_3dview_rotate_x_degrees(
					global::System.IntPtr cview, 
					float degrees)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_3dview_rotate_x_degrees(
								cview, 
								degrees
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_3dview_rotate_y_degrees, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_3dview_rotate_y_degrees")]
		public static void sk_3dview_rotate_y_degrees(
					global::System.IntPtr cview, 
					float degrees)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_3dview_rotate_y_degrees(
								cview, 
								degrees
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_3dview_rotate_z_degrees, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_3dview_rotate_z_degrees")]
		public static void sk_3dview_rotate_z_degrees(
					global::System.IntPtr cview, 
					float degrees)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_3dview_rotate_z_degrees(
								cview, 
								degrees
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_3dview_rotate_x_radians, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_3dview_rotate_x_radians")]
		public static void sk_3dview_rotate_x_radians(
					global::System.IntPtr cview, 
					float radians)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_3dview_rotate_x_radians(
								cview, 
								radians
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_3dview_rotate_y_radians, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_3dview_rotate_y_radians")]
		public static void sk_3dview_rotate_y_radians(
					global::System.IntPtr cview, 
					float radians)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_3dview_rotate_y_radians(
								cview, 
								radians
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_3dview_rotate_z_radians, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_3dview_rotate_z_radians")]
		public static void sk_3dview_rotate_z_radians(
					global::System.IntPtr cview, 
					float radians)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_3dview_rotate_z_radians(
								cview, 
								radians
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_3dview_get_matrix, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_3dview_get_matrix")]
		public static void sk_3dview_get_matrix(
					global::System.IntPtr cview, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp cmatrix)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_cmatrix = &(cmatrix))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_3dview_get_matrix(
									cview, 
									pinned_cmatrix
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_3dview_apply_to_canvas, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_3dview_apply_to_canvas")]
		public static void sk_3dview_apply_to_canvas(
					global::System.IntPtr cview, 
					global::System.IntPtr ccanvas)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_3dview_apply_to_canvas(
								cview, 
								ccanvas
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_3dview_dot_with_normal, [fwd] [return] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_3dview_dot_with_normal")]
		public static float sk_3dview_dot_with_normal(
					global::System.IntPtr cview, 
					float dx, 
					float dy, 
					float dz)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_3dview_dot_with_normal(
								cview, 
								dx, 
								dy, 
								dz
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_matrix44_destroy, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_destroy")]
		public static void sk_matrix44_destroy(global::System.IntPtr matrix)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_destroy(matrix);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_matrix44_new, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_new")]
		public static global::System.IntPtr sk_matrix44_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_new();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_matrix44_new_identity, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_new_identity")]
		public static global::System.IntPtr sk_matrix44_new_identity()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_new_identity();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_matrix44_new_copy, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_new_copy")]
		public static global::System.IntPtr sk_matrix44_new_copy(global::System.IntPtr src)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_new_copy(src);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_matrix44_new_concat, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_new_concat")]
		public static global::System.IntPtr sk_matrix44_new_concat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_new_concat(
								a, 
								b
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_matrix44_new_matrix, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_new_matrix")]
		public static global::System.IntPtr sk_matrix44_new_matrix(ref global::SkiaSharp.SKMatrix__SkiaSharp src)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_src = &(src))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_new_matrix(pinned_src);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_matrix44_equals, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_equals")]
		public static bool sk_matrix44_equals(
					global::System.IntPtr matrix, 
					global::System.IntPtr other)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_equals(
								matrix, 
								other
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_matrix44_to_matrix, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_to_matrix")]
		public static void sk_matrix44_to_matrix(
					global::System.IntPtr matrix, 
					out global::SkiaSharp.SKMatrix__SkiaSharp dst)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_dst = &(dst))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_to_matrix(
									matrix, 
									pinned_dst
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_matrix44_get_type, [fwd] [return] [EETypeRva:0x00041308] SkiaSharp_SKMatrix44TypeMask__SkiaSharp__SKMatrix44TypeMask__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_get_type")]
		public static global::SkiaSharp.SKMatrix44TypeMask__SkiaSharp sk_matrix44_get_type(global::System.IntPtr matrix)
		{
			// Setup
			global::SkiaSharp.SKMatrix44TypeMask__SkiaSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_get_type(matrix);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_matrix44_set_identity, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_set_identity")]
		public static void sk_matrix44_set_identity(global::System.IntPtr matrix)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_set_identity(matrix);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_matrix44_get, [fwd] [return] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_get")]
		public static float sk_matrix44_get(
					global::System.IntPtr matrix, 
					int row, 
					int col)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_get(
								matrix, 
								row, 
								col
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_matrix44_set, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_set")]
		public static void sk_matrix44_set(
					global::System.IntPtr matrix, 
					int row, 
					int col, 
					float value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_set(
								matrix, 
								row, 
								col, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_matrix44_as_col_major, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [EETypeRva:0x00040EE4] rg_float__float *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_as_col_major")]
		public static void sk_matrix44_as_col_major(
					global::System.IntPtr matrix, 
					float[] dst)
		{
			// Setup
			float* unsafe_dst;
			// Marshalling
			fixed (float* pinned_dst = ((dst != null 
						&& dst.Length == 0) ? new float[1] : dst))
			{
				unsafe_dst = (float*)pinned_dst;
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_as_col_major(
									matrix, 
									unsafe_dst
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_matrix44_as_row_major, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [EETypeRva:0x00040EE4] rg_float__float *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_as_row_major")]
		public static void sk_matrix44_as_row_major(
					global::System.IntPtr matrix, 
					float[] dst)
		{
			// Setup
			float* unsafe_dst;
			// Marshalling
			fixed (float* pinned_dst = ((dst != null 
						&& dst.Length == 0) ? new float[1] : dst))
			{
				unsafe_dst = (float*)pinned_dst;
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_as_row_major(
									matrix, 
									unsafe_dst
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_matrix44_set_col_major, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_float__float *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_set_col_major")]
		public static void sk_matrix44_set_col_major(
					global::System.IntPtr matrix, 
					float[] src)
		{
			// Setup
			float* unsafe_src;
			// Marshalling
			fixed (float* pinned_src = ((src != null 
						&& src.Length == 0) ? new float[1] : src))
			{
				unsafe_src = (float*)pinned_src;
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_set_col_major(
									matrix, 
									unsafe_src
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_matrix44_set_row_major, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_float__float *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_set_row_major")]
		public static void sk_matrix44_set_row_major(
					global::System.IntPtr matrix, 
					float[] src)
		{
			// Setup
			float* unsafe_src;
			// Marshalling
			fixed (float* pinned_src = ((src != null 
						&& src.Length == 0) ? new float[1] : src))
			{
				unsafe_src = (float*)pinned_src;
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_set_row_major(
									matrix, 
									unsafe_src
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_matrix44_set_translate, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_set_translate")]
		public static void sk_matrix44_set_translate(
					global::System.IntPtr matrix, 
					float dx, 
					float dy, 
					float dz)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_set_translate(
								matrix, 
								dx, 
								dy, 
								dz
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_matrix44_pre_translate, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_pre_translate")]
		public static void sk_matrix44_pre_translate(
					global::System.IntPtr matrix, 
					float dx, 
					float dy, 
					float dz)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_pre_translate(
								matrix, 
								dx, 
								dy, 
								dz
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_matrix44_post_translate, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_post_translate")]
		public static void sk_matrix44_post_translate(
					global::System.IntPtr matrix, 
					float dx, 
					float dy, 
					float dz)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_post_translate(
								matrix, 
								dx, 
								dy, 
								dz
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_matrix44_set_scale, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_set_scale")]
		public static void sk_matrix44_set_scale(
					global::System.IntPtr matrix, 
					float sx, 
					float sy, 
					float sz)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_set_scale(
								matrix, 
								sx, 
								sy, 
								sz
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_matrix44_pre_scale, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_pre_scale")]
		public static void sk_matrix44_pre_scale(
					global::System.IntPtr matrix, 
					float sx, 
					float sy, 
					float sz)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_pre_scale(
								matrix, 
								sx, 
								sy, 
								sz
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_matrix44_post_scale, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_post_scale")]
		public static void sk_matrix44_post_scale(
					global::System.IntPtr matrix, 
					float sx, 
					float sy, 
					float sz)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_post_scale(
								matrix, 
								sx, 
								sy, 
								sz
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_matrix44_set_rotate_about_degrees, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_set_rotate_about_degrees")]
		public static void sk_matrix44_set_rotate_about_degrees(
					global::System.IntPtr matrix, 
					float x, 
					float y, 
					float z, 
					float degrees)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_set_rotate_about_degrees(
								matrix, 
								x, 
								y, 
								z, 
								degrees
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_matrix44_set_rotate_about_radians, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_set_rotate_about_radians")]
		public static void sk_matrix44_set_rotate_about_radians(
					global::System.IntPtr matrix, 
					float x, 
					float y, 
					float z, 
					float radians)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_set_rotate_about_radians(
								matrix, 
								x, 
								y, 
								z, 
								radians
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_matrix44_set_rotate_about_radians_unit, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_set_rotate_about_radians_unit")]
		public static void sk_matrix44_set_rotate_about_radians_unit(
					global::System.IntPtr matrix, 
					float x, 
					float y, 
					float z, 
					float radians)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_set_rotate_about_radians_unit(
								matrix, 
								x, 
								y, 
								z, 
								radians
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_matrix44_set_concat, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_set_concat")]
		public static void sk_matrix44_set_concat(
					global::System.IntPtr matrix, 
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_set_concat(
								matrix, 
								a, 
								b
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_matrix44_pre_concat, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_pre_concat")]
		public static void sk_matrix44_pre_concat(
					global::System.IntPtr matrix, 
					global::System.IntPtr m)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_pre_concat(
								matrix, 
								m
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_matrix44_post_concat, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_post_concat")]
		public static void sk_matrix44_post_concat(
					global::System.IntPtr matrix, 
					global::System.IntPtr m)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_post_concat(
								matrix, 
								m
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_matrix44_invert, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_invert")]
		public static bool sk_matrix44_invert(
					global::System.IntPtr matrix, 
					global::System.IntPtr inverse)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_invert(
								matrix, 
								inverse
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_matrix44_transpose, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_transpose")]
		public static void sk_matrix44_transpose(global::System.IntPtr matrix)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_transpose(matrix);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_matrix44_map_scalars, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_float__float *, [fwd] [in] [EETypeRva:0x00040EE4] rg_float__float *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_map_scalars")]
		public static void sk_matrix44_map_scalars(
					global::System.IntPtr matrix, 
					float[] src, 
					float[] dst)
		{
			// Setup
			float* unsafe_src;
			float* unsafe_dst;
			// Marshalling
			fixed (float* pinned_src = ((src != null 
						&& src.Length == 0) ? new float[1] : src))
			{
				unsafe_src = (float*)pinned_src;
				fixed (float* pinned_dst = ((dst != null 
							&& dst.Length == 0) ? new float[1] : dst))
				{
					unsafe_dst = (float*)pinned_dst;
					// Call to native method
					global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_map_scalars(
										matrix, 
										unsafe_src, 
										unsafe_dst
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
		}

		// Signature, sk_matrix44_map2, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_float__float *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00040EE4] rg_float__float *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_map2")]
		public static void sk_matrix44_map2(
					global::System.IntPtr matrix, 
					float[] src2, 
					int count, 
					float[] dst)
		{
			// Setup
			float* unsafe_src2;
			float* unsafe_dst;
			// Marshalling
			fixed (float* pinned_src2 = ((src2 != null 
						&& src2.Length == 0) ? new float[1] : src2))
			{
				unsafe_src2 = (float*)pinned_src2;
				fixed (float* pinned_dst = ((dst != null 
							&& dst.Length == 0) ? new float[1] : dst))
				{
					unsafe_dst = (float*)pinned_dst;
					// Call to native method
					global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_map2(
										matrix, 
										unsafe_src2, 
										count, 
										unsafe_dst
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
		}

		// Signature, sk_matrix44_preserves_2d_axis_alignment, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_preserves_2d_axis_alignment")]
		public static bool sk_matrix44_preserves_2d_axis_alignment(
					global::System.IntPtr matrix, 
					float epsilon)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_preserves_2d_axis_alignment(
								matrix, 
								epsilon
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_matrix44_determinant, [fwd] [return] [EETypeRva:0x000413DC] double__double, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_matrix44_determinant")]
		public static double sk_matrix44_determinant(global::System.IntPtr matrix)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_matrix44_determinant(matrix);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_effect_unref, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_effect_unref")]
		public static void sk_path_effect_unref(global::System.IntPtr effect)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_effect_unref(effect);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_path_effect_create_compose, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_effect_create_compose")]
		public static global::System.IntPtr sk_path_effect_create_compose(
					global::System.IntPtr outer, 
					global::System.IntPtr inner)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_effect_create_compose(
								outer, 
								inner
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_effect_create_sum, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_effect_create_sum")]
		public static global::System.IntPtr sk_path_effect_create_sum(
					global::System.IntPtr first, 
					global::System.IntPtr second)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_effect_create_sum(
								first, 
								second
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_effect_create_discrete, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_effect_create_discrete")]
		public static global::System.IntPtr sk_path_effect_create_discrete(
					float segLength, 
					float deviation, 
					uint seedAssist)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_effect_create_discrete(
								segLength, 
								deviation, 
								seedAssist
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_effect_create_corner, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_effect_create_corner")]
		public static global::System.IntPtr sk_path_effect_create_corner(float radius)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_effect_create_corner(radius);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_effect_create_arc_to, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_effect_create_arc_to")]
		public static global::System.IntPtr sk_path_effect_create_arc_to(float radius)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_effect_create_arc_to(radius);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_effect_create_1d_path, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKPath1DPathEffectStyle__SkiaSharp__SKPath1DPathEffectStyle__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_effect_create_1d_path")]
		public static global::System.IntPtr sk_path_effect_create_1d_path(
					global::System.IntPtr path, 
					float advance, 
					float phase, 
					global::SkiaSharp.SKPath1DPathEffectStyle__SkiaSharp style)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_effect_create_1d_path(
								path, 
								advance, 
								phase, 
								style
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_effect_create_2d_line, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_effect_create_2d_line")]
		public static global::System.IntPtr sk_path_effect_create_2d_line(
					float width, 
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_effect_create_2d_line(
									width, 
									pinned_matrix
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_effect_create_2d_path, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKMatrix__SkiaSharp__SkiaSharp__SKMatrix__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_effect_create_2d_path")]
		public static global::System.IntPtr sk_path_effect_create_2d_path(
					ref global::SkiaSharp.SKMatrix__SkiaSharp matrix, 
					global::System.IntPtr path)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKMatrix__SkiaSharp* pinned_matrix = &(matrix))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_effect_create_2d_path(
									pinned_matrix, 
									path
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_path_effect_create_dash, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_float__float *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_path_effect_create_dash")]
		public static global::System.IntPtr sk_path_effect_create_dash(
					float[] intervals, 
					int count, 
					float phase)
		{
			// Setup
			float* unsafe_intervals;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (float* pinned_intervals = ((intervals != null 
						&& intervals.Length == 0) ? new float[1] : intervals))
			{
				unsafe_intervals = (float*)pinned_intervals;
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_path_effect_create_dash(
									unsafe_intervals, 
									count, 
									phase
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_colortable_unref, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colortable_unref")]
		public static void sk_colortable_unref(global::System.IntPtr ctable)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_colortable_unref(ctable);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_colortable_new, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKPMColor__SkiaSharp__SkiaSharp__SKPMColor__SkiaSharp *, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colortable_new")]
		public static global::System.IntPtr sk_colortable_new(
					global::SkiaSharp.SKPMColor__SkiaSharp[] colors, 
					int count)
		{
			// Setup
			global::SkiaSharp.SKPMColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKPMColor__SkiaSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (colors == null)
					unsafe_colors = null;
				else
				{
					if (colors != null)
						unsafe_colors = (global::SkiaSharp.SKPMColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKPMColor__SkiaSharp))));
					if (colors != null)
						for (uint mcgIdx = 0; (mcgIdx < colors.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKPMColor__SkiaSharp__SkiaSharp__SKPMColor__SkiaSharp colors
							unsafe_colors[mcgIdx] = colors[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colortable_new(
									unsafe_colors, 
									count
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, sk_colortable_count, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colortable_count")]
		public static int sk_colortable_count(global::System.IntPtr ctable)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_colortable_count(ctable);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_colortable_read_colors, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [EETypeRva:0x00040944] rg_SkiaSharp_SKPMColor__SkiaSharp__SkiaSharp__SKPMColor__SkiaSharp *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colortable_read_colors")]
		public static void sk_colortable_read_colors(
					global::System.IntPtr ctable, 
					global::SkiaSharp.SKPMColor__SkiaSharp[] colors)
		{
			// Setup
			global::SkiaSharp.SKPMColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKPMColor__SkiaSharp*);
			try
			{
				// Marshalling
				if (colors != null)
					unsafe_colors = (global::SkiaSharp.SKPMColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKPMColor__SkiaSharp))));
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_colortable_read_colors(
									ctable, 
									unsafe_colors
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				if (colors != null)
					for (uint mcgIdx = 0; (mcgIdx < colors.Length); mcgIdx++)
					{
						// [fwd] [out] [optional] [EETypeRva:0x00041808] SkiaSharp_SKPMColor__SkiaSharp__SkiaSharp__SKPMColor__SkiaSharp colors
						colors[mcgIdx] = unsafe_colors[mcgIdx];
					}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, sk_colortable_read_colors__0, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_colortable_read_colors")]
		public static void sk_colortable_read_colors__0(
					global::System.IntPtr ctable, 
					out global::System.IntPtr colors)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_colors = &(colors))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_colortable_read_colors__0(
									ctable, 
									pinned_colors
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, gr_context_create, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_GRBackend__SkiaSharp__GRBackend__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_GRContextOptions__SkiaSharp__SkiaSharp__GRContextOptions__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "gr_context_create")]
		public static global::System.IntPtr gr_context_create(
					global::SkiaSharp.GRBackend__SkiaSharp backend, 
					global::System.IntPtr backendContext, 
					ref global::SkiaSharp.GRContextOptions__SkiaSharp options)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.GRContextOptions__SkiaSharp* pinned_options = &(options))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.gr_context_create(
									backend, 
									backendContext, 
									pinned_options
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, gr_context_create_with_defaults, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_GRBackend__SkiaSharp__GRBackend__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "gr_context_create_with_defaults")]
		public static global::System.IntPtr gr_context_create_with_defaults(
					global::SkiaSharp.GRBackend__SkiaSharp backend, 
					global::System.IntPtr backendContext)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.gr_context_create_with_defaults(
								backend, 
								backendContext
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, gr_context_unref, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "gr_context_unref")]
		public static void gr_context_unref(global::System.IntPtr context)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.gr_context_unref(context);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, gr_context_abandon_context, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "gr_context_abandon_context")]
		public static void gr_context_abandon_context(global::System.IntPtr context)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.gr_context_abandon_context(context);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, gr_context_release_resources_and_abandon_context, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "gr_context_release_resources_and_abandon_context")]
		public static void gr_context_release_resources_and_abandon_context(global::System.IntPtr context)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.gr_context_release_resources_and_abandon_context(context);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, gr_context_get_resource_cache_limits, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "gr_context_get_resource_cache_limits")]
		public static void gr_context_get_resource_cache_limits(
					global::System.IntPtr context, 
					out int maxResources, 
					out global::System.IntPtr maxResourceBytes)
		{
			// Marshalling
			fixed (int* pinned_maxResources = &(maxResources))
				fixed (global::System.IntPtr* pinned_maxResourceBytes = &(maxResourceBytes))
				{
					// Call to native method
					global::__Interop.libSkiaSharp_dll_PInvokes.gr_context_get_resource_cache_limits(
										context, 
										pinned_maxResources, 
										pinned_maxResourceBytes
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
		}

		// Signature, gr_context_set_resource_cache_limits, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "gr_context_set_resource_cache_limits")]
		public static void gr_context_set_resource_cache_limits(
					global::System.IntPtr context, 
					int maxResources, 
					global::System.IntPtr maxResourceBytes)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.gr_context_set_resource_cache_limits(
								context, 
								maxResources, 
								maxResourceBytes
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, gr_context_get_resource_cache_usage, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "gr_context_get_resource_cache_usage")]
		public static void gr_context_get_resource_cache_usage(
					global::System.IntPtr context, 
					out int maxResources, 
					out global::System.IntPtr maxResourceBytes)
		{
			// Marshalling
			fixed (int* pinned_maxResources = &(maxResources))
				fixed (global::System.IntPtr* pinned_maxResourceBytes = &(maxResourceBytes))
				{
					// Call to native method
					global::__Interop.libSkiaSharp_dll_PInvokes.gr_context_get_resource_cache_usage(
										context, 
										pinned_maxResources, 
										pinned_maxResourceBytes
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
		}

		// Signature, gr_context_get_recommended_sample_count, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_GRPixelConfig__SkiaSharp__GRPixelConfig__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "gr_context_get_recommended_sample_count")]
		public static int gr_context_get_recommended_sample_count(
					global::System.IntPtr context, 
					global::SkiaSharp.GRPixelConfig__SkiaSharp config, 
					float dpi)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.gr_context_get_recommended_sample_count(
								context, 
								config, 
								dpi
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, gr_context_flush, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "gr_context_flush")]
		public static void gr_context_flush(global::System.IntPtr context)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.gr_context_flush(context);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, gr_context_reset_context, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "gr_context_reset_context")]
		public static void gr_context_reset_context(
					global::System.IntPtr context, 
					uint state)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.gr_context_reset_context(
								context, 
								state
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, gr_glinterface_assemble_interface, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "gr_glinterface_assemble_interface")]
		public static global::System.IntPtr gr_glinterface_assemble_interface(
					global::System.IntPtr ctx, 
					global::System.IntPtr get)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.gr_glinterface_assemble_interface(
								ctx, 
								get
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, gr_glinterface_assemble_gl_interface, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "gr_glinterface_assemble_gl_interface")]
		public static global::System.IntPtr gr_glinterface_assemble_gl_interface(
					global::System.IntPtr ctx, 
					global::System.IntPtr get)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.gr_glinterface_assemble_gl_interface(
								ctx, 
								get
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, gr_glinterface_assemble_gles_interface, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "gr_glinterface_assemble_gles_interface")]
		public static global::System.IntPtr gr_glinterface_assemble_gles_interface(
					global::System.IntPtr ctx, 
					global::System.IntPtr get)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.gr_glinterface_assemble_gles_interface(
								ctx, 
								get
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, gr_glinterface_default_interface, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "gr_glinterface_default_interface")]
		public static global::System.IntPtr gr_glinterface_default_interface()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.gr_glinterface_default_interface();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, gr_glinterface_create_native_interface, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "gr_glinterface_create_native_interface")]
		public static global::System.IntPtr gr_glinterface_create_native_interface()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.gr_glinterface_create_native_interface();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, gr_glinterface_unref, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "gr_glinterface_unref")]
		public static void gr_glinterface_unref(global::System.IntPtr glInterface)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.gr_glinterface_unref(glInterface);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, gr_glinterface_clone, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "gr_glinterface_clone")]
		public static global::System.IntPtr gr_glinterface_clone(global::System.IntPtr glInterface)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.gr_glinterface_clone(glInterface);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, gr_glinterface_validate, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "gr_glinterface_validate")]
		public static bool gr_glinterface_validate(global::System.IntPtr glInterface)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.gr_glinterface_validate(glInterface);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, gr_glinterface_has_extension, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040008] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "gr_glinterface_has_extension")]
		public static bool gr_glinterface_has_extension(
					global::System.IntPtr glInterface, 
					string extension)
		{
			// Setup
			byte* unsafe_extension = default(byte*);
			bool __value;
			sbyte unsafe___value;
			try
			{
				// Marshalling
				unsafe_extension = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(extension, true, false);
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.gr_glinterface_has_extension(
									glInterface, 
									unsafe_extension
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_extension);
			}
		}

		// Signature, sk_xmlstreamwriter_new, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_xmlstreamwriter_new")]
		public static global::System.IntPtr sk_xmlstreamwriter_new(global::System.IntPtr stream)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_xmlstreamwriter_new(stream);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_xmlstreamwriter_delete, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_xmlstreamwriter_delete")]
		public static void sk_xmlstreamwriter_delete(global::System.IntPtr writer)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_xmlstreamwriter_delete(writer);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_svgcanvas_create, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRect__SkiaSharp__SkiaSharp__SKRect__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_svgcanvas_create")]
		public static global::System.IntPtr sk_svgcanvas_create(
					ref global::SkiaSharp.SKRect__SkiaSharp bounds, 
					global::System.IntPtr writer)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRect__SkiaSharp* pinned_bounds = &(bounds))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_svgcanvas_create(
									pinned_bounds, 
									writer
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sk_region_new, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_region_new")]
		public static global::System.IntPtr sk_region_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_region_new();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_region_new2, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_region_new2")]
		public static global::System.IntPtr sk_region_new2(global::System.IntPtr r)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_region_new2(r);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, sk_region_contains, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_region_contains")]
		public static bool sk_region_contains(
					global::System.IntPtr r, 
					global::System.IntPtr region)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_region_contains(
								r, 
								region
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_region_contains2, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_region_contains2")]
		public static bool sk_region_contains2(
					global::System.IntPtr r, 
					int x, 
					int y)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_region_contains2(
								r, 
								x, 
								y
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_region_intersects, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_region_intersects")]
		public static bool sk_region_intersects(
					global::System.IntPtr r, 
					global::System.IntPtr src)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_region_intersects(
								r, 
								src
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_region_intersects__0, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041808] SkiaSharp_SKRectI__SkiaSharp__SkiaSharp__SKRectI__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_region_intersects")]
		public static bool sk_region_intersects__0(
					global::System.IntPtr r, 
					global::SkiaSharp.SKRectI__SkiaSharp rect)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_region_intersects__0(
								r, 
								rect
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_region_set_region, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_region_set_region")]
		public static bool sk_region_set_region(
					global::System.IntPtr r, 
					global::System.IntPtr src)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_region_set_region(
								r, 
								src
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_region_set_rect, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRectI__SkiaSharp__SkiaSharp__SKRectI__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_region_set_rect")]
		public static bool sk_region_set_rect(
					global::System.IntPtr r, 
					ref global::SkiaSharp.SKRectI__SkiaSharp rect)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			fixed (global::SkiaSharp.SKRectI__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_region_set_rect(
									r, 
									pinned_rect
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				__value = unsafe___value != 0;
			}
			// Return
			return __value;
		}

		// Signature, sk_region_set_path, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_region_set_path")]
		public static bool sk_region_set_path(
					global::System.IntPtr r, 
					global::System.IntPtr t, 
					global::System.IntPtr clip)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_region_set_path(
								r, 
								t, 
								clip
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_region_op, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKRegionOperation__SkiaSharp__SKRegionOperation__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_region_op")]
		public static bool sk_region_op(
					global::System.IntPtr r, 
					int left, 
					int top, 
					int right, 
					int bottom, 
					global::SkiaSharp.SKRegionOperation__SkiaSharp op)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_region_op(
								r, 
								left, 
								top, 
								right, 
								bottom, 
								op
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_region_op2, [fwd] [return] [EETypeRva:0x0003EBD4] bool__bool, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKRegionOperation__SkiaSharp__SKRegionOperation__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_region_op2")]
		public static bool sk_region_op2(
					global::System.IntPtr r, 
					global::System.IntPtr src, 
					global::SkiaSharp.SKRegionOperation__SkiaSharp op)
		{
			// Setup
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_region_op2(
								r, 
								src, 
								op
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			__value = unsafe___value != 0;
			// Return
			return __value;
		}

		// Signature, sk_region_get_bounds, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] SkiaSharp_SKRectI__SkiaSharp__SkiaSharp__SKRectI__SkiaSharp, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_region_get_bounds")]
		public static void sk_region_get_bounds(
					global::System.IntPtr r, 
					out global::SkiaSharp.SKRectI__SkiaSharp rect)
		{
			// Marshalling
			fixed (global::SkiaSharp.SKRectI__SkiaSharp* pinned_rect = &(rect))
			{
				// Call to native method
				global::__Interop.libSkiaSharp_dll_PInvokes.sk_region_get_bounds(
									r, 
									pinned_rect
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, sk_vertices_unref, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_vertices_unref")]
		public static void sk_vertices_unref(global::System.IntPtr cvertices)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libSkiaSharp_dll_PInvokes.sk_vertices_unref(cvertices);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, sk_vertices_make_copy, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] SkiaSharp_SKVertexMode__SkiaSharp__SKVertexMode__SkiaSharp, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp *, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp *, [fwd] [in] [EETypeRva:0x00040944] rg_SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00040EE4] rg_ushort__unsigned short *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.SkiaApi", "sk_vertices_make_copy")]
		public static global::System.IntPtr sk_vertices_make_copy(
					global::SkiaSharp.SKVertexMode__SkiaSharp vmode, 
					int vertexCount, 
					global::SkiaSharp.SKPoint__SkiaSharp[] positions, 
					global::SkiaSharp.SKPoint__SkiaSharp[] texs, 
					global::SkiaSharp.SKColor__SkiaSharp[] colors, 
					int indexCount, 
					ushort[] indices)
		{
			// Setup
			global::SkiaSharp.SKPoint__SkiaSharp* unsafe_positions = default(global::SkiaSharp.SKPoint__SkiaSharp*);
			global::SkiaSharp.SKPoint__SkiaSharp* unsafe_texs = default(global::SkiaSharp.SKPoint__SkiaSharp*);
			global::SkiaSharp.SKColor__SkiaSharp* unsafe_colors = default(global::SkiaSharp.SKColor__SkiaSharp*);
			ushort* unsafe_indices;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (positions == null)
					unsafe_positions = null;
				else
				{
					if (positions != null)
						unsafe_positions = (global::SkiaSharp.SKPoint__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(positions.Length * sizeof(global::SkiaSharp.SKPoint__SkiaSharp))));
					if (positions != null)
						for (uint mcgIdx = 0; (mcgIdx < positions.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp positions
							unsafe_positions[mcgIdx] = positions[mcgIdx];
						}
				}
				if (texs == null)
					unsafe_texs = null;
				else
				{
					if (texs != null)
						unsafe_texs = (global::SkiaSharp.SKPoint__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(texs.Length * sizeof(global::SkiaSharp.SKPoint__SkiaSharp))));
					if (texs != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < texs.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKPoint__SkiaSharp__SkiaSharp__SKPoint__SkiaSharp texs
							unsafe_texs[mcgIdx_2] = texs[mcgIdx_2];
						}
				}
				if (colors == null)
					unsafe_colors = null;
				else
				{
					if (colors != null)
						unsafe_colors = (global::SkiaSharp.SKColor__SkiaSharp*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::SkiaSharp.SKColor__SkiaSharp))));
					if (colors != null)
						for (uint mcgIdx_4 = 0; (mcgIdx_4 < colors.Length); mcgIdx_4++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x00041808] SkiaSharp_SKColor__SkiaSharp__SkiaSharp__SKColor__SkiaSharp colors
							unsafe_colors[mcgIdx_4] = colors[mcgIdx_4];
						}
				}
				fixed (ushort* pinned_indices = ((indices != null 
							&& indices.Length == 0) ? new ushort[1] : indices))
				{
					unsafe_indices = (ushort*)pinned_indices;
					// Call to native method
					unsafe___value = global::__Interop.libSkiaSharp_dll_PInvokes.sk_vertices_make_copy(
										vmode, 
										vertexCount, 
										unsafe_positions, 
										unsafe_texs, 
										unsafe_colors, 
										indexCount, 
										unsafe_indices
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_positions);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_texs);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-libraryloader-l2-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_libraryloader_l2_1_0_dll
	{
		// Signature, LoadPackagedLibrary, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003FF10] string__wchar_t *, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.GRGlInterface+AngleLoader", "LoadPackagedLibrary")]
		public static global::System.IntPtr LoadPackagedLibrary(
					string lpFileName, 
					uint Reserved)
		{
			// Setup
			ushort* unsafe_lpFileName = default(ushort*);
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (char* pinned_lpFileName = lpFileName)
			{
				unsafe_lpFileName = (ushort*)pinned_lpFileName;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.api_ms_win_core_libraryloader_l2_1_0_dll_PInvokes.LoadPackagedLibrary(
									unsafe_lpFileName, 
									Reserved
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-libraryloader-l1-2-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_libraryloader_l1_2_0_dll
	{
		// Signature, GetProcAddress, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040008] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.GRGlInterface+AngleLoader", "GetProcAddress")]
		public static global::System.IntPtr GetProcAddress(
					global::System.IntPtr hModule, 
					string lpProcName)
		{
			// Setup
			byte* unsafe_lpProcName = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_lpProcName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(lpProcName, true, false);
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.api_ms_win_core_libraryloader_l1_2_0_dll_PInvokes.GetProcAddress(
									hModule, 
									unsafe_lpProcName
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_lpProcName);
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'libEGL.dll'
	/// </summary>
	public unsafe static partial class libEGL_dll
	{
		// Signature, eglGetProcAddress, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040008] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.GRGlInterface+AngleLoader", "eglGetProcAddress")]
		public static global::System.IntPtr eglGetProcAddress(string procname)
		{
			// Setup
			byte* unsafe_procname = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_procname = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(procname, true, false);
				// Call to native method
				unsafe___value = global::__Interop.libEGL_dll_PInvokes.eglGetProcAddress(unsafe_procname);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_procname);
			}
		}

		// Signature, eglGetProcAddress__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040008] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Egl", "eglGetProcAddress")]
		public static global::System.IntPtr eglGetProcAddress__0(string procname)
		{
			// Setup
			byte* unsafe_procname = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_procname = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(procname, true, false);
				// Call to native method
				unsafe___value = global::__Interop.libEGL_dll_PInvokes.eglGetProcAddress__0(unsafe_procname);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_procname);
			}
		}

		// Signature, eglGetPlatformDisplayEXT, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_int__int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Egl", "eglGetPlatformDisplayEXT")]
		public static global::System.IntPtr eglGetPlatformDisplayEXT(
					uint platform, 
					global::System.IntPtr native_display, 
					int[] attrib_list)
		{
			// Setup
			int* unsafe_attrib_list;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (int* pinned_attrib_list = ((attrib_list != null 
						&& attrib_list.Length == 0) ? new int[1] : attrib_list))
			{
				unsafe_attrib_list = (int*)pinned_attrib_list;
				// Call to native method
				unsafe___value = global::__Interop.libEGL_dll_PInvokes.eglGetPlatformDisplayEXT(
									platform, 
									native_display, 
									unsafe_attrib_list
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, eglInitialize, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Egl", "eglInitialize")]
		public static int eglInitialize(
					global::System.IntPtr dpy, 
					out int major, 
					out int minor)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_major = &(major))
				fixed (int* pinned_minor = &(minor))
				{
					// Call to native method
					unsafe___value = global::__Interop.libEGL_dll_PInvokes.eglInitialize(
										dpy, 
										pinned_major, 
										pinned_minor
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, eglChooseConfig, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_int__int *, [fwd] [in] [out] [EETypeRva:0x00040EE4] rg_System_IntPtr____w64 int *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Egl", "eglChooseConfig")]
		public static int eglChooseConfig(
					global::System.IntPtr dpy, 
					int[] attrib_list, 
					global::System.IntPtr[] configs, 
					int config_size, 
					out int num_config)
		{
			// Setup
			int* unsafe_attrib_list;
			global::System.IntPtr* unsafe_configs;
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_attrib_list = ((attrib_list != null 
						&& attrib_list.Length == 0) ? new int[1] : attrib_list))
			{
				unsafe_attrib_list = (int*)pinned_attrib_list;
				fixed (global::System.IntPtr* pinned_configs = ((configs != null 
							&& configs.Length == 0) ? new global::System.IntPtr[1] : configs))
				{
					unsafe_configs = (global::System.IntPtr*)pinned_configs;
					fixed (int* pinned_num_config = &(num_config))
					{
						// Call to native method
						unsafe___value = global::__Interop.libEGL_dll_PInvokes.eglChooseConfig(
											dpy, 
											unsafe_attrib_list, 
											unsafe_configs, 
											config_size, 
											pinned_num_config
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, eglCreateContext, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_int__int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Egl", "eglCreateContext")]
		public static global::System.IntPtr eglCreateContext(
					global::System.IntPtr dpy, 
					global::System.IntPtr config, 
					global::System.IntPtr share_context, 
					int[] attrib_list)
		{
			// Setup
			int* unsafe_attrib_list;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (int* pinned_attrib_list = ((attrib_list != null 
						&& attrib_list.Length == 0) ? new int[1] : attrib_list))
			{
				unsafe_attrib_list = (int*)pinned_attrib_list;
				// Call to native method
				unsafe___value = global::__Interop.libEGL_dll_PInvokes.eglCreateContext(
									dpy, 
									config, 
									share_context, 
									unsafe_attrib_list
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, eglCreateWindowSurface, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003F880] object____mcg_IUnknown, [fwd] [in] [EETypeRva:0x00040EE4] rg_int__int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Egl", "eglCreateWindowSurface")]
		public static global::System.IntPtr eglCreateWindowSurface(
					global::System.IntPtr dpy, 
					global::System.IntPtr config, 
					object win, 
					int[] attrib_list)
		{
			// Setup
			void* unsafe_win = default(void*);
			int* unsafe_attrib_list;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_win = (void*)global::System.Runtime.InteropServices.McgMarshal.ObjectToIInspectable(win);
				fixed (int* pinned_attrib_list = ((attrib_list != null 
							&& attrib_list.Length == 0) ? new int[1] : attrib_list))
				{
					unsafe_attrib_list = (int*)pinned_attrib_list;
					// Call to native method
					unsafe___value = global::__Interop.libEGL_dll_PInvokes.eglCreateWindowSurface(
										dpy, 
										config, 
										unsafe_win, 
										unsafe_attrib_list
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_win)));
			}
		}

		// Signature, eglQuerySurface, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Egl", "eglQuerySurface")]
		public static int eglQuerySurface(
					global::System.IntPtr dpy, 
					global::System.IntPtr surface, 
					int attribute, 
					out int value)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_value = &(value))
			{
				// Call to native method
				unsafe___value = global::__Interop.libEGL_dll_PInvokes.eglQuerySurface(
									dpy, 
									surface, 
									attribute, 
									pinned_value
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, eglDestroySurface, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Egl", "eglDestroySurface")]
		public static int eglDestroySurface(
					global::System.IntPtr dpy, 
					global::System.IntPtr surface)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libEGL_dll_PInvokes.eglDestroySurface(
								dpy, 
								surface
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, eglMakeCurrent, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Egl", "eglMakeCurrent")]
		public static int eglMakeCurrent(
					global::System.IntPtr dpy, 
					global::System.IntPtr draw, 
					global::System.IntPtr read, 
					global::System.IntPtr ctx)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libEGL_dll_PInvokes.eglMakeCurrent(
								dpy, 
								draw, 
								read, 
								ctx
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, eglSwapBuffers, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Egl", "eglSwapBuffers")]
		public static int eglSwapBuffers(
					global::System.IntPtr dpy, 
					global::System.IntPtr surface)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libEGL_dll_PInvokes.eglSwapBuffers(
								dpy, 
								surface
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, eglDestroyContext, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Egl", "eglDestroyContext")]
		public static int eglDestroyContext(
					global::System.IntPtr dpy, 
					global::System.IntPtr ctx)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libEGL_dll_PInvokes.eglDestroyContext(
								dpy, 
								ctx
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, eglTerminate, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Egl", "eglTerminate")]
		public static int eglTerminate(global::System.IntPtr dpy)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libEGL_dll_PInvokes.eglTerminate(dpy);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, eglGetError, [fwd] [return] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Egl", "eglGetError")]
		public static int eglGetError()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libEGL_dll_PInvokes.eglGetError();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, eglBindAPI, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Egl", "eglBindAPI")]
		public static int eglBindAPI(uint api)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libEGL_dll_PInvokes.eglBindAPI(api);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, eglCreatePbufferSurface, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_int__int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Egl", "eglCreatePbufferSurface")]
		public static global::System.IntPtr eglCreatePbufferSurface(
					global::System.IntPtr dpy, 
					global::System.IntPtr config, 
					int[] attrib_list)
		{
			// Setup
			int* unsafe_attrib_list;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (int* pinned_attrib_list = ((attrib_list != null 
						&& attrib_list.Length == 0) ? new int[1] : attrib_list))
			{
				unsafe_attrib_list = (int*)pinned_attrib_list;
				// Call to native method
				unsafe___value = global::__Interop.libEGL_dll_PInvokes.eglCreatePbufferSurface(
									dpy, 
									config, 
									unsafe_attrib_list
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, eglSurfaceAttrib, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Egl", "eglSurfaceAttrib")]
		public static int eglSurfaceAttrib(
					global::System.IntPtr dpy, 
					global::System.IntPtr surface, 
					int attribute, 
					int value)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libEGL_dll_PInvokes.eglSurfaceAttrib(
								dpy, 
								surface, 
								attribute, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'libGLESv2.dll'
	/// </summary>
	public unsafe static partial class libGLESv2_dll
	{
		// Signature, glGenRenderbuffers, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [EETypeRva:0x00040EE4] rg_uint__unsigned int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Gles", "glGenRenderbuffers")]
		public static void glGenRenderbuffers(
					int n, 
					uint[] buffers)
		{
			// Setup
			uint* unsafe_buffers;
			// Marshalling
			fixed (uint* pinned_buffers = ((buffers != null 
						&& buffers.Length == 0) ? new uint[1] : buffers))
			{
				unsafe_buffers = (uint*)pinned_buffers;
				// Call to native method
				global::__Interop.libGLESv2_dll_PInvokes.glGenRenderbuffers(
									n, 
									unsafe_buffers
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, glGenFramebuffers, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [EETypeRva:0x00040EE4] rg_uint__unsigned int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Gles", "glGenFramebuffers")]
		public static void glGenFramebuffers(
					int n, 
					uint[] buffers)
		{
			// Setup
			uint* unsafe_buffers;
			// Marshalling
			fixed (uint* pinned_buffers = ((buffers != null 
						&& buffers.Length == 0) ? new uint[1] : buffers))
			{
				unsafe_buffers = (uint*)pinned_buffers;
				// Call to native method
				global::__Interop.libGLESv2_dll_PInvokes.glGenFramebuffers(
									n, 
									unsafe_buffers
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, glGenRenderbuffers__0, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Gles", "glGenRenderbuffers")]
		public static void glGenRenderbuffers__0(
					int n, 
					ref uint buffer)
		{
			// Marshalling
			fixed (uint* pinned_buffer = &(buffer))
			{
				// Call to native method
				global::__Interop.libGLESv2_dll_PInvokes.glGenRenderbuffers__0(
									n, 
									pinned_buffer
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, glGenFramebuffers__0, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Gles", "glGenFramebuffers")]
		public static void glGenFramebuffers__0(
					int n, 
					ref uint buffer)
		{
			// Marshalling
			fixed (uint* pinned_buffer = &(buffer))
			{
				// Call to native method
				global::__Interop.libGLESv2_dll_PInvokes.glGenFramebuffers__0(
									n, 
									pinned_buffer
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, glGetIntegerv, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Gles", "glGetIntegerv")]
		public static void glGetIntegerv(
					uint pname, 
					out int data)
		{
			// Marshalling
			fixed (int* pinned_data = &(data))
			{
				// Call to native method
				global::__Interop.libGLESv2_dll_PInvokes.glGetIntegerv(
									pname, 
									pinned_data
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, glGetRenderbufferParameteriv, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Gles", "glGetRenderbufferParameteriv")]
		public static void glGetRenderbufferParameteriv(
					uint target, 
					int pname, 
					out int param)
		{
			// Marshalling
			fixed (int* pinned_param = &(param))
			{
				// Call to native method
				global::__Interop.libGLESv2_dll_PInvokes.glGetRenderbufferParameteriv(
									target, 
									pname, 
									pinned_param
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, glBindRenderbuffer, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Gles", "glBindRenderbuffer")]
		public static void glBindRenderbuffer(
					uint target, 
					uint buffer)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libGLESv2_dll_PInvokes.glBindRenderbuffer(
								target, 
								buffer
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, glViewport, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Gles", "glViewport")]
		public static void glViewport(
					int x, 
					int y, 
					int width, 
					int height)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libGLESv2_dll_PInvokes.glViewport(
								x, 
								y, 
								width, 
								height
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, glClearColor, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, [fwd] [in] [EETypeRva:0x000413DC] float__float, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Gles", "glClearColor")]
		public static void glClearColor(
					float red, 
					float green, 
					float blue, 
					float alpha)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libGLESv2_dll_PInvokes.glClearColor(
								red, 
								green, 
								blue, 
								alpha
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, glClear, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Gles", "glClear")]
		public static void glClear(uint mask)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libGLESv2_dll_PInvokes.glClear(mask);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, glRenderbufferStorageMultisampleANGLE, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Gles", "glRenderbufferStorageMultisampleANGLE")]
		public static void glRenderbufferStorageMultisampleANGLE(
					uint target, 
					int samples, 
					uint internalformat, 
					int width, 
					int height)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libGLESv2_dll_PInvokes.glRenderbufferStorageMultisampleANGLE(
								target, 
								samples, 
								internalformat, 
								width, 
								height
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, glRenderbufferStorage, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Gles", "glRenderbufferStorage")]
		public static void glRenderbufferStorage(
					uint target, 
					uint internalformat, 
					int width, 
					int height)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libGLESv2_dll_PInvokes.glRenderbufferStorage(
								target, 
								internalformat, 
								width, 
								height
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, glBlitFramebufferANGLE, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Gles", "glBlitFramebufferANGLE")]
		public static void glBlitFramebufferANGLE(
					int srcX0, 
					int srcY0, 
					int srcX1, 
					int srcY1, 
					int dstX0, 
					int dstY0, 
					int dstX1, 
					int dstY1, 
					uint mask, 
					uint filter)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libGLESv2_dll_PInvokes.glBlitFramebufferANGLE(
								srcX0, 
								srcY0, 
								srcX1, 
								srcY1, 
								dstX0, 
								dstY0, 
								dstX1, 
								dstY1, 
								mask, 
								filter
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, glBindFramebuffer, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Gles", "glBindFramebuffer")]
		public static void glBindFramebuffer(
					uint target, 
					uint framebuffer)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libGLESv2_dll_PInvokes.glBindFramebuffer(
								target, 
								framebuffer
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, glDeleteFramebuffers, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [EETypeRva:0x00040EE4] rg_uint__unsigned int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Gles", "glDeleteFramebuffers")]
		public static void glDeleteFramebuffers(
					int n, 
					uint[] framebuffers)
		{
			// Setup
			uint* unsafe_framebuffers;
			// Marshalling
			fixed (uint* pinned_framebuffers = ((framebuffers != null 
						&& framebuffers.Length == 0) ? new uint[1] : framebuffers))
			{
				unsafe_framebuffers = (uint*)pinned_framebuffers;
				// Call to native method
				global::__Interop.libGLESv2_dll_PInvokes.glDeleteFramebuffers(
									n, 
									unsafe_framebuffers
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, glDeleteRenderbuffers, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [EETypeRva:0x00040EE4] rg_uint__unsigned int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Gles", "glDeleteRenderbuffers")]
		public static void glDeleteRenderbuffers(
					int n, 
					uint[] renderbuffers)
		{
			// Setup
			uint* unsafe_renderbuffers;
			// Marshalling
			fixed (uint* pinned_renderbuffers = ((renderbuffers != null 
						&& renderbuffers.Length == 0) ? new uint[1] : renderbuffers))
			{
				unsafe_renderbuffers = (uint*)pinned_renderbuffers;
				// Call to native method
				global::__Interop.libGLESv2_dll_PInvokes.glDeleteRenderbuffers(
									n, 
									unsafe_renderbuffers
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, glDeleteFramebuffers__0, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Gles", "glDeleteFramebuffers")]
		public static void glDeleteFramebuffers__0(
					int n, 
					ref uint framebuffer)
		{
			// Marshalling
			fixed (uint* pinned_framebuffer = &(framebuffer))
			{
				// Call to native method
				global::__Interop.libGLESv2_dll_PInvokes.glDeleteFramebuffers__0(
									n, 
									pinned_framebuffer
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, glDeleteRenderbuffers__0, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Gles", "glDeleteRenderbuffers")]
		public static void glDeleteRenderbuffers__0(
					int n, 
					ref uint renderbuffer)
		{
			// Marshalling
			fixed (uint* pinned_renderbuffer = &(renderbuffer))
			{
				// Call to native method
				global::__Interop.libGLESv2_dll_PInvokes.glDeleteRenderbuffers__0(
									n, 
									pinned_renderbuffer
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, glFramebufferRenderbuffer, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Gles", "glFramebufferRenderbuffer")]
		public static void glFramebufferRenderbuffer(
					uint target, 
					uint attachment, 
					uint renderbuffertarget, 
					uint renderbuffer)
		{
			// Marshalling
			// Call to native method
			global::__Interop.libGLESv2_dll_PInvokes.glFramebufferRenderbuffer(
								target, 
								attachment, 
								renderbuffertarget, 
								renderbuffer
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, glGetString, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SkiaSharp.Views.UWP, Version=1.59.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756", "SkiaSharp.Views.GlesInterop.Gles", "glGetString")]
		public static global::System.IntPtr glGetString(uint value)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libGLESv2_dll_PInvokes.glGetString(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module '[MRT]'
	/// </summary>
	public unsafe static partial class _MRT_
	{
		// Signature, RhpSetHighLevelDebugFuncEvalAbortHelper, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpSetHighLevelDebugFuncEvalAbortHelper")]
		public static void RhpSetHighLevelDebugFuncEvalAbortHelper(global::System.IntPtr highLevelDebugFuncEvalAbortHelper)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhpSetHighLevelDebugFuncEvalAbortHelper(highLevelDebugFuncEvalAbortHelper);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, RhpGetFuncEvalTargetAddress, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpGetFuncEvalTargetAddress")]
		public static global::System.IntPtr RhpGetFuncEvalTargetAddress()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhpGetFuncEvalTargetAddress();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhpGetFuncEvalParameterBufferSize, [fwd] [return] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpGetFuncEvalParameterBufferSize")]
		public static uint RhpGetFuncEvalParameterBufferSize()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhpGetFuncEvalParameterBufferSize();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhpGetFuncEvalMode, [fwd] [return] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpGetFuncEvalMode")]
		public static uint RhpGetFuncEvalMode()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhpGetFuncEvalMode();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhpRecordDebuggeeInitiatedHandle, [fwd] [return] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] void___ptrvoid *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpRecordDebuggeeInitiatedHandle")]
		public static uint RhpRecordDebuggeeInitiatedHandle(void* objectHandle)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhpRecordDebuggeeInitiatedHandle(((void*)objectHandle));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhpVerifyDebuggerCleanup, [fwd] [return] [EETypeRva:0x00040374] void__void, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpVerifyDebuggerCleanup")]
		public static void RhpVerifyDebuggerCleanup()
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhpVerifyDebuggerCleanup();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, RhpGetCurrentThread, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpGetCurrentThread")]
		public static global::System.IntPtr RhpGetCurrentThread()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhpGetCurrentThread();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhWaitForPendingFinalizers, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhWaitForPendingFinalizers")]
		public static void RhWaitForPendingFinalizers(int allowReentrantWait)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhWaitForPendingFinalizers(allowReentrantWait);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, _RhYield, [fwd] [return] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "_RhYield")]
		public static int _RhYield()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes._RhYield();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhFlushProcessWriteBuffers, [fwd] [return] [EETypeRva:0x00040374] void__void, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhFlushProcessWriteBuffers")]
		public static void RhFlushProcessWriteBuffers()
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhFlushProcessWriteBuffers();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, RhCompatibleReentrantWaitAny, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr___ptr__w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhCompatibleReentrantWaitAny")]
		public static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhCompatibleReentrantWaitAny(
								alertable, 
								timeout, 
								count, 
								((global::System.IntPtr*)handles)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhCallDescrWorkerNative, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhCallDescrWorkerNative")]
		public static void RhCallDescrWorkerNative(global::System.IntPtr callDescr)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhCallDescrWorkerNative(callDescr);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, _ecvt_s, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] double__double, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int___ptrint *, [fwd] [in] [EETypeRva:0x000413DC] int___ptrint *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "_ecvt_s")]
		public static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes._ecvt_s(
								((byte*)buffer), 
								sizeInBytes, 
								value, 
								count, 
								((int*)dec), 
								((int*)sign)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, memmove, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000413DC] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "memmove")]
		public static void memmove(
					byte* dmem, 
					byte* smem, 
					uint size)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.memmove(
								((byte*)dmem), 
								((byte*)smem), 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, memset, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "memset")]
		public static void memset(
					byte* mem, 
					int value, 
					uint size)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.memset(
								((byte*)mem), 
								value, 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module '*'
	/// </summary>
	public unsafe static partial class _
	{
		// Signature, CallingConventionConverter_GetStubs, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.TypeLoader, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.Runtime.TypeLoader.CallConverterThunk", "CallingConventionConverter_GetStubs")]
		public static void CallingConventionConverter_GetStubs(
					out global::System.IntPtr returnVoidStub, 
					out global::System.IntPtr returnIntegerStub, 
					out global::System.IntPtr commonStub, 
					out global::System.IntPtr returnFloatingPointReturn4Thunk, 
					out global::System.IntPtr returnFloatingPointReturn8Thunk)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_returnVoidStub = &(returnVoidStub))
				fixed (global::System.IntPtr* pinned_returnIntegerStub = &(returnIntegerStub))
					fixed (global::System.IntPtr* pinned_commonStub = &(commonStub))
						fixed (global::System.IntPtr* pinned_returnFloatingPointReturn4Thunk = &(returnFloatingPointReturn4Thunk))
							fixed (global::System.IntPtr* pinned_returnFloatingPointReturn8Thunk = &(returnFloatingPointReturn8Thunk))
							{
								// Call to native method
								global::__Interop.__PInvokes.CallingConventionConverter_GetStubs(
													pinned_returnVoidStub, 
													pinned_returnIntegerStub, 
													pinned_commonStub, 
													pinned_returnFloatingPointReturn4Thunk, 
													pinned_returnFloatingPointReturn8Thunk
												);
								global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
							}
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-string-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_string_l1_1_0_dll
	{
		// Signature, WindowsCreateStringReference, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] System_Runtime_InteropServices_HSTRING_HEADER__System_Private_Interop___ptrSystem_Runtime_InteropServices__HSTRING_HEADER__System_Private_Interop *, [fwd] [in] [EETypeRva:0x000413DC] void___ptrvoid *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore", "WindowsCreateStringReference")]
		public static int WindowsCreateStringReference(
					char* sourceString, 
					uint length, 
					global::System_Runtime_InteropServices.HSTRING_HEADER__System_Private_Interop* phstringHeader, 
					void* hstring)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_winrt_string_l1_1_0_dll_PInvokes.WindowsCreateStringReference(
								((ushort*)sourceString), 
								length, 
								((global::System_Runtime_InteropServices.HSTRING_HEADER__System_Private_Interop*)phstringHeader), 
								((void*)hstring)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-errorhandling-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_0_dll
	{
		// Signature, GetLastError, [fwd] [return] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetLastError")]
		public static int GetLastError()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes.GetLastError();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, SetLastError, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "SetLastError")]
		public static void SetLastError(uint dwErrCode)
		{
			// Marshalling
			// Call to native method
			global::__Interop.api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes.SetLastError(dwErrCode);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll
	{
		// Signature, RoInitialize, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "RoInitialize")]
		public static int RoInitialize(uint initType)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_winrt_l1_1_0_dll_PInvokes.RoInitialize(initType);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-localization-l1-2-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_localization_l1_2_0_dll
	{
		// Signature, IsValidLocaleName, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] char___ptrwchar_t *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "IsValidLocaleName")]
		public static int IsValidLocaleName(char* lpLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.IsValidLocaleName(((ushort*)lpLocaleName));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResolveLocaleName, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000413DC] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "ResolveLocaleName")]
		public static int ResolveLocaleName(
					char* lpNameToResolve, 
					char* lpLocaleName, 
					int cchLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.ResolveLocaleName(
								((ushort*)lpNameToResolve), 
								((ushort*)lpLocaleName), 
								cchLocaleName
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'crypt32.dll'
	/// </summary>
	public unsafe static partial class crypt32_dll
	{
		// Signature, CertDuplicateCertificateContext, [fwd] [return] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertDuplicateCertificateContext")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates CertDuplicateCertificateContext(global::System.IntPtr pCertContext)
		{
			// Setup
			global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertDuplicateCertificateContext(pCertContext);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, CertGetCertificateContextProperty, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertContextPropId__System_Security_Cryptography_X509Certificates__CertContextPropId__System_Security_Cryptography_X509Certificates, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] Internal_Cryptography_Pal_Native_CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetCertificateContextProperty")]
		public static bool CertGetCertificateContextProperty(
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertContextPropId__System_Security_Cryptography_X509Certificates dwPropId, 
					out global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates pvData, 
					ref int pcbData)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			pCertContext.DangerousAddRef(ref addRefed);
			fixed (global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pinned_pvData = &(pvData))
				fixed (int* pinned_pcbData = &(pcbData))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetCertificateContextProperty(
										pCertContext.DangerousGetHandle(), 
										dwPropId, 
										pinned_pvData, 
										pinned_pcbData
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				pCertContext.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptQueryObject, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertQueryObjectType__System_Security_Cryptography_X509Certificates__CertQueryObjectType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000413DC] void___ptrvoid *, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_ExpectedContentTypeFlags__System_Security_Cryptography_X509Certificates__ExpectedContentTypeFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_ExpectedFormatTypeFlags__System_Security_Cryptography_X509Certificates__ExpectedFormatTypeFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_ContentType__System_Security_Cryptography_X509Certificates__ContentType__System_Security_Cryptography_X509Certificates, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_FormatType__System_Security_Cryptography_X509Certificates__FormatType__System_Security_Cryptography_X509Certificates, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptQueryObject")]
		public static bool CryptQueryObject(
					global::Internal_Cryptography_Pal_Native.CertQueryObjectType__System_Security_Cryptography_X509Certificates dwObjectType, 
					void* pvObject, 
					global::Internal_Cryptography_Pal_Native.ExpectedContentTypeFlags__System_Security_Cryptography_X509Certificates dwExpectedContentTypeFlags, 
					global::Internal_Cryptography_Pal_Native.ExpectedFormatTypeFlags__System_Security_Cryptography_X509Certificates dwExpectedFormatTypeFlags, 
					int dwFlags, 
					out global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates pdwMsgAndCertEncodingType, 
					out global::Internal_Cryptography_Pal_Native.ContentType__System_Security_Cryptography_X509Certificates pdwContentType, 
					out global::Internal_Cryptography_Pal_Native.FormatType__System_Security_Cryptography_X509Certificates pdwFormatType, 
					out global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates phCertStore, 
					out global::Internal.Cryptography.Pal.Native.SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates phMsg, 
					out global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates ppvContext)
		{
			// Setup
			global::System.IntPtr unsafe_phCertStore;
			global::System.IntPtr unsafe_phMsg;
			global::System.IntPtr unsafe_ppvContext;
			int unsafe___value;
			// Marshalling
			fixed (global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates* pinned_pdwMsgAndCertEncodingType = &(pdwMsgAndCertEncodingType))
				fixed (global::Internal_Cryptography_Pal_Native.ContentType__System_Security_Cryptography_X509Certificates* pinned_pdwContentType = &(pdwContentType))
					fixed (global::Internal_Cryptography_Pal_Native.FormatType__System_Security_Cryptography_X509Certificates* pinned_pdwFormatType = &(pdwFormatType))
					{
						phCertStore = new global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates();
						unsafe_phCertStore = phCertStore.DangerousGetHandle();
						phMsg = new global::Internal.Cryptography.Pal.Native.SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates();
						unsafe_phMsg = phMsg.DangerousGetHandle();
						ppvContext = new global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates();
						unsafe_ppvContext = ppvContext.DangerousGetHandle();
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptQueryObject(
											dwObjectType, 
											((void*)pvObject), 
											dwExpectedContentTypeFlags, 
											dwExpectedFormatTypeFlags, 
											dwFlags, 
											pinned_pdwMsgAndCertEncodingType, 
											pinned_pdwContentType, 
											pinned_pdwFormatType, 
											&(unsafe_phCertStore), 
											&(unsafe_phMsg), 
											&(unsafe_ppvContext)
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
						global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
											ppvContext, 
											unsafe_ppvContext
										);
						global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
											phMsg, 
											unsafe_phMsg
										);
						global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
											phCertStore, 
											unsafe_phCertStore
										);
					}
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertDuplicateCertificateContextWithKeyContainerDeletion, [fwd] [return] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCertContextHandleWithKeyContainerDeletion__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertDuplicateCertificateContextWithKeyContainerDeletion")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertContextHandleWithKeyContainerDeletion__System_Security_Cryptography_X509Certificates CertDuplicateCertificateContextWithKeyContainerDeletion(global::System.IntPtr pCertContext)
		{
			// Setup
			global::Internal.Cryptography.Pal.Native.SafeCertContextHandleWithKeyContainerDeletion__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Internal.Cryptography.Pal.Native.SafeCertContextHandleWithKeyContainerDeletion__System_Security_Cryptography_X509Certificates();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertDuplicateCertificateContextWithKeyContainerDeletion(pCertContext);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, CertFreeCertificateContext, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertFreeCertificateContext")]
		public static bool CertFreeCertificateContext(global::System.IntPtr pCertContext)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertFreeCertificateContext(pCertContext);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptMsgGetParam, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CryptMessageParameterType__System_Security_Cryptography_X509Certificates__CryptMessageParameterType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptMsgGetParam")]
		public static bool CryptMsgGetParam(
					global::Internal.Cryptography.Pal.Native.SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates hCryptMsg, 
					global::Internal_Cryptography_Pal_Native.CryptMessageParameterType__System_Security_Cryptography_X509Certificates dwParamType, 
					int dwIndex, 
					out int pvData, 
					ref int pcbData)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hCryptMsg.DangerousAddRef(ref addRefed);
			fixed (int* pinned_pvData = &(pvData))
				fixed (int* pinned_pcbData = &(pcbData))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptMsgGetParam(
										hCryptMsg.DangerousGetHandle(), 
										dwParamType, 
										dwIndex, 
										pinned_pvData, 
										pinned_pcbData
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				hCryptMsg.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptMsgGetParam__0, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CryptMessageParameterType__System_Security_Cryptography_X509Certificates__CryptMessageParameterType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] byte___ptrunsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptMsgGetParam")]
		public static bool CryptMsgGetParam__0(
					global::Internal.Cryptography.Pal.Native.SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates hCryptMsg, 
					global::Internal_Cryptography_Pal_Native.CryptMessageParameterType__System_Security_Cryptography_X509Certificates dwParamType, 
					int dwIndex, 
					byte* pvData, 
					ref int pcbData)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hCryptMsg.DangerousAddRef(ref addRefed);
			fixed (int* pinned_pcbData = &(pcbData))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptMsgGetParam__0(
									hCryptMsg.DangerousGetHandle(), 
									dwParamType, 
									dwIndex, 
									((byte*)pvData), 
									pinned_pcbData
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				hCryptMsg.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, PFXImportCertStore, [fwd] [return] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x00041808] Internal_Cryptography_Pal_Native_CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafePasswordHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_PfxCertStoreFlags__System_Security_Cryptography_X509Certificates__PfxCertStoreFlags__System_Security_Cryptography_X509Certificates, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "PFXImportCertStore")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates PFXImportCertStore(
					ref global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates pPFX, 
					global::Microsoft.Win32.SafeHandles.SafePasswordHandle__System_Security_Cryptography_X509Certificates password, 
					global::Internal_Cryptography_Pal_Native.PfxCertStoreFlags__System_Security_Cryptography_X509Certificates dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pinned_pPFX = &(pPFX))
			{
				password.DangerousAddRef(ref addRefed);
				__value = new global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.PFXImportCertStore(
									pinned_pPFX, 
									password.DangerousGetHandle(), 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									__value, 
									unsafe___value
								);
				if (addRefed)
					password.DangerousRelease();
			}
			// Return
			return __value;
		}

		// Signature, CryptFindOIDInfo, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] __Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Encoding__Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Encoding, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] System_Security_Cryptography_OidGroup__System_Security_Cryptography_Encoding__OidGroup__System_Security_Cryptography_Encoding, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Encoding, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Crypt32", "CryptFindOIDInfo")]
		public static global::System.IntPtr CryptFindOIDInfo(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Encoding dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptFindOIDInfo(
								dwKeyType, 
								pvKey, 
								group
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, CertGetCertificateContextProperty__0, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertContextPropId__System_Security_Cryptography_X509Certificates__CertContextPropId__System_Security_Cryptography_X509Certificates, [fwd] [out] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetCertificateContextProperty")]
		public static bool CertGetCertificateContextProperty__0(
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertContextPropId__System_Security_Cryptography_X509Certificates dwPropId, 
					byte[] pvData, 
					ref int pcbData)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_pvData;
			int unsafe___value;
			// Marshalling
			pCertContext.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_pvData = ((pvData != null 
						&& pvData.Length == 0) ? new byte[1] : pvData))
			{
				unsafe_pvData = (byte*)pinned_pvData;
				fixed (int* pinned_pcbData = &(pcbData))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetCertificateContextProperty__0(
										pCertContext.DangerousGetHandle(), 
										dwPropId, 
										unsafe_pvData, 
										pinned_pcbData
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			if (addRefed)
				pCertContext.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertCloseStore, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertCloseStore")]
		public static bool CertCloseStore(
					global::System.IntPtr hCertStore, 
					int dwFlags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertCloseStore(
								hCertStore, 
								dwFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptMsgClose, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptMsgClose")]
		public static bool CryptMsgClose(global::System.IntPtr hCryptMsg)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptMsgClose(hCryptMsg);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertFindCertificateInStore, [fwd] [return] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertFindFlags__System_Security_Cryptography_X509Certificates__CertFindFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertFindType__System_Security_Cryptography_X509Certificates__CertFindType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000413DC] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000413DC] Internal_Cryptography_Pal_Native_CERT_CONTEXT__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_CONTEXT__System_Security_Cryptography_X509Certificates *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertFindCertificateInStore")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates CertFindCertificateInStore(
					global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates hCertStore, 
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CertFindFlags__System_Security_Cryptography_X509Certificates dwFindFlags, 
					global::Internal_Cryptography_Pal_Native.CertFindType__System_Security_Cryptography_X509Certificates dwFindType, 
					void* pvFindPara, 
					global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates* pPrevCertContext)
		{
			// Setup
			bool addRefed = false;
			global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			hCertStore.DangerousAddRef(ref addRefed);
			__value = new global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertFindCertificateInStore(
								hCertStore.DangerousGetHandle(), 
								dwCertEncodingType, 
								dwFindFlags, 
								dwFindType, 
								((void*)pvFindPara), 
								((global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates*)pPrevCertContext)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			if (addRefed)
				hCertStore.DangerousRelease();
			// Return
			return __value;
		}

		// Signature, CertEnumCertificatesInStore, [fwd] [return] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000413DC] Internal_Cryptography_Pal_Native_CERT_CONTEXT__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_CONTEXT__System_Security_Cryptography_X509Certificates *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertEnumCertificatesInStore")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates CertEnumCertificatesInStore(
					global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates hCertStore, 
					global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates* pPrevCertContext)
		{
			// Setup
			bool addRefed = false;
			global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			hCertStore.DangerousAddRef(ref addRefed);
			__value = new global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertEnumCertificatesInStore(
								hCertStore.DangerousGetHandle(), 
								((global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates*)pPrevCertContext)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			if (addRefed)
				hCertStore.DangerousRelease();
			// Return
			return __value;
		}

		// Signature, CertGetNameString, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertNameType__System_Security_Cryptography_X509Certificates__CertNameType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertNameFlags__System_Security_Cryptography_X509Certificates__CertNameFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates__CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates, [fwd] [out] [EETypeRva:0x000400D8] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetNameString")]
		public static int CertGetNameString(
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertNameType__System_Security_Cryptography_X509Certificates dwType, 
					global::Internal_Cryptography_Pal_Native.CertNameFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					ref global::Internal_Cryptography_Pal_Native.CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates pvPara, 
					global::System.Text.StringBuilder pszNameString, 
					int cchNameString)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszNameString = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				pCertContext.DangerousAddRef(ref addRefed);
				fixed (global::Internal_Cryptography_Pal_Native.CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates* pinned_pvPara = &(pvPara))
				{
					if (pszNameString == null)
						unsafe_pszNameString = null;
					else
					{
						unsafe_pszNameString = (ushort*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(pszNameString.Capacity * 2 
											+ 2)));
						if (unsafe_pszNameString == null)
							throw new global::System.OutOfMemoryException();
					}
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetNameString(
										pCertContext.DangerousGetHandle(), 
										dwType, 
										dwFlags, 
										pinned_pvPara, 
										unsafe_pszNameString, 
										cchNameString
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					if (pszNameString != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_pszNameString, 
											pszNameString
										);
				}
				if (addRefed)
					pCertContext.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_pszNameString != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_pszNameString);
			}
		}

		// Signature, CertGetNameString__0, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertNameType__System_Security_Cryptography_X509Certificates__CertNameType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertNameFlags__System_Security_Cryptography_X509Certificates__CertNameFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertNameStringType__System_Security_Cryptography_X509Certificates__CertNameStringType__System_Security_Cryptography_X509Certificates, [fwd] [out] [EETypeRva:0x000400D8] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetNameString")]
		public static int CertGetNameString__0(
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertNameType__System_Security_Cryptography_X509Certificates dwType, 
					global::Internal_Cryptography_Pal_Native.CertNameFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					ref global::Internal_Cryptography_Pal_Native.CertNameStringType__System_Security_Cryptography_X509Certificates pvTypePara, 
					global::System.Text.StringBuilder pszNameString, 
					int cchNameString)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszNameString = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				pCertContext.DangerousAddRef(ref addRefed);
				fixed (global::Internal_Cryptography_Pal_Native.CertNameStringType__System_Security_Cryptography_X509Certificates* pinned_pvTypePara = &(pvTypePara))
				{
					if (pszNameString == null)
						unsafe_pszNameString = null;
					else
					{
						unsafe_pszNameString = (ushort*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(pszNameString.Capacity * 2 
											+ 2)));
						if (unsafe_pszNameString == null)
							throw new global::System.OutOfMemoryException();
					}
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetNameString__0(
										pCertContext.DangerousGetHandle(), 
										dwType, 
										dwFlags, 
										pinned_pvTypePara, 
										unsafe_pszNameString, 
										cchNameString
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					if (pszNameString != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_pszNameString, 
											pszNameString
										);
				}
				if (addRefed)
					pCertContext.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_pszNameString != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_pszNameString);
			}
		}

		// Signature, CryptFindOIDInfo__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] __Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_X509Certificates__Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] System_Security_Cryptography_OidGroup__System_Security_Cryptography_Encoding__OidGroup__System_Security_Cryptography_Encoding, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+Crypt32", "CryptFindOIDInfo")]
		public static global::System.IntPtr CryptFindOIDInfo__0(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_X509Certificates dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptFindOIDInfo__0(
								dwKeyType, 
								pvKey, 
								group
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, CertGetCertificateChain, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000413DC] Internal_Cryptography_Pal_Native_FILETIME__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__FILETIME__System_Security_Cryptography_X509Certificates *, [fwd] [in] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x00041808] Internal_Cryptography_Pal_Native_CERT_CHAIN_PARA__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CERT_CHAIN_PARA__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertChainFlags__System_Security_Cryptography_X509Certificates__CertChainFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeX509ChainHandle__System_Security_Cryptography_X509Certificates____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetCertificateChain")]
		public static bool CertGetCertificateChain(
					global::System.IntPtr hChainEngine, 
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates* pTime, 
					global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates hStore, 
					ref global::Internal_Cryptography_Pal_Native.CERT_CHAIN_PARA__System_Security_Cryptography_X509Certificates pChainPara, 
					global::Internal_Cryptography_Pal_Native.CertChainFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::System.IntPtr pvReserved, 
					out global::Microsoft.Win32.SafeHandles.SafeX509ChainHandle__System_Security_Cryptography_X509Certificates ppChainContext)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_ppChainContext;
			int unsafe___value;
			// Marshalling
			pCertContext.DangerousAddRef(ref addRefed);
			hStore.DangerousAddRef(ref addRefed_1);
			fixed (global::Internal_Cryptography_Pal_Native.CERT_CHAIN_PARA__System_Security_Cryptography_X509Certificates* pinned_pChainPara = &(pChainPara))
			{
				ppChainContext = new global::Microsoft.Win32.SafeHandles.SafeX509ChainHandle__System_Security_Cryptography_X509Certificates();
				unsafe_ppChainContext = ppChainContext.DangerousGetHandle();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetCertificateChain(
									hChainEngine, 
									pCertContext.DangerousGetHandle(), 
									((global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates*)pTime), 
									hStore.DangerousGetHandle(), 
									pinned_pChainPara, 
									dwFlags, 
									pvReserved, 
									&(unsafe_ppChainContext)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									ppChainContext, 
									unsafe_ppChainContext
								);
			}
			if (addRefed_1)
				hStore.DangerousRelease();
			if (addRefed)
				pCertContext.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertNameToStr, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x00041808] Internal_Cryptography_Pal_Native_CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates__CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [out] [EETypeRva:0x000400D8] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertNameToStr")]
		public static int CertNameToStr(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					ref global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates pName, 
					global::Internal_Cryptography_Pal_Native.CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates dwStrType, 
					global::System.Text.StringBuilder psz, 
					int csz)
		{
			// Setup
			ushort* unsafe_psz = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pinned_pName = &(pName))
				{
					if (psz == null)
						unsafe_psz = null;
					else
					{
						unsafe_psz = (ushort*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(psz.Capacity * 2 
											+ 2)));
						if (unsafe_psz == null)
							throw new global::System.OutOfMemoryException();
					}
					if (unsafe_psz != null)
						global::System.Runtime.InteropServices.McgMarshal.StringBuilderToUnicodeString(
											psz, 
											unsafe_psz
										);
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertNameToStr(
										dwCertEncodingType, 
										pinned_pName, 
										dwStrType, 
										unsafe_psz, 
										csz
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					if (psz != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_psz, 
											psz
										);
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_psz != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_psz);
			}
		}

		// Signature, CryptFormatObject, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040008] string__unsigned char *, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [EETypeRva:0x000400D8] System_Text_StringBuilder__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Encoding, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.Cng+Interop", "CryptFormatObject")]
		public static bool CryptFormatObject(
					int dwCertEncodingType, 
					int dwFormatType, 
					int dwFormatStrType, 
					global::System.IntPtr pFormatStruct, 
					string lpszStructType, 
					byte[] pbEncoded, 
					int cbEncoded, 
					global::System.Text.StringBuilder pbFormat, 
					ref int pcbFormat)
		{
			// Setup
			byte* unsafe_lpszStructType = default(byte*);
			byte* unsafe_pbEncoded;
			ushort* unsafe_pbFormat = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_lpszStructType = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(lpszStructType, false, false);
				fixed (byte* pinned_pbEncoded = ((pbEncoded != null 
							&& pbEncoded.Length == 0) ? new byte[1] : pbEncoded))
				{
					unsafe_pbEncoded = (byte*)pinned_pbEncoded;
					if (pbFormat == null)
						unsafe_pbFormat = null;
					else
					{
						unsafe_pbFormat = (ushort*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(pbFormat.Capacity * 2 
											+ 2)));
						if (unsafe_pbFormat == null)
							throw new global::System.OutOfMemoryException();
					}
					fixed (int* pinned_pcbFormat = &(pcbFormat))
					{
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptFormatObject(
											dwCertEncodingType, 
											dwFormatType, 
											dwFormatStrType, 
											pFormatStruct, 
											unsafe_lpszStructType, 
											unsafe_pbEncoded, 
											cbEncoded, 
											unsafe_pbFormat, 
											pinned_pcbFormat
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
					if (pbFormat != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_pbFormat, 
											pbFormat
										);
				}
				// Return
				return unsafe___value != 0;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_lpszStructType);
				if (unsafe_pbFormat != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_pbFormat);
			}
		}

		// Signature, CryptFormatObject__0, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_FormatObjectType__System_Security_Cryptography_X509Certificates__FormatObjectType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_FormatObjectStringType__System_Security_Cryptography_X509Certificates__FormatObjectStringType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [EETypeRva:0x000400D8] System_Text_StringBuilder__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptFormatObject")]
		public static bool CryptFormatObject__0(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.FormatObjectType__System_Security_Cryptography_X509Certificates dwFormatType, 
					global::Internal_Cryptography_Pal_Native.FormatObjectStringType__System_Security_Cryptography_X509Certificates dwFormatStrType, 
					global::System.IntPtr pFormatStruct, 
					global::System.IntPtr lpszStructType, 
					byte[] pbEncoded, 
					int cbEncoded, 
					global::System.Text.StringBuilder pbFormat, 
					ref int pcbFormat)
		{
			// Setup
			byte* unsafe_pbEncoded;
			ushort* unsafe_pbFormat = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_pbEncoded = ((pbEncoded != null 
							&& pbEncoded.Length == 0) ? new byte[1] : pbEncoded))
				{
					unsafe_pbEncoded = (byte*)pinned_pbEncoded;
					if (pbFormat == null)
						unsafe_pbFormat = null;
					else
					{
						unsafe_pbFormat = (ushort*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(pbFormat.Capacity * 2 
											+ 2)));
						if (unsafe_pbFormat == null)
							throw new global::System.OutOfMemoryException();
					}
					fixed (int* pinned_pcbFormat = &(pcbFormat))
					{
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptFormatObject__0(
											dwCertEncodingType, 
											dwFormatType, 
											dwFormatStrType, 
											pFormatStruct, 
											lpszStructType, 
											unsafe_pbEncoded, 
											cbEncoded, 
											unsafe_pbFormat, 
											pinned_pcbFormat
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
					if (pbFormat != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_pbFormat, 
											pbFormat
										);
				}
				// Return
				return unsafe___value != 0;
			}
			finally
			{
				// Cleanup
				if (unsafe_pbFormat != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_pbFormat);
			}
		}

		// Signature, CertVerifyCertificateChainPolicy, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeX509ChainHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x00041808] Internal_Cryptography_Pal_Native_CERT_CHAIN_POLICY_PARA__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CERT_CHAIN_POLICY_PARA__System_Security_Cryptography_X509Certificates, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] Internal_Cryptography_Pal_Native_CERT_CHAIN_POLICY_STATUS__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CERT_CHAIN_POLICY_STATUS__System_Security_Cryptography_X509Certificates, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertVerifyCertificateChainPolicy")]
		public static bool CertVerifyCertificateChainPolicy(
					global::System.IntPtr pszPolicyOID, 
					global::Microsoft.Win32.SafeHandles.SafeX509ChainHandle__System_Security_Cryptography_X509Certificates pChainContext, 
					ref global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_PARA__System_Security_Cryptography_X509Certificates pPolicyPara, 
					ref global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_STATUS__System_Security_Cryptography_X509Certificates pPolicyStatus)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			pChainContext.DangerousAddRef(ref addRefed);
			fixed (global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_PARA__System_Security_Cryptography_X509Certificates* pinned_pPolicyPara = &(pPolicyPara))
				fixed (global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_STATUS__System_Security_Cryptography_X509Certificates* pinned_pPolicyStatus = &(pPolicyStatus))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertVerifyCertificateChainPolicy(
										pszPolicyOID, 
										pChainContext.DangerousGetHandle(), 
										pinned_pPolicyPara, 
										pinned_pPolicyStatus
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				pChainContext.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertAddCertificateLinkToStore, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertStoreAddDisposition__System_Security_Cryptography_X509Certificates__CertStoreAddDisposition__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertAddCertificateLinkToStore")]
		public static bool CertAddCertificateLinkToStore(
					global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates hCertStore, 
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertStoreAddDisposition__System_Security_Cryptography_X509Certificates dwAddDisposition, 
					global::System.IntPtr ppStoreContext)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			int unsafe___value;
			// Marshalling
			hCertStore.DangerousAddRef(ref addRefed);
			pCertContext.DangerousAddRef(ref addRefed_1);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertAddCertificateLinkToStore(
								hCertStore.DangerousGetHandle(), 
								pCertContext.DangerousGetHandle(), 
								dwAddDisposition, 
								ppStoreContext
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed_1)
				pCertContext.DangerousRelease();
			if (addRefed)
				hCertStore.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptImportPublicKeyInfoEx2, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000413DC] Internal_Cryptography_Pal_Native_CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] void___ptrvoid *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeBCryptKeyHandle__System_Security_Cryptography_X509Certificates____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptImportPublicKeyInfoEx2")]
		public static bool CryptImportPublicKeyInfoEx2(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates* pInfo, 
					int dwFlags, 
					void* pvAuxInfo, 
					out global::Microsoft.Win32.SafeHandles.SafeBCryptKeyHandle__System_Security_Cryptography_X509Certificates phKey)
		{
			// Setup
			global::System.IntPtr unsafe_phKey;
			int unsafe___value;
			// Marshalling
			phKey = new global::Microsoft.Win32.SafeHandles.SafeBCryptKeyHandle__System_Security_Cryptography_X509Certificates();
			unsafe_phKey = phKey.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptImportPublicKeyInfoEx2(
								dwCertEncodingType, 
								((global::Internal_Cryptography_Pal_Native.CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates*)pInfo), 
								dwFlags, 
								((void*)pvAuxInfo), 
								&(unsafe_phKey)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phKey, 
								unsafe_phKey
							);
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptDecodeObject, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates__CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates, [fwd] [out] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptDecodeObject")]
		public static bool CryptDecodeObject(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::System.IntPtr lpszStructType, 
					byte[] pbEncoded, 
					int cbEncoded, 
					global::Internal_Cryptography_Pal_Native.CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					byte[] pvStructInfo, 
					ref int pcbStructInfo)
		{
			// Setup
			byte* unsafe_pbEncoded;
			byte* unsafe_pvStructInfo;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_pbEncoded = ((pbEncoded != null 
						&& pbEncoded.Length == 0) ? new byte[1] : pbEncoded))
			{
				unsafe_pbEncoded = (byte*)pinned_pbEncoded;
				fixed (byte* pinned_pvStructInfo = ((pvStructInfo != null 
							&& pvStructInfo.Length == 0) ? new byte[1] : pvStructInfo))
				{
					unsafe_pvStructInfo = (byte*)pinned_pvStructInfo;
					fixed (int* pinned_pcbStructInfo = &(pcbStructInfo))
					{
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptDecodeObject(
											dwCertEncodingType, 
											lpszStructType, 
											unsafe_pbEncoded, 
											cbEncoded, 
											dwFlags, 
											unsafe_pvStructInfo, 
											pinned_pcbStructInfo
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
				}
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertFreeCertificateChain, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertFreeCertificateChain")]
		public static void CertFreeCertificateChain(global::System.IntPtr pChainContext)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.crypt32_dll_PInvokes.CertFreeCertificateChain(pChainContext);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, CertOpenStore, [fwd] [return] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertStoreFlags__System_Security_Cryptography_X509Certificates__CertStoreFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x0003FF10] string__wchar_t *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertOpenStore")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates CertOpenStore(
					global::System.IntPtr lpszStoreProvider, 
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwMsgAndCertEncodingType, 
					global::System.IntPtr hCryptProv, 
					global::Internal_Cryptography_Pal_Native.CertStoreFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					string pvPara)
		{
			// Setup
			ushort* unsafe_pvPara = default(ushort*);
			global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (char* pinned_pvPara = pvPara)
			{
				unsafe_pvPara = (ushort*)pinned_pvPara;
				__value = new global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertOpenStore(
									lpszStoreProvider, 
									dwMsgAndCertEncodingType, 
									hCryptProv, 
									dwFlags, 
									unsafe_pvPara
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									__value, 
									unsafe___value
								);
			}
			// Return
			return __value;
		}

		// Signature, CryptDecodeObjectPointer, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates__CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates, [fwd] [out] [EETypeRva:0x000413DC] void___ptrvoid *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptDecodeObjectPointer")]
		public static bool CryptDecodeObjectPointer(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::System.IntPtr lpszStructType, 
					byte[] pbEncoded, 
					int cbEncoded, 
					global::Internal_Cryptography_Pal_Native.CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					void* pvStructInfo, 
					ref int pcbStructInfo)
		{
			// Setup
			byte* unsafe_pbEncoded;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_pbEncoded = ((pbEncoded != null 
						&& pbEncoded.Length == 0) ? new byte[1] : pbEncoded))
			{
				unsafe_pbEncoded = (byte*)pinned_pbEncoded;
				fixed (int* pinned_pcbStructInfo = &(pcbStructInfo))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptDecodeObjectPointer(
										dwCertEncodingType, 
										lpszStructType, 
										unsafe_pbEncoded, 
										cbEncoded, 
										dwFlags, 
										((void*)pvStructInfo), 
										pinned_pcbStructInfo
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptFindOIDInfo__1, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] __Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Cng__Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] System_Security_Cryptography_OidGroup__System_Security_Cryptography_Encoding__OidGroup__System_Security_Cryptography_Encoding, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Crypt32", "CryptFindOIDInfo")]
		public static global::System.IntPtr CryptFindOIDInfo__1(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Cng dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptFindOIDInfo__1(
								dwKeyType, 
								pvKey, 
								group
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, CertControlStore, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertControlStoreFlags__System_Security_Cryptography_X509Certificates__CertControlStoreFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertControlStoreType__System_Security_Cryptography_X509Certificates__CertControlStoreType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertControlStore")]
		public static bool CertControlStore(
					global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates hCertStore, 
					global::Internal_Cryptography_Pal_Native.CertControlStoreFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::Internal_Cryptography_Pal_Native.CertControlStoreType__System_Security_Cryptography_X509Certificates dwControlType, 
					global::System.IntPtr pvCtrlPara)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hCertStore.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertControlStore(
								hCertStore.DangerousGetHandle(), 
								dwFlags, 
								dwControlType, 
								pvCtrlPara
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				hCertStore.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertFindExtension, [fwd] [return] [EETypeRva:0x000413DC] Internal_Cryptography_Pal_Native_CERT_EXTENSION__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_EXTENSION__System_Security_Cryptography_X509Certificates *, [fwd] [in] [EETypeRva:0x00040008] string__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] Internal_Cryptography_Pal_Native_CERT_EXTENSION__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_EXTENSION__System_Security_Cryptography_X509Certificates *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertFindExtension")]
		public static global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates* CertFindExtension(
					string pszObjId, 
					int cExtensions, 
					global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates* rgExtensions)
		{
			// Setup
			byte* unsafe_pszObjId = default(byte*);
			global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates* unsafe___value;
			try
			{
				// Marshalling
				unsafe_pszObjId = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(pszObjId, true, false);
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = (global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates*)global::__Interop.crypt32_dll_PInvokes.CertFindExtension(
									unsafe_pszObjId, 
									cExtensions, 
									((global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates*)rgExtensions)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				// Return
				return (global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates*)unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_pszObjId);
			}
		}

		// Signature, CertGetValidUsages, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, [fwd] [out] [EETypeRva:0x000413DC] void___ptrvoid *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetValidUsages")]
		public static bool CertGetValidUsages(
					int cCerts, 
					ref global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates rghCerts, 
					out int cNumOIDs, 
					void* rghOIDs, 
					ref int pcbOIDs)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_rghCerts;
			int unsafe___value;
			// Marshalling
			rghCerts.DangerousAddRef(ref addRefed);
			unsafe_rghCerts = rghCerts.DangerousGetHandle();
			fixed (int* pinned_cNumOIDs = &(cNumOIDs))
				fixed (int* pinned_pcbOIDs = &(pcbOIDs))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetValidUsages(
										cCerts, 
										&(unsafe_rghCerts), 
										pinned_cNumOIDs, 
										((void*)rghOIDs), 
										pinned_pcbOIDs
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				rghCerts.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertGetIntendedKeyUsage, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000413DC] Internal_Cryptography_Pal_Native_CERT_INFO__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_INFO__System_Security_Cryptography_X509Certificates *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041308] System_Security_Cryptography_X509Certificates_X509KeyUsageFlags__System_Security_Cryptography_X509Certificates__X509KeyUsageFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetIntendedKeyUsage")]
		public static bool CertGetIntendedKeyUsage(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates* pCertInfo, 
					out global::System_Security_Cryptography_X509Certificates.X509KeyUsageFlags__System_Security_Cryptography_X509Certificates pbKeyUsage, 
					int cbKeyUsage)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System_Security_Cryptography_X509Certificates.X509KeyUsageFlags__System_Security_Cryptography_X509Certificates* pinned_pbKeyUsage = &(pbKeyUsage))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetIntendedKeyUsage(
									dwCertEncodingType, 
									((global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates*)pCertInfo), 
									pinned_pbKeyUsage, 
									cbKeyUsage
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertVerifyTimeValidity, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x00041808] Internal_Cryptography_Pal_Native_FILETIME__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__FILETIME__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000413DC] Internal_Cryptography_Pal_Native_CERT_INFO__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_INFO__System_Security_Cryptography_X509Certificates *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertVerifyTimeValidity")]
		public static int CertVerifyTimeValidity(
					ref global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates pTimeToVerify, 
					global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates* pCertInfo)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates* pinned_pTimeToVerify = &(pTimeToVerify))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertVerifyTimeValidity(
									pinned_pTimeToVerify, 
									((global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates*)pCertInfo)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, CertEnumCertificatesInStore__0, [fwd] [return] [EETypeRva:0x000413DC] __Interop_Crypt32_CERT_CONTEXT__System_Net_Security___ptr__Interop_Crypt32_CERT_CONTEXT__System_Net_Security *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] __Interop_Crypt32_CERT_CONTEXT__System_Net_Security___ptr__Interop_Crypt32_CERT_CONTEXT__System_Net_Security *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Crypt32", "CertEnumCertificatesInStore")]
		public static global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security* CertEnumCertificatesInStore__0(
					global::System.IntPtr hCertStore, 
					global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security* pPrevCertContext)
		{
			// Setup
			global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security* unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = (global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security*)global::__Interop.crypt32_dll_PInvokes.CertEnumCertificatesInStore__0(
								hCertStore, 
								((global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security*)pPrevCertContext)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return (global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security*)unsafe___value;
		}

		// Signature, CertVerifyCertificateChainPolicy__0, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeX509ChainHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_Crypt32_CERT_CHAIN_POLICY_PARA__System_Net_Security____Interop_Crypt32_CERT_CHAIN_POLICY_PARA__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_Crypt32_CERT_CHAIN_POLICY_STATUS__System_Net_Security____Interop_Crypt32_CERT_CHAIN_POLICY_STATUS__System_Net_Security, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Crypt32", "CertVerifyCertificateChainPolicy")]
		public static bool CertVerifyCertificateChainPolicy__0(
					global::System.IntPtr pszPolicyOID, 
					global::Microsoft.Win32.SafeHandles.SafeX509ChainHandle__System_Security_Cryptography_X509Certificates pChainContext, 
					ref global::_.Interop_Crypt32_CERT_CHAIN_POLICY_PARA__System_Net_Security pPolicyPara, 
					ref global::_.Interop_Crypt32_CERT_CHAIN_POLICY_STATUS__System_Net_Security pPolicyStatus)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			pChainContext.DangerousAddRef(ref addRefed);
			fixed (global::_.Interop_Crypt32_CERT_CHAIN_POLICY_PARA__System_Net_Security* pinned_pPolicyPara = &(pPolicyPara))
				fixed (global::_.Interop_Crypt32_CERT_CHAIN_POLICY_STATUS__System_Net_Security* pinned_pPolicyStatus = &(pPolicyStatus))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertVerifyCertificateChainPolicy__0(
										pszPolicyOID, 
										pChainContext.DangerousGetHandle(), 
										pinned_pPolicyPara, 
										pinned_pPolicyStatus
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				pChainContext.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertFreeCertificateContext__0, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Crypt32", "CertFreeCertificateContext")]
		public static bool CertFreeCertificateContext__0(global::System.IntPtr pCertContext)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertFreeCertificateContext__0(pCertContext);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'kernel32.dll'
	/// </summary>
	public unsafe static partial class kernel32_dll
	{
		// Signature, GetCPInfoExW, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] __Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages___ptr__Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Text.Encoding.CodePages, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCPInfoExW")]
		public static int GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::_.Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCPInfoExW(
								CodePage, 
								dwFlags, 
								((global::_.Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages*)lpCPInfoEx)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, GetCurrentProcessId, [fwd] [return] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Diagnostics.TraceSource, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCurrentProcessId")]
		public static uint GetCurrentProcessId()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCurrentProcessId();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [EETypeRva:0x000400D8] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00040EE4] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					global::System.Text.StringBuilder lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			ushort* unsafe_lpBuffer = default(ushort*);
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			try
			{
				// Marshalling
				if (lpBuffer == null)
					unsafe_lpBuffer = null;
				else
				{
					unsafe_lpBuffer = (ushort*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(lpBuffer.Capacity * 2 
										+ 2)));
					if (unsafe_lpBuffer == null)
						throw new global::System.OutOfMemoryException();
				}
				fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
							&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
				{
					unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage(
										dwFlags, 
										lpSource, 
										dwMessageId, 
										dwLanguageId, 
										unsafe_lpBuffer, 
										nSize, 
										unsafe_arguments
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
				if (lpBuffer != null)
					global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
										unsafe_lpBuffer, 
										lpBuffer
									);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_lpBuffer != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_lpBuffer);
			}
		}

		// Signature, LocalAlloc, [fwd] [return] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Net_Primitives____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "LocalAlloc")]
		public static global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_Primitives LocalAlloc(
					int uFlags, 
					global::System.UIntPtr sizetdwBytes)
		{
			// Setup
			global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_Primitives __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_Primitives();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.LocalAlloc(
								uFlags, 
								sizetdwBytes
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, LocalFree, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "LocalFree")]
		public static global::System.IntPtr LocalFree(global::System.IntPtr handle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.LocalFree(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage__0, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_FormatMessageFlags__System_Security_Cryptography_X509Certificates__FormatMessageFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [EETypeRva:0x000400D8] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+localization", "FormatMessage")]
		public static int FormatMessage__0(
					global::Internal_Cryptography_Pal_Native.FormatMessageFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::System.IntPtr lpSource, 
					int dwMessageId, 
					int dwLanguageId, 
					global::System.Text.StringBuilder lpBuffer, 
					int nSize, 
					global::System.IntPtr Arguments)
		{
			// Setup
			ushort* unsafe_lpBuffer = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (lpBuffer == null)
					unsafe_lpBuffer = null;
				else
				{
					unsafe_lpBuffer = (ushort*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(lpBuffer.Capacity * 2 
										+ 2)));
					if (unsafe_lpBuffer == null)
						throw new global::System.OutOfMemoryException();
				}
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__0(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									unsafe_lpBuffer, 
									nSize, 
									Arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (lpBuffer != null)
					global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
										unsafe_lpBuffer, 
										lpBuffer
									);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_lpBuffer != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_lpBuffer);
			}
		}

		// Signature, FormatMessage__1, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [EETypeRva:0x000400D8] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00040EE4] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__1(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					global::System.Text.StringBuilder lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			ushort* unsafe_lpBuffer = default(ushort*);
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			try
			{
				// Marshalling
				if (lpBuffer == null)
					unsafe_lpBuffer = null;
				else
				{
					unsafe_lpBuffer = (ushort*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(lpBuffer.Capacity * 2 
										+ 2)));
					if (unsafe_lpBuffer == null)
						throw new global::System.OutOfMemoryException();
				}
				fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
							&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
				{
					unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__1(
										dwFlags, 
										lpSource, 
										dwMessageId, 
										dwLanguageId, 
										unsafe_lpBuffer, 
										nSize, 
										unsafe_arguments
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
				if (lpBuffer != null)
					global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
										unsafe_lpBuffer, 
										lpBuffer
									);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_lpBuffer != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_lpBuffer);
			}
		}

		// Signature, FormatMessage__2, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [EETypeRva:0x000400D8] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00040EE4] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__2(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					global::System.Text.StringBuilder lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			ushort* unsafe_lpBuffer = default(ushort*);
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			try
			{
				// Marshalling
				if (lpBuffer == null)
					unsafe_lpBuffer = null;
				else
				{
					unsafe_lpBuffer = (ushort*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(lpBuffer.Capacity * 2 
										+ 2)));
					if (unsafe_lpBuffer == null)
						throw new global::System.OutOfMemoryException();
				}
				fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
							&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
				{
					unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__2(
										dwFlags, 
										lpSource, 
										dwMessageId, 
										dwLanguageId, 
										unsafe_lpBuffer, 
										nSize, 
										unsafe_arguments
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
				if (lpBuffer != null)
					global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
										unsafe_lpBuffer, 
										lpBuffer
									);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_lpBuffer != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_lpBuffer);
			}
		}

		// Signature, FormatMessage__3, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [EETypeRva:0x000400D8] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00040EE4] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__3(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					global::System.Text.StringBuilder lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			ushort* unsafe_lpBuffer = default(ushort*);
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			try
			{
				// Marshalling
				if (lpBuffer == null)
					unsafe_lpBuffer = null;
				else
				{
					unsafe_lpBuffer = (ushort*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(lpBuffer.Capacity * 2 
										+ 2)));
					if (unsafe_lpBuffer == null)
						throw new global::System.OutOfMemoryException();
				}
				fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
							&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
				{
					unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__3(
										dwFlags, 
										lpSource, 
										dwMessageId, 
										dwLanguageId, 
										unsafe_lpBuffer, 
										nSize, 
										unsafe_arguments
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
				if (lpBuffer != null)
					global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
										unsafe_lpBuffer, 
										lpBuffer
									);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_lpBuffer != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_lpBuffer);
			}
		}

		// Signature, GetCurrentThread, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCurrentThread")]
		public static global::System.IntPtr GetCurrentThread()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCurrentThread();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, GetCurrentProcess, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCurrentProcess")]
		public static global::System.IntPtr GetCurrentProcess()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCurrentProcess();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, CloseHandle, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "CloseHandle")]
		public static bool CloseHandle(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.CloseHandle(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CheckTokenMembershipEx, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0003ECA4] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "CheckTokenMembershipEx")]
		public static bool CheckTokenMembershipEx(
					global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows TokenHandle, 
					byte[] SidToCheck, 
					uint Flags, 
					ref bool IsMember)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_SidToCheck;
			int unsafe_IsMember;
			int unsafe___value;
			// Marshalling
			TokenHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_SidToCheck = ((SidToCheck != null 
						&& SidToCheck.Length == 0) ? new byte[1] : SidToCheck))
			{
				unsafe_SidToCheck = (byte*)pinned_SidToCheck;
				unsafe_IsMember = (IsMember ? 1 : 0);
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.CheckTokenMembershipEx(
									TokenHandle.DangerousGetHandle(), 
									unsafe_SidToCheck, 
									Flags, 
									&(unsafe_IsMember)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				IsMember = unsafe_IsMember != 0;
			}
			if (addRefed)
				TokenHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, LocalAlloc__0, [fwd] [return] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "LocalAlloc")]
		public static global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Security_Principal_Windows LocalAlloc__0(
					int uFlags, 
					global::System.UIntPtr sizetdwBytes)
		{
			// Setup
			global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Security_Principal_Windows __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Security_Principal_Windows();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.LocalAlloc__0(
								uFlags, 
								sizetdwBytes
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, LocalFree__0, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "LocalFree")]
		public static global::System.IntPtr LocalFree__0(global::System.IntPtr handle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.LocalFree__0(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, SetFileCompletionNotificationModes, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B90] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [EETypeRva:0x00041308] __Interop_Kernel32_FileCompletionNotificationModes__System_Net_Sockets__Interop_Kernel32_FileCompletionNotificationModes__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "SetFileCompletionNotificationModes")]
		public static bool SetFileCompletionNotificationModes(
					global::System.Runtime.InteropServices.SafeHandle handle, 
					global::_.Interop_Kernel32_FileCompletionNotificationModes__System_Net_Sockets flags)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.SetFileCompletionNotificationModes(
								handle.DangerousGetHandle(), 
								flags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-robuffer-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll
	{
		// Signature, RoGetBufferMarshaler, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041D64] System_Runtime_InteropServices_IMarshal__System_Runtime_WindowsRuntime__System_Runtime_InteropServices__IMarshal__System_Runtime_WindowsRuntime *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Runtime.WindowsRuntime, Version=4.0.14.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "Interop+mincore", "RoGetBufferMarshaler")]
		public static int RoGetBufferMarshaler(out global::System_Runtime_InteropServices.IMarshal__System_Runtime_WindowsRuntime bufferMarshalerPtr)
		{
			// Setup
			void* unsafe_bufferMarshalerPtr = default(void*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_bufferMarshalerPtr = null;
				// Call to native method
				unsafe___value = global::__Interop.api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes.RoGetBufferMarshaler(&(unsafe_bufferMarshalerPtr));
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				bufferMarshalerPtr = (global::System_Runtime_InteropServices.IMarshal__System_Runtime_WindowsRuntime)global::System.Runtime.InteropServices.McgMarshal.ComInterfaceToObject(
									((global::System.IntPtr)unsafe_bufferMarshalerPtr), 
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("System.Runtime.InteropServices.IMarshal,System.Runtime.WindowsRuntime, Version=4.0.14.0, Culture=neutral, Public" +
											"KeyToken=b77a5c561934e089")
								);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_bufferMarshalerPtr)));
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-com-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll
	{
		// Signature, CoCreateInstance, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] byte___ptrunsigned char *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.StackTraceGenerator.StackTraceGenerator", "CoCreateInstance")]
		public static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					out global::System.IntPtr ppv)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_ppv = &(ppv))
			{
				// Call to native method
				unsafe___value = global::__Interop.api_ms_win_core_com_l1_1_0_dll_PInvokes.CoCreateInstance(
									((byte*)rclsid), 
									pUnkOuter, 
									dwClsContext, 
									((byte*)riid), 
									pinned_ppv
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'advapi32.dll'
	/// </summary>
	public unsafe static partial class advapi32_dll
	{
		// Signature, CryptAcquireContext, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000413DC] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] Internal_Cryptography_Pal_Native_CryptAcquireContextFlags__System_Security_Cryptography_X509Certificates__CryptAcquireContextFlags__System_Security_Cryptography_X509Certificates, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+cryptoapi", "CryptAcquireContext")]
		public static bool CryptAcquireContext(
					out global::System.IntPtr psafeProvHandle, 
					char* pszContainer, 
					char* pszProvider, 
					int dwProvType, 
					global::Internal_Cryptography_Pal_Native.CryptAcquireContextFlags__System_Security_Cryptography_X509Certificates dwFlags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_psafeProvHandle = &(psafeProvHandle))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptAcquireContext(
									pinned_psafeProvHandle, 
									((ushort*)pszContainer), 
									((ushort*)pszProvider), 
									dwProvType, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptGetKeyParam, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B90] System_Security_Cryptography_SafeKeyHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptGetKeyParam")]
		public static bool CryptGetKeyParam(
					global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp safeKeyHandle, 
					int dwParam, 
					byte[] pbData, 
					ref int pdwDataLen, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_pbData;
			int unsafe___value;
			// Marshalling
			safeKeyHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_pbData = ((pbData != null 
						&& pbData.Length == 0) ? new byte[1] : pbData))
			{
				unsafe_pbData = (byte*)pinned_pbData;
				fixed (int* pinned_pdwDataLen = &(pdwDataLen))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptGetKeyParam(
										safeKeyHandle.DangerousGetHandle(), 
										dwParam, 
										unsafe_pbData, 
										pinned_pdwDataLen, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			if (addRefed)
				safeKeyHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptGetDefaultProvider, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [EETypeRva:0x000400D8] System_Text_StringBuilder__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptGetDefaultProvider")]
		public static bool CryptGetDefaultProvider(
					int dwProvType, 
					global::System.IntPtr pdwReserved, 
					int dwFlags, 
					global::System.Text.StringBuilder pszProvName, 
					ref int IntPtrProvName)
		{
			// Setup
			ushort* unsafe_pszProvName = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (pszProvName == null)
					unsafe_pszProvName = null;
				else
				{
					unsafe_pszProvName = (ushort*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(pszProvName.Capacity * 2 
										+ 2)));
					if (unsafe_pszProvName == null)
						throw new global::System.OutOfMemoryException();
				}
				if (unsafe_pszProvName != null)
					global::System.Runtime.InteropServices.McgMarshal.StringBuilderToUnicodeString(
										pszProvName, 
										unsafe_pszProvName
									);
				fixed (int* pinned_IntPtrProvName = &(IntPtrProvName))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptGetDefaultProvider(
										dwProvType, 
										pdwReserved, 
										dwFlags, 
										unsafe_pszProvName, 
										pinned_IntPtrProvName
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
				if (pszProvName != null)
					global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
										unsafe_pszProvName, 
										pszProvName
									);
				// Return
				return unsafe___value != 0;
			}
			finally
			{
				// Cleanup
				if (unsafe_pszProvName != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_pszProvName);
			}
		}

		// Signature, CryptAcquireContext__0, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x0003FF10] string__wchar_t *, [fwd] [in] [EETypeRva:0x0003FF10] string__wchar_t *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptAcquireContext")]
		public static bool CryptAcquireContext__0(
					out global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp psafeProvHandle, 
					string pszContainer, 
					string pszProvider, 
					int dwProvType, 
					uint dwFlags)
		{
			// Setup
			global::System.IntPtr unsafe_psafeProvHandle;
			ushort* unsafe_pszContainer = default(ushort*);
			ushort* unsafe_pszProvider = default(ushort*);
			int unsafe___value;
			// Marshalling
			psafeProvHandle = new global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp();
			unsafe_psafeProvHandle = psafeProvHandle.DangerousGetHandle();
			fixed (char* pinned_pszContainer = pszContainer)
			{
				unsafe_pszContainer = (ushort*)pinned_pszContainer;
				fixed (char* pinned_pszProvider = pszProvider)
				{
					unsafe_pszProvider = (ushort*)pinned_pszProvider;
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptAcquireContext__0(
										&(unsafe_psafeProvHandle), 
										unsafe_pszContainer, 
										unsafe_pszProvider, 
										dwProvType, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								psafeProvHandle, 
								unsafe_psafeProvHandle
							);
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptGetProvParam, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B90] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptGetProvParam")]
		public static bool CryptGetProvParam(
					global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp safeProvHandle, 
					int dwParam, 
					byte[] pbData, 
					ref int dwDataLen, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_pbData;
			int unsafe___value;
			// Marshalling
			safeProvHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_pbData = ((pbData != null 
						&& pbData.Length == 0) ? new byte[1] : pbData))
			{
				unsafe_pbData = (byte*)pinned_pbData;
				fixed (int* pinned_dwDataLen = &(dwDataLen))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptGetProvParam(
										safeProvHandle.DangerousGetHandle(), 
										dwParam, 
										unsafe_pbData, 
										pinned_dwDataLen, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			if (addRefed)
				safeProvHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, _CryptGetUserKey, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B90] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] System_Security_Cryptography_SafeKeyHandle__System_Security_Cryptography_Csp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "_CryptGetUserKey")]
		public static bool _CryptGetUserKey(
					global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp safeProvHandle, 
					int dwKeySpec, 
					out global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp safeKeyHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_safeKeyHandle;
			int unsafe___value;
			// Marshalling
			safeProvHandle.DangerousAddRef(ref addRefed);
			safeKeyHandle = new global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp();
			unsafe_safeKeyHandle = safeKeyHandle.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes._CryptGetUserKey(
								safeProvHandle.DangerousGetHandle(), 
								dwKeySpec, 
								&(unsafe_safeKeyHandle)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								safeKeyHandle, 
								unsafe_safeKeyHandle
							);
			if (addRefed)
				safeProvHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptDestroyKey, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptDestroyKey")]
		public static bool CryptDestroyKey(global::System.IntPtr hKey)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptDestroyKey(hKey);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptReleaseContext, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptReleaseContext")]
		public static bool CryptReleaseContext(
					global::System.IntPtr safeProvHandle, 
					int dwFlags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptReleaseContext(
								safeProvHandle, 
								dwFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, _CryptImportKey, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B90] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041B90] System_Security_Cryptography_SafeKeyHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] System_Security_Cryptography_SafeKeyHandle__System_Security_Cryptography_Csp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "_CryptImportKey")]
		public static bool _CryptImportKey(
					global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp hProv, 
					byte[] pbData, 
					int dwDataLen, 
					global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp hPubKey, 
					int dwFlags, 
					out global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp phKey)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_pbData;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_phKey;
			int unsafe___value;
			// Marshalling
			hProv.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_pbData = ((pbData != null 
						&& pbData.Length == 0) ? new byte[1] : pbData))
			{
				unsafe_pbData = (byte*)pinned_pbData;
				hPubKey.DangerousAddRef(ref addRefed_1);
				phKey = new global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp();
				unsafe_phKey = phKey.DangerousGetHandle();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes._CryptImportKey(
									hProv.DangerousGetHandle(), 
									unsafe_pbData, 
									dwDataLen, 
									hPubKey.DangerousGetHandle(), 
									dwFlags, 
									&(unsafe_phKey)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									phKey, 
									unsafe_phKey
								);
				if (addRefed_1)
					hPubKey.DangerousRelease();
			}
			if (addRefed)
				hProv.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptSetProvParamIndirectPtr, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B90] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x00041308] Internal_NativeCrypto_CapiHelper_CryptGetProvParam__System_Security_Cryptography_Csp__CapiHelper_CryptGetProvParam__System_Security_Cryptography_Csp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptSetProvParamIndirectPtr")]
		public static bool CryptSetProvParamIndirectPtr(
					global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp safeProvHandle, 
					global::Internal_NativeCrypto.CapiHelper_CryptGetProvParam__System_Security_Cryptography_Csp dwParam, 
					ref global::System.IntPtr pbData, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			safeProvHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_pbData = &(pbData))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptSetProvParamIndirectPtr(
									safeProvHandle.DangerousGetHandle(), 
									dwParam, 
									pinned_pbData, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				safeProvHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptSetProvParam, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B90] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x00041308] Internal_NativeCrypto_CapiHelper_CryptGetProvParam__System_Security_Cryptography_Csp__CapiHelper_CryptGetProvParam__System_Security_Cryptography_Csp, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptSetProvParam")]
		public static bool CryptSetProvParam(
					global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp safeProvHandle, 
					global::Internal_NativeCrypto.CapiHelper_CryptGetProvParam__System_Security_Cryptography_Csp dwParam, 
					global::System.IntPtr pbData, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			safeProvHandle.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptSetProvParam(
								safeProvHandle.DangerousGetHandle(), 
								dwParam, 
								pbData, 
								dwFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				safeProvHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, _CryptGenKey, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B90] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] System_Security_Cryptography_SafeKeyHandle__System_Security_Cryptography_Csp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "_CryptGenKey")]
		public static bool _CryptGenKey(
					global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp safeProvHandle, 
					int Algid, 
					int dwFlags, 
					out global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp safeKeyHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_safeKeyHandle;
			int unsafe___value;
			// Marshalling
			safeProvHandle.DangerousAddRef(ref addRefed);
			safeKeyHandle = new global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp();
			unsafe_safeKeyHandle = safeKeyHandle.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes._CryptGenKey(
								safeProvHandle.DangerousGetHandle(), 
								Algid, 
								dwFlags, 
								&(unsafe_safeKeyHandle)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								safeKeyHandle, 
								unsafe_safeKeyHandle
							);
			if (addRefed)
				safeProvHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, RevertToSelf, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "RevertToSelf")]
		public static bool RevertToSelf()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.RevertToSelf();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, ImpersonateLoggedOnUser, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "ImpersonateLoggedOnUser")]
		public static bool ImpersonateLoggedOnUser(global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows userToken)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			userToken.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.ImpersonateLoggedOnUser(userToken.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				userToken.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, OpenThreadToken, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] System_Security_Principal_TokenAccessLevels__System_Security_Principal_Windows__TokenAccessLevels__System_Security_Principal_Windows, [fwd] [in] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "OpenThreadToken")]
		public static bool OpenThreadToken(
					global::System.IntPtr ThreadHandle, 
					global::System_Security_Principal.TokenAccessLevels__System_Security_Principal_Windows dwDesiredAccess, 
					bool bOpenAsSelf, 
					out global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows phThreadToken)
		{
			// Setup
			global::System.IntPtr unsafe_phThreadToken;
			int unsafe___value;
			// Marshalling
			phThreadToken = new global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows();
			unsafe_phThreadToken = phThreadToken.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.OpenThreadToken(
								ThreadHandle, 
								dwDesiredAccess, 
								(bOpenAsSelf ? 1 : 0), 
								&(unsafe_phThreadToken)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phThreadToken, 
								unsafe_phThreadToken
							);
			// Return
			return unsafe___value != 0;
		}

		// Signature, OpenProcessToken, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] System_Security_Principal_TokenAccessLevels__System_Security_Principal_Windows__TokenAccessLevels__System_Security_Principal_Windows, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "OpenProcessToken")]
		public static bool OpenProcessToken(
					global::System.IntPtr ProcessToken, 
					global::System_Security_Principal.TokenAccessLevels__System_Security_Principal_Windows DesiredAccess, 
					out global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows TokenHandle)
		{
			// Setup
			global::System.IntPtr unsafe_TokenHandle;
			int unsafe___value;
			// Marshalling
			TokenHandle = new global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows();
			unsafe_TokenHandle = TokenHandle.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.OpenProcessToken(
								ProcessToken, 
								DesiredAccess, 
								&(unsafe_TokenHandle)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								TokenHandle, 
								unsafe_TokenHandle
							);
			// Return
			return unsafe___value != 0;
		}

		// Signature, LsaNtStatusToWinError, [fwd] [return] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaNtStatusToWinError")]
		public static uint LsaNtStatusToWinError(uint status)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaNtStatusToWinError(status);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DuplicateTokenEx, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "DuplicateTokenEx")]
		public static bool DuplicateTokenEx(
					global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows hExistingToken, 
					uint dwDesiredAccess, 
					global::System.IntPtr lpTokenAttributes, 
					uint ImpersonationLevel, 
					uint TokenType, 
					ref global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows phNewToken)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_phNewToken;
			global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows out_phNewToken;
			global::System.IntPtr prev_unsafe_phNewToken;
			int unsafe___value;
			// Marshalling
			hExistingToken.DangerousAddRef(ref addRefed);
			phNewToken.DangerousAddRef(ref addRefed_1);
			unsafe_phNewToken = phNewToken.DangerousGetHandle();
			prev_unsafe_phNewToken = unsafe_phNewToken;
			out_phNewToken = new global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.DuplicateTokenEx(
								hExistingToken.DangerousGetHandle(), 
								dwDesiredAccess, 
								lpTokenAttributes, 
								ImpersonationLevel, 
								TokenType, 
								&(unsafe_phNewToken)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed_1)
				phNewToken.DangerousRelease();
			if (prev_unsafe_phNewToken != unsafe_phNewToken)
			{
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									out_phNewToken, 
									unsafe_phNewToken
								);
				phNewToken = out_phNewToken;
			}
			if (addRefed)
				hExistingToken.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetTokenInformation, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "GetTokenInformation")]
		public static bool GetTokenInformation(
					global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows TokenHandle, 
					uint TokenInformationClass, 
					global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Security_Principal_Windows TokenInformation, 
					uint TokenInformationLength, 
					out uint ReturnLength)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			int unsafe___value;
			// Marshalling
			TokenHandle.DangerousAddRef(ref addRefed);
			TokenInformation.DangerousAddRef(ref addRefed_1);
			fixed (uint* pinned_ReturnLength = &(ReturnLength))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.GetTokenInformation(
									TokenHandle.DangerousGetHandle(), 
									TokenInformationClass, 
									TokenInformation.DangerousGetHandle(), 
									TokenInformationLength, 
									pinned_ReturnLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed_1)
				TokenInformation.DangerousRelease();
			if (addRefed)
				TokenHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, LsaLookupSids, [fwd] [return] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeLsaPolicyHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00040EE4] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeLsaMemoryHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeLsaMemoryHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaLookupSids")]
		public static uint LsaLookupSids(
					global::Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle__System_Security_Principal_Windows handle, 
					int count, 
					global::System.IntPtr[] sids, 
					ref global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows referencedDomains, 
					ref global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows names)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr* unsafe_sids;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_referencedDomains;
			global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows out_referencedDomains;
			global::System.IntPtr prev_unsafe_referencedDomains;
			bool addRefed_2 = false;
			global::System.IntPtr unsafe_names;
			global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows out_names;
			global::System.IntPtr prev_unsafe_names;
			uint unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_sids = ((sids != null 
						&& sids.Length == 0) ? new global::System.IntPtr[1] : sids))
			{
				unsafe_sids = (global::System.IntPtr*)pinned_sids;
				referencedDomains.DangerousAddRef(ref addRefed_1);
				unsafe_referencedDomains = referencedDomains.DangerousGetHandle();
				prev_unsafe_referencedDomains = unsafe_referencedDomains;
				out_referencedDomains = new global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows();
				names.DangerousAddRef(ref addRefed_2);
				unsafe_names = names.DangerousGetHandle();
				prev_unsafe_names = unsafe_names;
				out_names = new global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaLookupSids(
									handle.DangerousGetHandle(), 
									count, 
									unsafe_sids, 
									&(unsafe_referencedDomains), 
									&(unsafe_names)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (addRefed_2)
					names.DangerousRelease();
				if (prev_unsafe_names != unsafe_names)
				{
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										out_names, 
										unsafe_names
									);
					names = out_names;
				}
				if (addRefed_1)
					referencedDomains.DangerousRelease();
				if (prev_unsafe_referencedDomains != unsafe_referencedDomains)
				{
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										out_referencedDomains, 
										unsafe_referencedDomains
									);
					referencedDomains = out_referencedDomains;
				}
			}
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, LsaLookupNames2, [fwd] [return] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeLsaPolicyHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00040944] rg___Interop_UNICODE_STRING__System_Security_Principal_Windows____Interop_UNICODE_STRING__System_Security_Principal_Windows *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeLsaMemoryHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeLsaMemoryHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaLookupNames2")]
		public static uint LsaLookupNames2(
					global::Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle__System_Security_Principal_Windows handle, 
					int flags, 
					int count, 
					global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows[] names, 
					ref global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows referencedDomains, 
					ref global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows sids)
		{
			// Setup
			bool addRefed = false;
			global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.UnsafeType* unsafe_names = default(global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.UnsafeType*);
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_referencedDomains;
			global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows out_referencedDomains;
			global::System.IntPtr prev_unsafe_referencedDomains;
			bool addRefed_2 = false;
			global::System.IntPtr unsafe_sids;
			global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows out_sids;
			global::System.IntPtr prev_unsafe_sids;
			uint unsafe___value;
			try
			{
				// Marshalling
				handle.DangerousAddRef(ref addRefed);
				if (names == null)
					unsafe_names = null;
				else
				{
					if (names != null)
						unsafe_names = (global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.UnsafeType*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(names.Length * sizeof(global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.UnsafeType))));
					if (names != null)
						for (uint mcgIdx = 0; (mcgIdx < names.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x000405EC] __Interop_UNICODE_STRING__System_Security_Principal_Windows____Interop_UNICODE_STRING__System_Security_Principal_Windows names
							global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.Marshal__SafeToUnsafe(
												ref names[mcgIdx], 
												out unsafe_names[mcgIdx]
											);
						}
				}
				referencedDomains.DangerousAddRef(ref addRefed_1);
				unsafe_referencedDomains = referencedDomains.DangerousGetHandle();
				prev_unsafe_referencedDomains = unsafe_referencedDomains;
				out_referencedDomains = new global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows();
				sids.DangerousAddRef(ref addRefed_2);
				unsafe_sids = sids.DangerousGetHandle();
				prev_unsafe_sids = unsafe_sids;
				out_sids = new global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaLookupNames2(
									handle.DangerousGetHandle(), 
									flags, 
									count, 
									unsafe_names, 
									&(unsafe_referencedDomains), 
									&(unsafe_sids)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (addRefed_2)
					sids.DangerousRelease();
				if (prev_unsafe_sids != unsafe_sids)
				{
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										out_sids, 
										unsafe_sids
									);
					sids = out_sids;
				}
				if (addRefed_1)
					referencedDomains.DangerousRelease();
				if (prev_unsafe_referencedDomains != unsafe_referencedDomains)
				{
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										out_referencedDomains, 
										unsafe_referencedDomains
									);
					referencedDomains = out_referencedDomains;
				}
				if (addRefed)
					handle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_names != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < names.Length); mcgIdx_1++)
					{
						// [fwd] [in] [out] [optional] [EETypeRva:0x000405EC] __Interop_UNICODE_STRING__System_Security_Principal_Windows____Interop_UNICODE_STRING__System_Security_Principal_Windows names
						global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.Cleanup__Unsafe(ref unsafe_names[mcgIdx_1]);
					}
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_names);
			}
		}

		// Signature, LsaOpenPolicy, [fwd] [return] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x0003FF10] string__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_LSA_OBJECT_ATTRIBUTES__System_Security_Principal_Windows____Interop_LSA_OBJECT_ATTRIBUTES__System_Security_Principal_Windows, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeLsaPolicyHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaOpenPolicy")]
		public static uint LsaOpenPolicy(
					string systemName, 
					ref global::_.Interop_LSA_OBJECT_ATTRIBUTES__System_Security_Principal_Windows attributes, 
					int accessMask, 
					out global::Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle__System_Security_Principal_Windows handle)
		{
			// Setup
			ushort* unsafe_systemName = default(ushort*);
			global::System.IntPtr unsafe_handle;
			uint unsafe___value;
			// Marshalling
			fixed (char* pinned_systemName = systemName)
			{
				unsafe_systemName = (ushort*)pinned_systemName;
				fixed (global::_.Interop_LSA_OBJECT_ATTRIBUTES__System_Security_Principal_Windows* pinned_attributes = &(attributes))
				{
					handle = new global::Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle__System_Security_Principal_Windows();
					unsafe_handle = handle.DangerousGetHandle();
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaOpenPolicy(
										unsafe_systemName, 
										pinned_attributes, 
										accessMask, 
										&(unsafe_handle)
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										handle, 
										unsafe_handle
									);
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, LsaClose, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaClose")]
		public static int LsaClose(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaClose(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, LsaFreeMemory, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaFreeMemory")]
		public static int LsaFreeMemory(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaFreeMemory(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'ws2_32.dll'
	/// </summary>
	public unsafe static partial class ws2_32_dll
	{
		// Signature, WSAGetOverlappedResult, [fwd] [return] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B90] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_Threading_NativeOverlapped__System_Private_CoreLib___ptrSystem_Threading__NativeOverlapped__System_Private_CoreLib *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x0003ECA4] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041308] System_Net_Sockets_SocketFlags__System_Net_Sockets__SocketFlags__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSAGetOverlappedResult")]
		public static bool WSAGetOverlappedResult(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					out uint bytesTransferred, 
					bool wait, 
					out global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (uint* pinned_bytesTransferred = &(bytesTransferred))
				fixed (global::System_Net_Sockets.SocketFlags__System_Net_Sockets* pinned_socketFlags = &(socketFlags))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSAGetOverlappedResult(
										socketHandle.DangerousGetHandle(), 
										((global::System_Threading.NativeOverlapped__System_Private_CoreLib*)overlapped), 
										pinned_bytesTransferred, 
										(wait ? 1 : 0), 
										pinned_socketFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, setsockopt, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00041B90] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "setsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					ref global::System.IntPtr pointer, 
					int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_pointer = &(pointer))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.setsockopt(
									socketHandle.DangerousGetHandle(), 
									optionLevel, 
									optionName, 
									pinned_pointer, 
									optionLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, setsockopt__0, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00041B90] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "setsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__0(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					byte[] optionValue, 
					int optionLength)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_optionValue;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_optionValue = ((optionValue != null 
						&& optionValue.Length == 0) ? new byte[1] : optionValue))
			{
				unsafe_optionValue = (byte*)pinned_optionValue;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.setsockopt__0(
									socketHandle.DangerousGetHandle(), 
									optionLevel, 
									optionName, 
									unsafe_optionValue, 
									optionLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getsockname, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00041B90] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [out] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getsockname")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockname(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					byte[] socketAddress, 
					ref int socketAddressSize)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_socketAddress;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_socketAddress = ((socketAddress != null 
						&& socketAddress.Length == 0) ? new byte[1] : socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				fixed (int* pinned_socketAddressSize = &(socketAddressSize))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getsockname(
										socketHandle.DangerousGetHandle(), 
										unsafe_socketAddress, 
										pinned_socketAddressSize
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getpeername, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00041B90] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [out] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getpeername")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getpeername(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					byte[] socketAddress, 
					ref int socketAddressSize)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_socketAddress;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_socketAddress = ((socketAddress != null 
						&& socketAddress.Length == 0) ? new byte[1] : socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				fixed (int* pinned_socketAddressSize = &(socketAddressSize))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getpeername(
										socketHandle.DangerousGetHandle(), 
										unsafe_socketAddress, 
										pinned_socketAddressSize
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, WSAStartup, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000413DC] short__short, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000405EC] __Interop_Winsock_WSAData__System_Net_NameResolution____Interop_Winsock_WSAData__System_Net_NameResolution, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSAStartup")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAStartup(
					short wVersionRequested, 
					out global::_.Interop_Winsock_WSAData__System_Net_NameResolution lpWSAData)
		{
			// Setup
			global::_.Interop_Winsock_WSAData__System_Net_NameResolution__Impl.UnsafeType unsafe_lpWSAData = default(global::_.Interop_Winsock_WSAData__System_Net_NameResolution__Impl.UnsafeType);
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			unsafe_lpWSAData = default(global::_.Interop_Winsock_WSAData__System_Net_NameResolution__Impl.UnsafeType);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSAStartup(
								wVersionRequested, 
								&(unsafe_lpWSAData)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::_.Interop_Winsock_WSAData__System_Net_NameResolution__Impl.Marshal__UnsafeToSafe(
								ref unsafe_lpWSAData, 
								out lpWSAData
							);
			// Return
			return unsafe___value;
		}

		// Signature, select, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [EETypeRva:0x00040EE4] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [EETypeRva:0x00040EE4] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [EETypeRva:0x00040EE4] rg_System_IntPtr____w64 int *, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_Winsock_TimeValue__System_Net_Sockets____Interop_Winsock_TimeValue__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "select")]
		public static int select(
					int ignoredParameter, 
					global::System.IntPtr[] readfds, 
					global::System.IntPtr[] writefds, 
					global::System.IntPtr[] exceptfds, 
					ref global::_.Interop_Winsock_TimeValue__System_Net_Sockets timeout)
		{
			// Setup
			global::System.IntPtr* unsafe_readfds;
			global::System.IntPtr* unsafe_writefds;
			global::System.IntPtr* unsafe_exceptfds;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_readfds = ((readfds != null 
						&& readfds.Length == 0) ? new global::System.IntPtr[1] : readfds))
			{
				unsafe_readfds = (global::System.IntPtr*)pinned_readfds;
				fixed (global::System.IntPtr* pinned_writefds = ((writefds != null 
							&& writefds.Length == 0) ? new global::System.IntPtr[1] : writefds))
				{
					unsafe_writefds = (global::System.IntPtr*)pinned_writefds;
					fixed (global::System.IntPtr* pinned_exceptfds = ((exceptfds != null 
								&& exceptfds.Length == 0) ? new global::System.IntPtr[1] : exceptfds))
					{
						unsafe_exceptfds = (global::System.IntPtr*)pinned_exceptfds;
						fixed (global::_.Interop_Winsock_TimeValue__System_Net_Sockets* pinned_timeout = &(timeout))
						{
							global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
							// Call to native method
							unsafe___value = global::__Interop.ws2_32_dll_PInvokes.select(
												ignoredParameter, 
												unsafe_readfds, 
												unsafe_writefds, 
												unsafe_exceptfds, 
												pinned_timeout
											);
							global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
							global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
						}
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, select__0, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [EETypeRva:0x00040EE4] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [EETypeRva:0x00040EE4] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [EETypeRva:0x00040EE4] rg_System_IntPtr____w64 int *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "select")]
		public static int select__0(
					int ignoredParameter, 
					global::System.IntPtr[] readfds, 
					global::System.IntPtr[] writefds, 
					global::System.IntPtr[] exceptfds, 
					global::System.IntPtr nullTimeout)
		{
			// Setup
			global::System.IntPtr* unsafe_readfds;
			global::System.IntPtr* unsafe_writefds;
			global::System.IntPtr* unsafe_exceptfds;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_readfds = ((readfds != null 
						&& readfds.Length == 0) ? new global::System.IntPtr[1] : readfds))
			{
				unsafe_readfds = (global::System.IntPtr*)pinned_readfds;
				fixed (global::System.IntPtr* pinned_writefds = ((writefds != null 
							&& writefds.Length == 0) ? new global::System.IntPtr[1] : writefds))
				{
					unsafe_writefds = (global::System.IntPtr*)pinned_writefds;
					fixed (global::System.IntPtr* pinned_exceptfds = ((exceptfds != null 
								&& exceptfds.Length == 0) ? new global::System.IntPtr[1] : exceptfds))
					{
						unsafe_exceptfds = (global::System.IntPtr*)pinned_exceptfds;
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.ws2_32_dll_PInvokes.select__0(
											ignoredParameter, 
											unsafe_readfds, 
											unsafe_writefds, 
											unsafe_exceptfds, 
											nullTimeout
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, ioctlsocket, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00041B90] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "ioctlsocket")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives ioctlsocket(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					int cmd, 
					ref int argp)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (int* pinned_argp = &(argp))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.ioctlsocket(
									socketHandle.DangerousGetHandle(), 
									cmd, 
									pinned_argp
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, shutdown, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00041B90] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "shutdown")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives shutdown(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					int how)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.shutdown(
								socketHandle.DangerousGetHandle(), 
								how
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, setsockopt__1, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00041B90] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "setsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__1(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					ref int optionValue, 
					int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (int* pinned_optionValue = &(optionValue))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.setsockopt__1(
									socketHandle.DangerousGetHandle(), 
									optionLevel, 
									optionName, 
									pinned_optionValue, 
									optionLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, recv, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_SocketFlags__System_Net_Sockets__SocketFlags__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "recv")]
		public static int recv(
					global::System.IntPtr socketHandle, 
					byte* pinnedBuffer, 
					int len, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.recv(
								socketHandle, 
								((byte*)pinnedBuffer), 
								len, 
								socketFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, gethostbyname, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040008] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "gethostbyname")]
		public static global::System.IntPtr gethostbyname(string host)
		{
			// Setup
			byte* unsafe_host = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_host = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(host, false, true);
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.gethostbyname(unsafe_host);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_host);
			}
		}

		// Signature, WSAIoctl, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00041B90] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] System_Guid__System.Guid, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSAIoctl")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAIoctl(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					int ioControlCode, 
					ref global::System.Guid guid, 
					int guidSize, 
					out global::System.IntPtr funcPtr, 
					int funcPtrSize, 
					out int bytesTransferred, 
					global::System.IntPtr shouldBeNull, 
					global::System.IntPtr shouldBeNull2)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.Guid* pinned_guid = &(guid))
				fixed (global::System.IntPtr* pinned_funcPtr = &(funcPtr))
					fixed (int* pinned_bytesTransferred = &(bytesTransferred))
					{
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSAIoctl(
											socketHandle.DangerousGetHandle(), 
											ioControlCode, 
											pinned_guid, 
											guidSize, 
											pinned_funcPtr, 
											funcPtrSize, 
											pinned_bytesTransferred, 
											shouldBeNull, 
											shouldBeNull2
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, GetAddrInfoW, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x0003FF10] string__wchar_t *, [fwd] [in] [EETypeRva:0x0003FF10] string__wchar_t *, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x00041808] System_Net_Sockets_AddressInfo__System_Net_NameResolution__System_Net_Sockets__AddressInfo__System_Net_NameResolution, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] System_Net_Sockets_SafeFreeAddrInfo__System_Net_NameResolution____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "GetAddrInfoW")]
		public static int GetAddrInfoW(
					string nodename, 
					string servicename, 
					ref global::System_Net_Sockets.AddressInfo__System_Net_NameResolution hints, 
					out global::System.Net.Sockets.SafeFreeAddrInfo__System_Net_NameResolution handle)
		{
			// Setup
			ushort* unsafe_nodename = default(ushort*);
			ushort* unsafe_servicename = default(ushort*);
			global::System.IntPtr unsafe_handle;
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_nodename = nodename)
			{
				unsafe_nodename = (ushort*)pinned_nodename;
				fixed (char* pinned_servicename = servicename)
				{
					unsafe_servicename = (ushort*)pinned_servicename;
					fixed (global::System_Net_Sockets.AddressInfo__System_Net_NameResolution* pinned_hints = &(hints))
					{
						handle = new global::System.Net.Sockets.SafeFreeAddrInfo__System_Net_NameResolution();
						unsafe_handle = handle.DangerousGetHandle();
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.ws2_32_dll_PInvokes.GetAddrInfoW(
											unsafe_nodename, 
											unsafe_servicename, 
											pinned_hints, 
											&(unsafe_handle)
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
						global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
											handle, 
											unsafe_handle
										);
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, WSASocketW, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_AddressFamily__System_Net_Primitives__AddressFamily__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_SocketType__System_Net_Sockets__SocketType__System_Net_Sockets, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSASocketW")]
		public static global::System.IntPtr WSASocketW(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Sockets.SocketType__System_Net_Sockets socketType, 
					int protocolType, 
					global::System.IntPtr protocolInfo, 
					int group, 
					int flags)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSASocketW(
								addressFamily, 
								socketType, 
								protocolType, 
								protocolInfo, 
								group, 
								flags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, closesocket, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "closesocket")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives closesocket(global::System.IntPtr socketHandle)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.closesocket(socketHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, WSASocketW__0, [fwd] [return] [EETypeRva:0x00041B90] System_Net_Sockets_SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_AddressFamily__System_Net_Primitives__AddressFamily__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_SocketType__System_Net_Sockets__SocketType__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_ProtocolType__System_Net_Sockets__ProtocolType__System_Net_Sockets, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x00041308] __Interop_Winsock_SocketConstructorFlags__System_Net_Sockets__Interop_Winsock_SocketConstructorFlags__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSASocketW")]
		public static global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets WSASocketW__0(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Sockets.SocketType__System_Net_Sockets socketType, 
					global::System_Net_Sockets.ProtocolType__System_Net_Sockets protocolType, 
					global::System.IntPtr protocolInfo, 
					uint group, 
					global::_.Interop_Winsock_SocketConstructorFlags__System_Net_Sockets flags)
		{
			// Setup
			global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSASocketW__0(
								addressFamily, 
								socketType, 
								protocolType, 
								protocolInfo, 
								group, 
								flags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, WSAConnect, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSAConnect")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAConnect(
					global::System.IntPtr socketHandle, 
					byte[] socketAddress, 
					int socketAddressSize, 
					global::System.IntPtr inBuffer, 
					global::System.IntPtr outBuffer, 
					global::System.IntPtr sQOS, 
					global::System.IntPtr gQOS)
		{
			// Setup
			byte* unsafe_socketAddress;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			fixed (byte* pinned_socketAddress = ((socketAddress != null 
						&& socketAddress.Length == 0) ? new byte[1] : socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSAConnect(
									socketHandle, 
									unsafe_socketAddress, 
									socketAddressSize, 
									inBuffer, 
									outBuffer, 
									sQOS, 
									gQOS
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, listen, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00041B90] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "listen")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives listen(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					int backlog)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.listen(
								socketHandle.DangerousGetHandle(), 
								backlog
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, WSASocketW__1, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_AddressFamily__System_Net_Primitives__AddressFamily__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00041308] System_Net_Internals_SocketType__System_Net_NameResolution__SocketType__System_Net_NameResolution, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSASocketW")]
		public static global::System.IntPtr WSASocketW__1(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Internals.SocketType__System_Net_NameResolution socketType, 
					int protocolType, 
					global::System.IntPtr protocolInfo, 
					int group, 
					int flags)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSASocketW__1(
								addressFamily, 
								socketType, 
								protocolType, 
								protocolInfo, 
								group, 
								flags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, closesocket__0, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "closesocket")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives closesocket__0(global::System.IntPtr socketHandle)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.closesocket__0(socketHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, gethostname, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [out] [EETypeRva:0x000400D8] System_Text_StringBuilder__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "gethostname")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives gethostname(
					global::System.Text.StringBuilder hostName, 
					int bufferLength)
		{
			// Setup
			byte* unsafe_hostName = default(byte*);
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			try
			{
				// Marshalling
				if (hostName == null)
					unsafe_hostName = null;
				else
				{
					unsafe_hostName = (byte*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(hostName.Capacity * global::System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize 
										+ 2)));
					if (unsafe_hostName == null)
						throw new global::System.OutOfMemoryException();
				}
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.gethostname(
									unsafe_hostName, 
									bufferLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (hostName != null)
					global::System.Runtime.InteropServices.McgMarshal.AnsiStringToStringBuilder(
										unsafe_hostName, 
										hostName
									);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_hostName != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_hostName);
			}
		}

		// Signature, bind, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00041B90] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "bind")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives bind(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					byte[] socketAddress, 
					int socketAddressSize)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_socketAddress;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_socketAddress = ((socketAddress != null 
						&& socketAddress.Length == 0) ? new byte[1] : socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.bind(
									socketHandle.DangerousGetHandle(), 
									unsafe_socketAddress, 
									socketAddressSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getsockopt, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00041B90] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					out int optionValue, 
					ref int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (int* pinned_optionValue = &(optionValue))
				fixed (int* pinned_optionLength = &(optionLength))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getsockopt(
										socketHandle.DangerousGetHandle(), 
										optionLevel, 
										optionName, 
										pinned_optionValue, 
										pinned_optionLength
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, freeaddrinfo, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "freeaddrinfo")]
		public static void freeaddrinfo(global::System.IntPtr info)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.ws2_32_dll_PInvokes.freeaddrinfo(info);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, getsockopt__0, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00041B90] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_Winsock_Linger__System_Net_Sockets____Interop_Winsock_Linger__System_Net_Sockets, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__0(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					out global::_.Interop_Winsock_Linger__System_Net_Sockets optionValue, 
					ref int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (global::_.Interop_Winsock_Linger__System_Net_Sockets* pinned_optionValue = &(optionValue))
				fixed (int* pinned_optionLength = &(optionLength))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getsockopt__0(
										socketHandle.DangerousGetHandle(), 
										optionLevel, 
										optionName, 
										pinned_optionValue, 
										pinned_optionLength
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getsockopt__1, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00041B90] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_Winsock_IPMulticastRequest__System_Net_Sockets____Interop_Winsock_IPMulticastRequest__System_Net_Sockets, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__1(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					out global::_.Interop_Winsock_IPMulticastRequest__System_Net_Sockets optionValue, 
					ref int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (global::_.Interop_Winsock_IPMulticastRequest__System_Net_Sockets* pinned_optionValue = &(optionValue))
				fixed (int* pinned_optionLength = &(optionLength))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getsockopt__1(
										socketHandle.DangerousGetHandle(), 
										optionLevel, 
										optionName, 
										pinned_optionValue, 
										pinned_optionLength
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getsockopt__2, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00041B90] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000405EC] __Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets____Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__2(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					out global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets optionValue, 
					ref int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets__Impl.UnsafeType unsafe_optionValue = default(global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets__Impl.UnsafeType);
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			unsafe_optionValue = default(global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets__Impl.UnsafeType);
			fixed (int* pinned_optionLength = &(optionLength))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getsockopt__2(
									socketHandle.DangerousGetHandle(), 
									optionLevel, 
									optionName, 
									&(unsafe_optionValue), 
									pinned_optionLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets__Impl.Marshal__UnsafeToSafe(
								ref unsafe_optionValue, 
								out optionValue
							);
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, send, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_SocketFlags__System_Net_Sockets__SocketFlags__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "send")]
		public static int send(
					global::System.IntPtr socketHandle, 
					byte* pinnedBuffer, 
					int len, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.send(
								socketHandle, 
								((byte*)pinnedBuffer), 
								len, 
								socketFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, ioctlsocket__0, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "ioctlsocket")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives ioctlsocket__0(
					global::System.IntPtr handle, 
					int cmd, 
					ref int argp)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			fixed (int* pinned_argp = &(argp))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.ioctlsocket__0(
									handle, 
									cmd, 
									pinned_argp
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, setsockopt__2, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_Winsock_Linger__System_Net_Sockets____Interop_Winsock_Linger__System_Net_Sockets, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "setsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__2(
					global::System.IntPtr handle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					ref global::_.Interop_Winsock_Linger__System_Net_Sockets linger, 
					int optionLength)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			fixed (global::_.Interop_Winsock_Linger__System_Net_Sockets* pinned_linger = &(linger))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.setsockopt__2(
									handle, 
									optionLevel, 
									optionName, 
									pinned_linger, 
									optionLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, WSARecv, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_Net_Sockets_WSABuffer__System_Net_Sockets___ptrSystem_Net_Sockets__WSABuffer__System_Net_Sockets *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041308] System_Net_Sockets_SocketFlags__System_Net_Sockets__SocketFlags__System_Net_Sockets, [fwd] [in] [EETypeRva:0x000413DC] System_Threading_NativeOverlapped__System_Private_CoreLib___ptrSystem_Threading__NativeOverlapped__System_Private_CoreLib *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSARecv")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives WSARecv(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.WSABuffer__System_Net_Sockets* buffer, 
					int bufferCount, 
					out int bytesTransferred, 
					ref global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					global::System.IntPtr completionRoutine)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			fixed (int* pinned_bytesTransferred = &(bytesTransferred))
				fixed (global::System_Net_Sockets.SocketFlags__System_Net_Sockets* pinned_socketFlags = &(socketFlags))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSARecv(
										socketHandle, 
										((global::System_Net_Sockets.WSABuffer__System_Net_Sockets*)buffer), 
										bufferCount, 
										pinned_bytesTransferred, 
										pinned_socketFlags, 
										((global::System_Threading.NativeOverlapped__System_Private_CoreLib*)overlapped), 
										completionRoutine
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			// Return
			return unsafe___value;
		}

		// Signature, WSASend, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_Net_Sockets_WSABuffer__System_Net_Sockets___ptrSystem_Net_Sockets__WSABuffer__System_Net_Sockets *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] System_Net_Sockets_SocketFlags__System_Net_Sockets__SocketFlags__System_Net_Sockets, [fwd] [in] [EETypeRva:0x000413DC] System_Threading_NativeOverlapped__System_Private_CoreLib___ptrSystem_Threading__NativeOverlapped__System_Private_CoreLib *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSASend")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives WSASend(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.WSABuffer__System_Net_Sockets* buffers, 
					int bufferCount, 
					out int bytesTransferred, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					global::System.IntPtr completionRoutine)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			fixed (int* pinned_bytesTransferred = &(bytesTransferred))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSASend(
									socketHandle, 
									((global::System_Net_Sockets.WSABuffer__System_Net_Sockets*)buffers), 
									bufferCount, 
									pinned_bytesTransferred, 
									socketFlags, 
									((global::System_Threading.NativeOverlapped__System_Private_CoreLib*)overlapped), 
									completionRoutine
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, accept, [fwd] [return] [EETypeRva:0x00041B90] System_Net_Sockets_SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "accept")]
		public static global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets accept(
					global::System.IntPtr socketHandle, 
					byte[] socketAddress, 
					ref int socketAddressSize)
		{
			// Setup
			byte* unsafe_socketAddress;
			global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_socketAddress = ((socketAddress != null 
						&& socketAddress.Length == 0) ? new byte[1] : socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				fixed (int* pinned_socketAddressSize = &(socketAddressSize))
				{
					__value = new global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets();
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.accept(
										socketHandle, 
										unsafe_socketAddress, 
										pinned_socketAddressSize
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										__value, 
										unsafe___value
									);
				}
			}
			// Return
			return __value;
		}

		// Signature, GetNameInfoW, [fwd] [return] [EETypeRva:0x00041308] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [EETypeRva:0x000400D8] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [EETypeRva:0x000400D8] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "GetNameInfoW")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives GetNameInfoW(
					byte[] sa, 
					int salen, 
					global::System.Text.StringBuilder host, 
					int hostlen, 
					global::System.Text.StringBuilder serv, 
					int servlen, 
					int flags)
		{
			// Setup
			byte* unsafe_sa;
			ushort* unsafe_host = default(ushort*);
			ushort* unsafe_serv = default(ushort*);
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_sa = ((sa != null 
							&& sa.Length == 0) ? new byte[1] : sa))
				{
					unsafe_sa = (byte*)pinned_sa;
					if (host == null)
						unsafe_host = null;
					else
					{
						unsafe_host = (ushort*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(host.Capacity * 2 
											+ 2)));
						if (unsafe_host == null)
							throw new global::System.OutOfMemoryException();
					}
					if (serv == null)
						unsafe_serv = null;
					else
					{
						unsafe_serv = (ushort*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(serv.Capacity * 2 
											+ 2)));
						if (unsafe_serv == null)
							throw new global::System.OutOfMemoryException();
					}
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.GetNameInfoW(
										unsafe_sa, 
										salen, 
										unsafe_host, 
										hostlen, 
										unsafe_serv, 
										servlen, 
										flags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					if (serv != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_serv, 
											serv
										);
					if (host != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_host, 
											host
										);
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_host != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_host);
				if (unsafe_serv != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_serv);
			}
		}

		// Signature, gethostbyaddr, [fwd] [return] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] System_Net_Internals_ProtocolFamily__System_Net_NameResolution__ProtocolFamily__System_Net_NameResolution, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "gethostbyaddr")]
		public static global::System.IntPtr gethostbyaddr(
					ref int addr, 
					int len, 
					global::System_Net_Internals.ProtocolFamily__System_Net_NameResolution type)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (int* pinned_addr = &(addr))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.gethostbyaddr(
									pinned_addr, 
									len, 
									type
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'OleAut32'
	/// </summary>
	public unsafe static partial class OleAut32
	{
		// Signature, SysFreeString, [fwd] [return] [EETypeRva:0x00040374] void__void, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.LightweightInterop.MarshalExtensions", "SysFreeString")]
		public static void SysFreeString(global::System.IntPtr bstr)
		{
			// Marshalling
			// Call to native method
			global::__Interop.OleAut32_PInvokes.SysFreeString(bstr);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'ncrypt.dll'
	/// </summary>
	public unsafe static partial class ncrypt_dll
	{
		// Signature, NCryptOpenKey, [fwd] [return] [EETypeRva:0x00041308] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeNCryptProviderHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeNCryptKeyHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x0003FF10] string__wchar_t *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] System_Security_Cryptography_CngKeyOpenOptions__System_Security_Cryptography_Cng__CngKeyOpenOptions__System_Security_Cryptography_Cng, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptOpenKey")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptOpenKey(
					global::Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle__System_Security_Cryptography_Cng hProvider, 
					out global::Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle__System_Security_Cryptography_Cng phKey, 
					string pszKeyName, 
					int dwLegacyKeySpec, 
					global::System_Security_Cryptography.CngKeyOpenOptions__System_Security_Cryptography_Cng dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_phKey;
			ushort* unsafe_pszKeyName = default(ushort*);
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			hProvider.DangerousAddRef(ref addRefed);
			phKey = new global::Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle__System_Security_Cryptography_Cng();
			unsafe_phKey = phKey.DangerousGetHandle();
			fixed (char* pinned_pszKeyName = pszKeyName)
			{
				unsafe_pszKeyName = (ushort*)pinned_pszKeyName;
				// Call to native method
				unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptOpenKey(
									hProvider.DangerousGetHandle(), 
									&(unsafe_phKey), 
									unsafe_pszKeyName, 
									dwLegacyKeySpec, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phKey, 
								unsafe_phKey
							);
			if (addRefed)
				hProvider.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptDeleteKey, [fwd] [return] [EETypeRva:0x00041308] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeNCryptKeyHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptDeleteKey")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptDeleteKey(
					global::Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle__System_Security_Cryptography_Cng hKey, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptDeleteKey(
								hKey.DangerousGetHandle(), 
								dwFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptOpenStorageProvider, [fwd] [return] [EETypeRva:0x00041308] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeNCryptProviderHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x0003FF10] string__wchar_t *, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptOpenStorageProvider")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptOpenStorageProvider(
					out global::Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle__System_Security_Cryptography_Cng phProvider, 
					string pszProviderName, 
					int dwFlags)
		{
			// Setup
			global::System.IntPtr unsafe_phProvider;
			ushort* unsafe_pszProviderName = default(ushort*);
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			phProvider = new global::Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle__System_Security_Cryptography_Cng();
			unsafe_phProvider = phProvider.DangerousGetHandle();
			fixed (char* pinned_pszProviderName = pszProviderName)
			{
				unsafe_pszProviderName = (ushort*)pinned_pszProviderName;
				// Call to native method
				unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptOpenStorageProvider(
									&(unsafe_phProvider), 
									unsafe_pszProviderName, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phProvider, 
								unsafe_phProvider
							);
			// Return
			return unsafe___value;
		}

		// Signature, NCryptFreeObject, [fwd] [return] [EETypeRva:0x00041308] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptFreeObject")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptFreeObject(global::System.IntPtr hObject)
		{
			// Setup
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptFreeObject(hObject);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptImportKey, [fwd] [return] [EETypeRva:0x00041308] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeNCryptProviderHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003FF10] string__wchar_t *, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeNCryptKeyHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptImportKey")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptImportKey(
					global::Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle__System_Security_Cryptography_Cng hProvider, 
					global::System.IntPtr hImportKey, 
					string pszBlobType, 
					global::System.IntPtr pParameterList, 
					out global::Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle__System_Security_Cryptography_Cng phKey, 
					byte[] pbData, 
					int cbData, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszBlobType = default(ushort*);
			global::System.IntPtr unsafe_phKey;
			byte* unsafe_pbData;
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			hProvider.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszBlobType = pszBlobType)
			{
				unsafe_pszBlobType = (ushort*)pinned_pszBlobType;
				phKey = new global::Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle__System_Security_Cryptography_Cng();
				unsafe_phKey = phKey.DangerousGetHandle();
				fixed (byte* pinned_pbData = ((pbData != null 
							&& pbData.Length == 0) ? new byte[1] : pbData))
				{
					unsafe_pbData = (byte*)pinned_pbData;
					// Call to native method
					unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptImportKey(
										hProvider.DangerousGetHandle(), 
										hImportKey, 
										unsafe_pszBlobType, 
										pParameterList, 
										&(unsafe_phKey), 
										unsafe_pbData, 
										cbData, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									phKey, 
									unsafe_phKey
								);
			}
			if (addRefed)
				hProvider.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptGetProperty, [fwd] [return] [EETypeRva:0x00041308] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeNCryptHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x0003FF10] string__wchar_t *, [fwd] [out] [EETypeRva:0x000413DC] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] System_Security_Cryptography_CngPropertyOptions__System_Security_Cryptography_Cng__CngPropertyOptions__System_Security_Cryptography_Cng, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptGetProperty")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptGetProperty(
					global::Microsoft.Win32.SafeHandles.SafeNCryptHandle__System_Security_Cryptography_Cng hObject, 
					string pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					global::System_Security_Cryptography.CngPropertyOptions__System_Security_Cryptography_Cng dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszProperty = default(ushort*);
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszProperty = pszProperty)
			{
				unsafe_pszProperty = (ushort*)pinned_pszProperty;
				fixed (int* pinned_pcbResult = &(pcbResult))
				{
					// Call to native method
					unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptGetProperty(
										hObject.DangerousGetHandle(), 
										unsafe_pszProperty, 
										((void*)pbOutput), 
										cbOutput, 
										pinned_pcbResult, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptSetProperty, [fwd] [return] [EETypeRva:0x00041308] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeNCryptHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x0003FF10] string__wchar_t *, [fwd] [in] [EETypeRva:0x000413DC] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] System_Security_Cryptography_CngPropertyOptions__System_Security_Cryptography_Cng__CngPropertyOptions__System_Security_Cryptography_Cng, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptSetProperty")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptSetProperty(
					global::Microsoft.Win32.SafeHandles.SafeNCryptHandle__System_Security_Cryptography_Cng hObject, 
					string pszProperty, 
					void* pbInput, 
					int cbInput, 
					global::System_Security_Cryptography.CngPropertyOptions__System_Security_Cryptography_Cng dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszProperty = default(ushort*);
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszProperty = pszProperty)
			{
				unsafe_pszProperty = (ushort*)pinned_pszProperty;
				// Call to native method
				unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptSetProperty(
									hObject.DangerousGetHandle(), 
									unsafe_pszProperty, 
									((void*)pbInput), 
									cbInput, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'iphlpapi.dll'
	/// </summary>
	public unsafe static partial class iphlpapi_dll
	{
		// Signature, GetNetworkParams, [fwd] [return] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Net_Primitives____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+IpHlpApi", "GetNetworkParams")]
		public static uint GetNetworkParams(
					global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_Primitives pFixedInfo, 
					ref uint pOutBufLen)
		{
			// Setup
			bool addRefed = false;
			uint unsafe___value;
			// Marshalling
			pFixedInfo.DangerousAddRef(ref addRefed);
			fixed (uint* pinned_pOutBufLen = &(pOutBufLen))
			{
				// Call to native method
				unsafe___value = global::__Interop.iphlpapi_dll_PInvokes.GetNetworkParams(
									pFixedInfo.DangerousGetHandle(), 
									pinned_pOutBufLen
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				pFixedInfo.DangerousRelease();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'BCrypt.dll'
	/// </summary>
	public unsafe static partial class BCrypt_dll
	{
		// Signature, BCryptExportKey, [fwd] [return] [EETypeRva:0x00041308] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeBCryptKeyHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x0003FF10] string__wchar_t *, [fwd] [out] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+BCrypt", "BCryptExportKey")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptExportKey(
					global::Microsoft.Win32.SafeHandles.SafeBCryptKeyHandle__System_Security_Cryptography_X509Certificates hKey, 
					global::System.IntPtr hExportKey, 
					string pszBlobType, 
					byte[] pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszBlobType = default(ushort*);
			byte* unsafe_pbOutput;
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszBlobType = pszBlobType)
			{
				unsafe_pszBlobType = (ushort*)pinned_pszBlobType;
				fixed (byte* pinned_pbOutput = ((pbOutput != null 
							&& pbOutput.Length == 0) ? new byte[1] : pbOutput))
				{
					unsafe_pbOutput = (byte*)pinned_pbOutput;
					fixed (int* pinned_pcbResult = &(pcbResult))
					{
						// Call to native method
						unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptExportKey(
											hKey.DangerousGetHandle(), 
											hExportKey, 
											unsafe_pszBlobType, 
											unsafe_pbOutput, 
											cbOutput, 
											pinned_pcbResult, 
											dwFlags
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
				}
			}
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptGetProperty, [fwd] [return] [EETypeRva:0x00041308] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeBCryptHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x0003FF10] string__wchar_t *, [fwd] [in] [EETypeRva:0x000413DC] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+BCrypt", "BCryptGetProperty")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptGetProperty(
					global::Microsoft.Win32.SafeHandles.SafeBCryptHandle__System_Security_Cryptography_X509Certificates hObject, 
					string pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszProperty = default(ushort*);
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszProperty = pszProperty)
			{
				unsafe_pszProperty = (ushort*)pinned_pszProperty;
				fixed (int* pinned_pcbResult = &(pcbResult))
				{
					// Call to native method
					unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptGetProperty(
										hObject.DangerousGetHandle(), 
										unsafe_pszProperty, 
										((void*)pbOutput), 
										cbOutput, 
										pinned_pcbResult, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptDestroyKey, [fwd] [return] [EETypeRva:0x00041308] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+BCrypt", "BCryptDestroyKey")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptDestroyKey(global::System.IntPtr hKey)
		{
			// Setup
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptDestroyKey(hKey);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptCreateHash, [fwd] [return] [EETypeRva:0x00041308] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [in] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeBCryptAlgorithmHandle__System_Security_Cryptography_Algorithms____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeBCryptHashHandle__System_Security_Cryptography_Algorithms____w64 int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [EETypeRva:0x00040EE4] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] __Interop_BCrypt_BCryptCreateHashFlags__System_Security_Cryptography_Algorithms__Interop_BCrypt_BCryptCreateHashFlags__System_Security_Cryptography_Algorithms, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptCreateHash")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptCreateHash(
					global::Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle__System_Security_Cryptography_Algorithms hAlgorithm, 
					out global::Microsoft.Win32.SafeHandles.SafeBCryptHashHandle__System_Security_Cryptography_Algorithms phHash, 
					global::System.IntPtr pbHashObject, 
					int cbHashObject, 
					byte[] pbSecret, 
					int cbSecret, 
					global::_.Interop_BCrypt_BCryptCreateHashFlags__System_Security_Cryptography_Algorithms dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_phHash;
			byte* unsafe_pbSecret;
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			hAlgorithm.DangerousAddRef(ref addRefed);
			phHash = new global::Microsoft.Win32.SafeHandles.SafeBCryptHashHandle__System_Security_Cryptography_Algorithms();
			unsafe_phHash = phHash.DangerousGetHandle();
			fixed (byte* pinned_pbSecret = ((pbSecret != null 
						&& pbSecret.Length == 0) ? new byte[1] : pbSecret))
			{
				unsafe_pbSecret = (byte*)pinned_pbSecret;
				// Call to native method
				unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptCreateHash(
									hAlgorithm.DangerousGetHandle(), 
									&(unsafe_phHash), 
									pbHashObject, 
									cbHashObject, 
									unsafe_pbSecret, 
									cbSecret, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phHash, 
								unsafe_phHash
							);
			if (addRefed)
				hAlgorithm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptGetProperty__0, [fwd] [return] [EETypeRva:0x00041308] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [in] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeBCryptHandle__System_Security_Cryptography_Algorithms____w64 int, [fwd] [in] [EETypeRva:0x0003FF10] string__wchar_t *, [fwd] [in] [EETypeRva:0x000413DC] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptGetProperty")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptGetProperty__0(
					global::Microsoft.Win32.SafeHandles.SafeBCryptHandle__System_Security_Cryptography_Algorithms hObject, 
					string pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszProperty = default(ushort*);
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszProperty = pszProperty)
			{
				unsafe_pszProperty = (ushort*)pinned_pszProperty;
				fixed (int* pinned_pcbResult = &(pcbResult))
				{
					// Call to native method
					unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptGetProperty__0(
										hObject.DangerousGetHandle(), 
										unsafe_pszProperty, 
										((void*)pbOutput), 
										cbOutput, 
										pinned_pcbResult, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptOpenAlgorithmProvider, [fwd] [return] [EETypeRva:0x00041308] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeBCryptAlgorithmHandle__System_Security_Cryptography_Algorithms____w64 int, [fwd] [in] [EETypeRva:0x0003FF10] string__wchar_t *, [fwd] [in] [EETypeRva:0x0003FF10] string__wchar_t *, [fwd] [in] [EETypeRva:0x00041308] __Interop_BCrypt_BCryptOpenAlgorithmProviderFlags__System_Security_Cryptography_Algorithms__Interop_BCrypt_BCryptOpenAlgorithmProviderFlags__System_Security_Cryptography_Algorithms, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptOpenAlgorithmProvider")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptOpenAlgorithmProvider(
					out global::Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle__System_Security_Cryptography_Algorithms phAlgorithm, 
					string pszAlgId, 
					string pszImplementation, 
					global::_.Interop_BCrypt_BCryptOpenAlgorithmProviderFlags__System_Security_Cryptography_Algorithms dwFlags)
		{
			// Setup
			global::System.IntPtr unsafe_phAlgorithm;
			ushort* unsafe_pszAlgId = default(ushort*);
			ushort* unsafe_pszImplementation = default(ushort*);
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			phAlgorithm = new global::Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle__System_Security_Cryptography_Algorithms();
			unsafe_phAlgorithm = phAlgorithm.DangerousGetHandle();
			fixed (char* pinned_pszAlgId = pszAlgId)
			{
				unsafe_pszAlgId = (ushort*)pinned_pszAlgId;
				fixed (char* pinned_pszImplementation = pszImplementation)
				{
					unsafe_pszImplementation = (ushort*)pinned_pszImplementation;
					// Call to native method
					unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptOpenAlgorithmProvider(
										&(unsafe_phAlgorithm), 
										unsafe_pszAlgId, 
										unsafe_pszImplementation, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phAlgorithm, 
								unsafe_phAlgorithm
							);
			// Return
			return unsafe___value;
		}

		// Signature, BCryptCloseAlgorithmProvider, [fwd] [return] [EETypeRva:0x00041308] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000413DC] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptCloseAlgorithmProvider")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptCloseAlgorithmProvider(
					global::System.IntPtr hAlgorithm, 
					int dwFlags)
		{
			// Setup
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptCloseAlgorithmProvider(
								hAlgorithm, 
								dwFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptDestroyHash, [fwd] [return] [EETypeRva:0x00041308] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptDestroyHash")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptDestroyHash(global::System.IntPtr hHash)
		{
			// Setup
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptDestroyHash(hHash);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'sspicli.dll'
	/// </summary>
	public unsafe static partial class sspicli_dll
	{
		// Signature, LsaGetLogonSessionData, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_LUID__System_Security_Principal_Windows____Interop_LUID__System_Security_Principal_Windows, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] Microsoft_Win32_SafeHandles_SafeLsaReturnBufferHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "LsaGetLogonSessionData")]
		public static int LsaGetLogonSessionData(
					ref global::_.Interop_LUID__System_Security_Principal_Windows LogonId, 
					ref global::Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle__System_Security_Principal_Windows ppLogonSessionData)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_ppLogonSessionData;
			global::Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle__System_Security_Principal_Windows out_ppLogonSessionData;
			global::System.IntPtr prev_unsafe_ppLogonSessionData;
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_LUID__System_Security_Principal_Windows* pinned_LogonId = &(LogonId))
			{
				ppLogonSessionData.DangerousAddRef(ref addRefed);
				unsafe_ppLogonSessionData = ppLogonSessionData.DangerousGetHandle();
				prev_unsafe_ppLogonSessionData = unsafe_ppLogonSessionData;
				out_ppLogonSessionData = new global::Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle__System_Security_Principal_Windows();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.LsaGetLogonSessionData(
									pinned_LogonId, 
									&(unsafe_ppLogonSessionData)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (addRefed)
					ppLogonSessionData.DangerousRelease();
				if (prev_unsafe_ppLogonSessionData != unsafe_ppLogonSessionData)
				{
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										out_ppLogonSessionData, 
										unsafe_ppLogonSessionData
									);
					ppLogonSessionData = out_ppLogonSessionData;
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, LsaFreeReturnBuffer, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "LsaFreeReturnBuffer")]
		public static int LsaFreeReturnBuffer(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.sspicli_dll_PInvokes.LsaFreeReturnBuffer(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, EncryptMessage, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_SspiCli_SecBufferDesc__System_Net_Security____Interop_SspiCli_SecBufferDesc__System_Net_Security, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "EncryptMessage")]
		public static int EncryptMessage(
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security contextHandle, 
					uint qualityOfProtection, 
					ref global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security inputOutput, 
					uint sequenceNumber)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_contextHandle = &(contextHandle))
				fixed (global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* pinned_inputOutput = &(inputOutput))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.sspicli_dll_PInvokes.EncryptMessage(
										pinned_contextHandle, 
										qualityOfProtection, 
										pinned_inputOutput, 
										sequenceNumber
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			// Return
			return unsafe___value;
		}

		// Signature, DecryptMessage, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_SspiCli_SecBufferDesc__System_Net_Security____Interop_SspiCli_SecBufferDesc__System_Net_Security, [fwd] [in] [EETypeRva:0x000413DC] uint__unsigned int, [fwd] [in] [EETypeRva:0x000413DC] uint___ptrunsigned int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "DecryptMessage")]
		public static int DecryptMessage(
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security contextHandle, 
					ref global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security inputOutput, 
					uint sequenceNumber, 
					uint* qualityOfProtection)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_contextHandle = &(contextHandle))
				fixed (global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* pinned_inputOutput = &(inputOutput))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.sspicli_dll_PInvokes.DecryptMessage(
										pinned_contextHandle, 
										pinned_inputOutput, 
										sequenceNumber, 
										((uint*)qualityOfProtection)
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			// Return
			return unsafe___value;
		}

		// Signature, EnumerateSecurityPackagesW, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041B90] System_Net_Security_SafeFreeContextBuffer_SECURITY__System_Net_Security____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "EnumerateSecurityPackagesW")]
		public static int EnumerateSecurityPackagesW(
					out int pkgnum, 
					out global::System.Net.Security.SafeFreeContextBuffer_SECURITY__System_Net_Security handle)
		{
			// Setup
			global::System.IntPtr unsafe_handle;
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_pkgnum = &(pkgnum))
			{
				handle = new global::System.Net.Security.SafeFreeContextBuffer_SECURITY__System_Net_Security();
				unsafe_handle = handle.DangerousGetHandle();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.EnumerateSecurityPackagesW(
									pinned_pkgnum, 
									&(unsafe_handle)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									handle, 
									unsafe_handle
								);
			}
			// Return
			return unsafe___value;
		}

		// Signature, ApplyControlToken, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] void___ptrvoid *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_SspiCli_SecBufferDesc__System_Net_Security____Interop_SspiCli_SecBufferDesc__System_Net_Security, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "ApplyControlToken")]
		public static int ApplyControlToken(
					void* inContextPtr, 
					ref global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security inputBuffers)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* pinned_inputBuffers = &(inputBuffers))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.ApplyControlToken(
									((void*)inContextPtr), 
									pinned_inputBuffers
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, FreeContextBuffer, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "FreeContextBuffer")]
		public static int FreeContextBuffer(global::System.IntPtr contextBuffer)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.sspicli_dll_PInvokes.FreeContextBuffer(contextBuffer);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, AcceptSecurityContext, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [EETypeRva:0x000413DC] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000413DC] __Interop_SspiCli_SecBufferDesc__System_Net_Security___ptr__Interop_SspiCli_SecBufferDesc__System_Net_Security *, [fwd] [in] [EETypeRva:0x00041308] __Interop_SspiCli_ContextFlags__System_Net_Security__Interop_SspiCli_ContextFlags__System_Net_Security, [fwd] [in] [EETypeRva:0x00041308] __Interop_SspiCli_Endianness__System_Net_Security__Interop_SspiCli_Endianness__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_SspiCli_SecBufferDesc__System_Net_Security____Interop_SspiCli_SecBufferDesc__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041308] __Interop_SspiCli_ContextFlags__System_Net_Security__Interop_SspiCli_ContextFlags__System_Net_Security, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] long____int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "AcceptSecurityContext")]
		public static int AcceptSecurityContext(
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security credentialHandle, 
					void* inContextPtr, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputBuffer, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security inFlags, 
					global::_.Interop_SspiCli_Endianness__System_Net_Security endianness, 
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security outContextPtr, 
					ref global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security outputBuffer, 
					ref global::_.Interop_SspiCli_ContextFlags__System_Net_Security attributes, 
					out long timeStamp)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_credentialHandle = &(credentialHandle))
				fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_outContextPtr = &(outContextPtr))
					fixed (global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* pinned_outputBuffer = &(outputBuffer))
						fixed (global::_.Interop_SspiCli_ContextFlags__System_Net_Security* pinned_attributes = &(attributes))
							fixed (long* pinned_timeStamp = &(timeStamp))
							{
								global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
								// Call to native method
								unsafe___value = global::__Interop.sspicli_dll_PInvokes.AcceptSecurityContext(
													pinned_credentialHandle, 
													((void*)inContextPtr), 
													((global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security*)inputBuffer), 
													inFlags, 
													endianness, 
													pinned_outContextPtr, 
													pinned_outputBuffer, 
													pinned_attributes, 
													pinned_timeStamp
												);
								global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
								global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
							}
			// Return
			return unsafe___value;
		}

		// Signature, DeleteSecurityContext, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "DeleteSecurityContext")]
		public static int DeleteSecurityContext(ref global::_.Interop_SspiCli_CredHandle__System_Net_Security handlePtr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_handlePtr = &(handlePtr))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.DeleteSecurityContext(pinned_handlePtr);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, InitializeSecurityContextW, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [EETypeRva:0x000413DC] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000413DC] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x00041308] __Interop_SspiCli_ContextFlags__System_Net_Security__Interop_SspiCli_ContextFlags__System_Net_Security, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x00041308] __Interop_SspiCli_Endianness__System_Net_Security__Interop_SspiCli_Endianness__System_Net_Security, [fwd] [in] [EETypeRva:0x000413DC] __Interop_SspiCli_SecBufferDesc__System_Net_Security___ptr__Interop_SspiCli_SecBufferDesc__System_Net_Security *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_SspiCli_SecBufferDesc__System_Net_Security____Interop_SspiCli_SecBufferDesc__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041308] __Interop_SspiCli_ContextFlags__System_Net_Security__Interop_SspiCli_ContextFlags__System_Net_Security, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] long____int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "InitializeSecurityContextW")]
		public static int InitializeSecurityContextW(
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security credentialHandle, 
					void* inContextPtr, 
					byte* targetName, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security inFlags, 
					int reservedI, 
					global::_.Interop_SspiCli_Endianness__System_Net_Security endianness, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputBuffer, 
					int reservedII, 
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security outContextPtr, 
					ref global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security outputBuffer, 
					ref global::_.Interop_SspiCli_ContextFlags__System_Net_Security attributes, 
					out long timeStamp)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_credentialHandle = &(credentialHandle))
				fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_outContextPtr = &(outContextPtr))
					fixed (global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* pinned_outputBuffer = &(outputBuffer))
						fixed (global::_.Interop_SspiCli_ContextFlags__System_Net_Security* pinned_attributes = &(attributes))
							fixed (long* pinned_timeStamp = &(timeStamp))
							{
								global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
								// Call to native method
								unsafe___value = global::__Interop.sspicli_dll_PInvokes.InitializeSecurityContextW(
													pinned_credentialHandle, 
													((void*)inContextPtr), 
													((byte*)targetName), 
													inFlags, 
													reservedI, 
													endianness, 
													((global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security*)inputBuffer), 
													reservedII, 
													pinned_outContextPtr, 
													pinned_outputBuffer, 
													pinned_attributes, 
													pinned_timeStamp
												);
								global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
								global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
							}
			// Return
			return unsafe___value;
		}

		// Signature, QueryContextAttributesW, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [EETypeRva:0x00041308] __Interop_SspiCli_ContextAttribute__System_Net_Security__Interop_SspiCli_ContextAttribute__System_Net_Security, [fwd] [in] [EETypeRva:0x000413DC] void___ptrvoid *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "QueryContextAttributesW")]
		public static int QueryContextAttributesW(
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security contextHandle, 
					global::_.Interop_SspiCli_ContextAttribute__System_Net_Security attribute, 
					void* buffer)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_contextHandle = &(contextHandle))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.QueryContextAttributesW(
									pinned_contextHandle, 
									attribute, 
									((void*)buffer)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, AcquireCredentialsHandleW, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x0003FF10] string__wchar_t *, [fwd] [in] [EETypeRva:0x0003FF10] string__wchar_t *, [fwd] [in] [EETypeRva:0x000413DC] int__int, [fwd] [in] [EETypeRva:0x000413DC] void___ptrvoid *, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_SspiCli_SCHANNEL_CRED__System_Net_Security____Interop_SspiCli_SCHANNEL_CRED__System_Net_Security, [fwd] [in] [EETypeRva:0x000413DC] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000413DC] void___ptrvoid *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000413DC] long____int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "AcquireCredentialsHandleW")]
		public static int AcquireCredentialsHandleW(
					string principal, 
					string moduleName, 
					int usage, 
					void* logonID, 
					ref global::_.Interop_SspiCli_SCHANNEL_CRED__System_Net_Security authData, 
					void* keyCallback, 
					void* keyArgument, 
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security handlePtr, 
					out long timeStamp)
		{
			// Setup
			ushort* unsafe_principal = default(ushort*);
			ushort* unsafe_moduleName = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_principal = principal)
			{
				unsafe_principal = (ushort*)pinned_principal;
				fixed (char* pinned_moduleName = moduleName)
				{
					unsafe_moduleName = (ushort*)pinned_moduleName;
					fixed (global::_.Interop_SspiCli_SCHANNEL_CRED__System_Net_Security* pinned_authData = &(authData))
						fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_handlePtr = &(handlePtr))
							fixed (long* pinned_timeStamp = &(timeStamp))
							{
								global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
								// Call to native method
								unsafe___value = global::__Interop.sspicli_dll_PInvokes.AcquireCredentialsHandleW(
													unsafe_principal, 
													unsafe_moduleName, 
													usage, 
													((void*)logonID), 
													pinned_authData, 
													((void*)keyCallback), 
													((void*)keyArgument), 
													pinned_handlePtr, 
													pinned_timeStamp
												);
								global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
								global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
							}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, FreeCredentialsHandle, [fwd] [return] [EETypeRva:0x000413DC] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00041808] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "FreeCredentialsHandle")]
		public static int FreeCredentialsHandle(ref global::_.Interop_SspiCli_CredHandle__System_Net_Security handlePtr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_handlePtr = &(handlePtr))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.FreeCredentialsHandle(pinned_handlePtr);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}
	}

	public unsafe static partial class libSkiaSharp_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_colorspace_unref(global::System.IntPtr cColorSpace);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_colorspace_gamma_close_to_srgb(global::System.IntPtr cColorSpace);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_colorspace_gamma_is_linear(global::System.IntPtr cColorSpace);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_colorspace_is_srgb(global::System.IntPtr cColorSpace);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_colorspace_equals(
					global::System.IntPtr src, 
					global::System.IntPtr dst);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_colorspace_new_srgb();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_colorspace_new_srgb_linear();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_colorspace_new_icc(
					global::System.IntPtr input, 
					global::System.IntPtr len);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_colorspace_new_icc", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_colorspace_new_icc__0(
					byte* input, 
					global::System.IntPtr len);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_colorspace_new_rgb_with_gamma(
					global::SkiaSharp.SKColorSpaceRenderTargetGamma__SkiaSharp gamma, 
					global::System.IntPtr toXYZD50, 
					global::SkiaSharp.SKColorSpaceFlags__SkiaSharp flags);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_colorspace_new_rgb_with_gamma_and_gamut(
					global::SkiaSharp.SKColorSpaceRenderTargetGamma__SkiaSharp gamma, 
					global::SkiaSharp.SKColorSpaceGamut__SkiaSharp gamut, 
					global::SkiaSharp.SKColorSpaceFlags__SkiaSharp flags);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_colorspace_new_rgb_with_coeffs(
					global::SkiaSharp.SKColorSpaceTransferFn__SkiaSharp* coeffs, 
					global::System.IntPtr toXYZD50, 
					global::SkiaSharp.SKColorSpaceFlags__SkiaSharp flags);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_colorspace_new_rgb_with_coeffs_and_gamut(
					global::SkiaSharp.SKColorSpaceTransferFn__SkiaSharp* coeffs, 
					global::SkiaSharp.SKColorSpaceGamut__SkiaSharp gamut, 
					global::SkiaSharp.SKColorSpaceFlags__SkiaSharp flags);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_colorspace_to_xyzd50(
					global::System.IntPtr cColorSpace, 
					global::System.IntPtr toXYZD50);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_colorspaceprimaries_to_xyzd50(
					global::SkiaSharp.SKColorSpacePrimaries__SkiaSharp* primaries, 
					global::System.IntPtr toXYZD50);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_colorspace_transfer_fn_invert(
					global::SkiaSharp.SKColorSpaceTransferFn__SkiaSharp* transfer, 
					global::SkiaSharp.SKColorSpaceTransferFn__SkiaSharp* inverted);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKColorType__SkiaSharp sk_colortype_get_default_8888();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_surface_unref(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_surface_new_raster(
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* info, 
					global::SkiaSharp.SKSurfaceProps__SkiaSharp* pros);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_surface_new_raster", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_surface_new_raster__0(
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* info, 
					global::System.IntPtr propsZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_surface_new_raster_direct(
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* info, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes, 
					global::SkiaSharp.SKSurfaceProps__SkiaSharp* props);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_surface_new_raster_direct", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_surface_new_raster_direct__0(
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* info, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes, 
					global::System.IntPtr propsZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_surface_get_canvas(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_surface_new_image_snapshot(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_surface_new_backend_render_target(
					global::System.IntPtr context, 
					global::SkiaSharp.GRBackendRenderTargetDesc__SkiaSharp* desc, 
					global::SkiaSharp.SKSurfaceProps__SkiaSharp* props);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_surface_new_backend_render_target", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_surface_new_backend_render_target__0(
					global::System.IntPtr context, 
					global::SkiaSharp.GRBackendRenderTargetDesc__SkiaSharp* desc, 
					global::System.IntPtr propsZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_surface_new_backend_texture(
					global::System.IntPtr context, 
					global::SkiaSharp.GRBackendTextureDesc__SkiaSharp* desc, 
					global::SkiaSharp.SKSurfaceProps__SkiaSharp* props);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_surface_new_backend_texture", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_surface_new_backend_texture__0(
					global::System.IntPtr context, 
					global::SkiaSharp.GRBackendTextureDesc__SkiaSharp* desc, 
					global::System.IntPtr propsZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_surface_new_backend_texture_as_render_target(
					global::System.IntPtr context, 
					global::SkiaSharp.GRBackendTextureDesc__SkiaSharp* desc, 
					global::SkiaSharp.SKSurfaceProps__SkiaSharp* props);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_surface_new_backend_texture_as_render_target", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_surface_new_backend_texture_as_render_target__0(
					global::System.IntPtr context, 
					global::SkiaSharp.GRBackendTextureDesc__SkiaSharp* desc, 
					global::System.IntPtr propsZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_surface_new_render_target(
					global::System.IntPtr context, 
					sbyte budgeted, 
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* info, 
					int sampleCount, 
					global::SkiaSharp.SKSurfaceProps__SkiaSharp* props);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_surface_new_render_target", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_surface_new_render_target__0(
					global::System.IntPtr context, 
					sbyte budgeted, 
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* info, 
					int sampleCount, 
					global::System.IntPtr propsZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_surface_draw(
					global::System.IntPtr surface, 
					global::System.IntPtr canvas, 
					float x, 
					float y, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_surface_peek_pixels(
					global::System.IntPtr surface, 
					global::System.IntPtr pixmap);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_surface_read_pixels(
					global::System.IntPtr surface, 
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* dstInfo, 
					global::System.IntPtr dstPixels, 
					global::System.IntPtr dstRowBytes, 
					int srcX, 
					int srcY);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_surface_get_props(
					global::System.IntPtr surface, 
					global::SkiaSharp.SKSurfaceProps__SkiaSharp* props);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_canvas_save(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_canvas_save_layer(
					global::System.IntPtr t, 
					global::SkiaSharp.SKRect__SkiaSharp* rect, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_canvas_save_layer", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_canvas_save_layer__0(
					global::System.IntPtr t, 
					global::System.IntPtr rectZero, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_restore(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_canvas_get_save_count(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_restore_to_count(
					global::System.IntPtr t, 
					int saveCount);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_translate(
					global::System.IntPtr t, 
					float dx, 
					float dy);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_scale(
					global::System.IntPtr t, 
					float sx, 
					float sy);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_rotate_degrees(
					global::System.IntPtr t, 
					float degrees);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_rotate_radians(
					global::System.IntPtr t, 
					float radians);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_skew(
					global::System.IntPtr t, 
					float sx, 
					float sy);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_concat(
					global::System.IntPtr t, 
					global::SkiaSharp.SKMatrix__SkiaSharp* m);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_canvas_quick_reject(
					global::System.IntPtr t, 
					global::SkiaSharp.SKRect__SkiaSharp* rect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_clip_rect(
					global::System.IntPtr t, 
					global::SkiaSharp.SKRect__SkiaSharp* rect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_clip_path(
					global::System.IntPtr t, 
					global::System.IntPtr p);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_paint(
					global::System.IntPtr t, 
					global::System.IntPtr p);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_region(
					global::System.IntPtr t, 
					global::System.IntPtr region, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_rect(
					global::System.IntPtr t, 
					global::SkiaSharp.SKRect__SkiaSharp* rect, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_round_rect(
					global::System.IntPtr t, 
					global::SkiaSharp.SKRect__SkiaSharp* rect, 
					float rx, 
					float ry, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_oval(
					global::System.IntPtr t, 
					global::SkiaSharp.SKRect__SkiaSharp* rect, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_circle(
					global::System.IntPtr t, 
					float cx, 
					float cy, 
					float radius, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_path(
					global::System.IntPtr t, 
					global::System.IntPtr path, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_image(
					global::System.IntPtr t, 
					global::System.IntPtr image, 
					float x, 
					float y, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_image_rect(
					global::System.IntPtr t, 
					global::System.IntPtr image, 
					global::SkiaSharp.SKRect__SkiaSharp* src, 
					global::SkiaSharp.SKRect__SkiaSharp* dest, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_canvas_draw_image_rect", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_image_rect__0(
					global::System.IntPtr t, 
					global::System.IntPtr image, 
					global::System.IntPtr srcZero, 
					global::SkiaSharp.SKRect__SkiaSharp* dest, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_picture(
					global::System.IntPtr t, 
					global::System.IntPtr pict, 
					global::SkiaSharp.SKMatrix__SkiaSharp* mat, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_canvas_draw_picture", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_picture__0(
					global::System.IntPtr t, 
					global::System.IntPtr pict, 
					global::System.IntPtr matZero, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_color(
					global::System.IntPtr t, 
					global::SkiaSharp.SKColor__SkiaSharp color, 
					global::SkiaSharp.SKBlendMode__SkiaSharp mode);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_points(
					global::System.IntPtr t, 
					global::SkiaSharp.SKPointMode__SkiaSharp mode, 
					global::System.IntPtr count, 
					global::SkiaSharp.SKPoint__SkiaSharp* points, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_point(
					global::System.IntPtr t, 
					float x, 
					float y, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_line(
					global::System.IntPtr t, 
					float x0, 
					float y0, 
					float x1, 
					float y1, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_text(
					global::System.IntPtr t, 
					byte* text, 
					int len, 
					float x, 
					float y, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_pos_text(
					global::System.IntPtr t, 
					byte* text, 
					int len, 
					global::SkiaSharp.SKPoint__SkiaSharp* points, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_text_on_path(
					global::System.IntPtr t, 
					byte* text, 
					int len, 
					global::System.IntPtr path, 
					float hOffset, 
					float vOffset, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_canvas_draw_text", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_text__0(
					global::System.IntPtr t, 
					global::System.IntPtr text, 
					int len, 
					float x, 
					float y, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_canvas_draw_pos_text", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_pos_text__0(
					global::System.IntPtr t, 
					global::System.IntPtr text, 
					int len, 
					global::SkiaSharp.SKPoint__SkiaSharp* points, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_canvas_draw_text_on_path", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_text_on_path__0(
					global::System.IntPtr t, 
					global::System.IntPtr text, 
					int len, 
					global::System.IntPtr path, 
					float hOffset, 
					float vOffset, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_bitmap(
					global::System.IntPtr t, 
					global::System.IntPtr bitmap, 
					float x, 
					float y, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_bitmap_rect(
					global::System.IntPtr t, 
					global::System.IntPtr bitmap, 
					global::SkiaSharp.SKRect__SkiaSharp* src, 
					global::SkiaSharp.SKRect__SkiaSharp* dest, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_canvas_draw_bitmap_rect", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_bitmap_rect__0(
					global::System.IntPtr t, 
					global::System.IntPtr bitmap, 
					global::System.IntPtr srcZero, 
					global::SkiaSharp.SKRect__SkiaSharp* dest, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_reset_matrix(global::System.IntPtr canvas);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_set_matrix(
					global::System.IntPtr canvas, 
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_get_total_matrix(
					global::System.IntPtr canvas, 
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_annotation(
					global::System.IntPtr t, 
					global::SkiaSharp.SKRect__SkiaSharp* rect, 
					byte* key, 
					global::System.IntPtr value);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_url_annotation(
					global::System.IntPtr t, 
					global::SkiaSharp.SKRect__SkiaSharp* rect, 
					global::System.IntPtr value);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_named_destination_annotation(
					global::System.IntPtr t, 
					global::SkiaSharp.SKPoint__SkiaSharp* point, 
					global::System.IntPtr value);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_link_destination_annotation(
					global::System.IntPtr t, 
					global::SkiaSharp.SKRect__SkiaSharp* rect, 
					global::System.IntPtr value);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_clip_rect_with_operation(
					global::System.IntPtr t, 
					global::SkiaSharp.SKRect__SkiaSharp* crect, 
					global::SkiaSharp.SKClipOperation__SkiaSharp op, 
					sbyte doAA);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_clip_path_with_operation(
					global::System.IntPtr t, 
					global::System.IntPtr cpath, 
					global::SkiaSharp.SKClipOperation__SkiaSharp op, 
					sbyte doAA);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_clip_region(
					global::System.IntPtr t, 
					global::System.IntPtr region, 
					global::SkiaSharp.SKClipOperation__SkiaSharp op);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_canvas_get_device_clip_bounds(
					global::System.IntPtr t, 
					global::SkiaSharp.SKRectI__SkiaSharp* cbounds);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_canvas_get_local_clip_bounds(
					global::System.IntPtr t, 
					global::SkiaSharp.SKRect__SkiaSharp* cbounds);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_canvas_new_from_bitmap(global::System.IntPtr bitmap);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_flush(global::System.IntPtr canvas);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_bitmap_lattice(
					global::System.IntPtr t, 
					global::System.IntPtr bitmap, 
					global::SkiaSharp.SKLatticeInternal__SkiaSharp* lattice, 
					global::SkiaSharp.SKRect__SkiaSharp* dst, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_image_lattice(
					global::System.IntPtr t, 
					global::System.IntPtr image, 
					global::SkiaSharp.SKLatticeInternal__SkiaSharp* lattice, 
					global::SkiaSharp.SKRect__SkiaSharp* dst, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_destroy(global::System.IntPtr canvas);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_canvas_draw_vertices(
					global::System.IntPtr canvas, 
					global::System.IntPtr vertices, 
					global::SkiaSharp.SKBlendMode__SkiaSharp mode, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_paint_new();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_delete(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_paint_is_antialias(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_antialias(
					global::System.IntPtr t, 
					sbyte v);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_paint_is_dither(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_dither(
					global::System.IntPtr t, 
					sbyte v);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_paint_is_verticaltext(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_verticaltext(
					global::System.IntPtr t, 
					sbyte v);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint sk_paint_get_color(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_color(
					global::System.IntPtr t, 
					global::SkiaSharp.SKColor__SkiaSharp color);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKPaintStyle__SkiaSharp sk_paint_get_style(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_style(
					global::System.IntPtr t, 
					global::SkiaSharp.SKPaintStyle__SkiaSharp style);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static float sk_paint_get_stroke_width(global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_stroke_width(
					global::System.IntPtr t, 
					float width);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static float sk_paint_get_stroke_miter(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_stroke_miter(
					global::System.IntPtr t, 
					float miter);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKStrokeCap__SkiaSharp sk_paint_get_stroke_cap(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_stroke_cap(
					global::System.IntPtr t, 
					global::SkiaSharp.SKStrokeCap__SkiaSharp cap);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKStrokeJoin__SkiaSharp sk_paint_get_stroke_join(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_stroke_join(
					global::System.IntPtr t, 
					global::SkiaSharp.SKStrokeJoin__SkiaSharp join);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_shader(
					global::System.IntPtr t, 
					global::System.IntPtr shader);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_paint_get_shader(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_maskfilter(
					global::System.IntPtr t, 
					global::System.IntPtr filter);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_paint_get_maskfilter(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_colorfilter(
					global::System.IntPtr t, 
					global::System.IntPtr filter);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_paint_get_colorfilter(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_imagefilter(
					global::System.IntPtr t, 
					global::System.IntPtr filter);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_paint_get_imagefilter(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_blendmode(
					global::System.IntPtr t, 
					global::SkiaSharp.SKBlendMode__SkiaSharp mode);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKBlendMode__SkiaSharp sk_paint_get_blendmode(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_filter_quality(
					global::System.IntPtr t, 
					global::SkiaSharp.SKFilterQuality__SkiaSharp filterQuality);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKFilterQuality__SkiaSharp sk_paint_get_filter_quality(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_paint_get_typeface(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_typeface(
					global::System.IntPtr t, 
					global::System.IntPtr typeface);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static float sk_paint_get_textsize(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_textsize(
					global::System.IntPtr t, 
					float size);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKTextAlign__SkiaSharp sk_paint_get_text_align(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_text_align(
					global::System.IntPtr t, 
					global::SkiaSharp.SKTextAlign__SkiaSharp align);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKTextEncoding__SkiaSharp sk_paint_get_text_encoding(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_text_encoding(
					global::System.IntPtr t, 
					global::SkiaSharp.SKTextEncoding__SkiaSharp encoding);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static float sk_paint_get_text_scale_x(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_text_scale_x(
					global::System.IntPtr t, 
					float scale);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static float sk_paint_get_text_skew_x(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_text_skew_x(
					global::System.IntPtr t, 
					float skew);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static float sk_paint_measure_text(
					global::System.IntPtr t, 
					byte* text, 
					global::System.IntPtr length, 
					global::SkiaSharp.SKRect__SkiaSharp* bounds);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_paint_measure_text", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static float sk_paint_measure_text__0(
					global::System.IntPtr t, 
					byte* text, 
					global::System.IntPtr length, 
					global::System.IntPtr boundsZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_paint_measure_text", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static float sk_paint_measure_text__1(
					global::System.IntPtr t, 
					global::System.IntPtr text, 
					global::System.IntPtr length, 
					global::SkiaSharp.SKRect__SkiaSharp* bounds);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_paint_measure_text", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static float sk_paint_measure_text__2(
					global::System.IntPtr t, 
					global::System.IntPtr text, 
					global::System.IntPtr length, 
					global::System.IntPtr boundsZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_paint_break_text(
					global::System.IntPtr t, 
					global::System.IntPtr text, 
					global::System.IntPtr length, 
					float maxWidth, 
					float* measuredWidth);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_paint_break_text", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_paint_break_text__0(
					global::System.IntPtr t, 
					byte* text, 
					global::System.IntPtr length, 
					float maxWidth, 
					float* measuredWidth);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_paint_get_text_path(
					global::System.IntPtr t, 
					global::System.IntPtr text, 
					global::System.IntPtr length, 
					float x, 
					float y);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_paint_get_text_path", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_paint_get_text_path__0(
					global::System.IntPtr t, 
					byte* text, 
					global::System.IntPtr length, 
					float x, 
					float y);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_paint_get_pos_text_path(
					global::System.IntPtr t, 
					global::System.IntPtr text, 
					global::System.IntPtr length, 
					global::SkiaSharp.SKPoint__SkiaSharp* points);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_paint_get_pos_text_path", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_paint_get_pos_text_path__0(
					global::System.IntPtr t, 
					byte* text, 
					global::System.IntPtr length, 
					global::SkiaSharp.SKPoint__SkiaSharp* points);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static float sk_paint_get_fontmetrics(
					global::System.IntPtr t, 
					global::SkiaSharp.SKFontMetrics__SkiaSharp* fontMetrics, 
					float scale);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_paint_get_fontmetrics", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static float sk_paint_get_fontmetrics__0(
					global::System.IntPtr t, 
					global::System.IntPtr fontMetricsZero, 
					float scale);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_paint_get_path_effect(global::System.IntPtr cpaint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_path_effect(
					global::System.IntPtr cpaint, 
					global::System.IntPtr effect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_paint_is_linear_text(global::System.IntPtr cpaint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_linear_text(
					global::System.IntPtr cpaint, 
					sbyte linearText);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_paint_is_subpixel_text(global::System.IntPtr cpaint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_subpixel_text(
					global::System.IntPtr cpaint, 
					sbyte subpixelText);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_paint_is_lcd_render_text(global::System.IntPtr cpaint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_lcd_render_text(
					global::System.IntPtr cpaint, 
					sbyte lcdText);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_paint_is_embedded_bitmap_text(global::System.IntPtr cpaint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_embedded_bitmap_text(
					global::System.IntPtr cpaint, 
					sbyte useEmbeddedBitmapText);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_paint_is_autohinted(global::System.IntPtr cpaint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_autohinted(
					global::System.IntPtr cpaint, 
					sbyte useAutohinter);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKPaintHinting__SkiaSharp sk_paint_get_hinting(global::System.IntPtr cpaint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_hinting(
					global::System.IntPtr cpaint, 
					global::SkiaSharp.SKPaintHinting__SkiaSharp hintingLevel);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_paint_is_fake_bold_text(global::System.IntPtr cpaint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_fake_bold_text(
					global::System.IntPtr cpaint, 
					sbyte fakeBoldText);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_paint_is_dev_kern_text(global::System.IntPtr cpaint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_paint_set_dev_kern_text(
					global::System.IntPtr cpaint, 
					sbyte devKernText);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_paint_get_fill_path(
					global::System.IntPtr paint, 
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::SkiaSharp.SKRect__SkiaSharp* cullRect, 
					float resScale);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_paint_get_fill_path", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_paint_get_fill_path__0(
					global::System.IntPtr paint, 
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr cullRectZero, 
					float resScale);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_paint_clone(global::System.IntPtr cpaint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_image_ref(global::System.IntPtr image);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_image_unref(global::System.IntPtr image);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_image_new_raster_copy(
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* info, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_image_new_raster_copy_with_pixmap(global::System.IntPtr pixmap);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_image_new_raster_copy_with_colortable(
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* info, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes, 
					global::System.IntPtr ctable);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_image_new_raster_data(
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* info, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_image_new_raster(
					global::System.IntPtr pixmap, 
					global::System.IntPtr releaseProc, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_image_new_from_bitmap(global::System.IntPtr cbitmap);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_image_new_from_encoded(
					global::System.IntPtr encoded, 
					global::SkiaSharp.SKRectI__SkiaSharp* subset);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_image_new_from_encoded", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_image_new_from_encoded__0(
					global::System.IntPtr encoded, 
					global::System.IntPtr subsetZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_image_new_from_texture(
					global::System.IntPtr context, 
					global::SkiaSharp.GRBackendTextureDesc__SkiaSharp* desc, 
					global::SkiaSharp.SKAlphaType__SkiaSharp alpha, 
					global::System.IntPtr colorSpace, 
					global::System.IntPtr releaseProc, 
					global::System.IntPtr releaseContext);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_image_new_from_adopted_texture(
					global::System.IntPtr context, 
					global::SkiaSharp.GRBackendTextureDesc__SkiaSharp* desc, 
					global::SkiaSharp.SKAlphaType__SkiaSharp alpha, 
					global::System.IntPtr colorSpace);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_image_new_from_picture(
					global::System.IntPtr picture, 
					global::SkiaSharp.SKSizeI__SkiaSharp* dimensions, 
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_image_new_from_picture", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_image_new_from_picture__0(
					global::System.IntPtr picture, 
					global::SkiaSharp.SKSizeI__SkiaSharp* dimensions, 
					global::System.IntPtr matrixZero, 
					global::System.IntPtr paint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_image_get_width(global::System.IntPtr image);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_image_get_height(global::System.IntPtr image);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint sk_image_get_unique_id(global::System.IntPtr image);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKAlphaType__SkiaSharp sk_image_get_alpha_type(global::System.IntPtr image);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_image_is_alpha_only(global::System.IntPtr image);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_image_make_shader(
					global::System.IntPtr image, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp tileX, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp tileY, 
					global::SkiaSharp.SKMatrix__SkiaSharp* localMatrix);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_image_make_shader", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_image_make_shader__0(
					global::System.IntPtr image, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp tileX, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp tileY, 
					global::System.IntPtr localMatrixZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_image_peek_pixels(
					global::System.IntPtr image, 
					global::System.IntPtr pixmap);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_image_is_texture_backed(global::System.IntPtr image);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_image_read_pixels(
					global::System.IntPtr image, 
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* dstInfo, 
					global::System.IntPtr dstPixels, 
					global::System.IntPtr dstRowBytes, 
					int srcX, 
					int srcY, 
					global::SkiaSharp.SKImageCachingHint__SkiaSharp cachingHint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_image_read_pixels_into_pixmap(
					global::System.IntPtr image, 
					global::System.IntPtr dst, 
					int srcX, 
					int srcY, 
					global::SkiaSharp.SKImageCachingHint__SkiaSharp cachingHint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_image_scale_pixels(
					global::System.IntPtr image, 
					global::System.IntPtr dst, 
					global::SkiaSharp.SKFilterQuality__SkiaSharp quality, 
					global::SkiaSharp.SKImageCachingHint__SkiaSharp cachingHint);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_image_encode(global::System.IntPtr image);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_image_encode_specific(
					global::System.IntPtr image, 
					global::SkiaSharp.SKEncodedImageFormat__SkiaSharp encoder, 
					int quality);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_image_make_subset(
					global::System.IntPtr image, 
					global::SkiaSharp.SKRectI__SkiaSharp* subset);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_image_make_non_texture_image(global::System.IntPtr image);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_image_make_with_filter(
					global::System.IntPtr image, 
					global::System.IntPtr filter, 
					global::SkiaSharp.SKRectI__SkiaSharp* subset, 
					global::SkiaSharp.SKRectI__SkiaSharp* clipbounds, 
					global::SkiaSharp.SKRectI__SkiaSharp* outSubset, 
					global::SkiaSharp.SKPoint__SkiaSharp* outOffset);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_path_contains(
					global::System.IntPtr cpath, 
					float x, 
					float y);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_path_get_last_point(
					global::System.IntPtr cpath, 
					global::SkiaSharp.SKPoint__SkiaSharp* point);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_path_new();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_delete(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_move_to(
					global::System.IntPtr t, 
					float x, 
					float y);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_rmove_to(
					global::System.IntPtr t, 
					float dx, 
					float dy);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_line_to(
					global::System.IntPtr t, 
					float x, 
					float y);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_rline_to(
					global::System.IntPtr t, 
					float dx, 
					float dy);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_quad_to(
					global::System.IntPtr t, 
					float x0, 
					float y0, 
					float x1, 
					float y1);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_rquad_to(
					global::System.IntPtr t, 
					float dx0, 
					float dy0, 
					float dx1, 
					float dy1);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_conic_to(
					global::System.IntPtr t, 
					float x0, 
					float y0, 
					float x1, 
					float y1, 
					float w);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_rconic_to(
					global::System.IntPtr t, 
					float dx0, 
					float dy0, 
					float dx1, 
					float dy1, 
					float w);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_cubic_to(
					global::System.IntPtr t, 
					float x0, 
					float y0, 
					float x1, 
					float y1, 
					float x2, 
					float y2);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_rcubic_to(
					global::System.IntPtr t, 
					float dx0, 
					float dy0, 
					float dx1, 
					float dy1, 
					float dx2, 
					float dy2);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_close(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_rewind(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_reset(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_add_rect(
					global::System.IntPtr t, 
					global::SkiaSharp.SKRect__SkiaSharp* rect, 
					global::SkiaSharp.SKPathDirection__SkiaSharp direction);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_add_rect_start(
					global::System.IntPtr t, 
					global::SkiaSharp.SKRect__SkiaSharp* rect, 
					global::SkiaSharp.SKPathDirection__SkiaSharp direction, 
					uint startIndex);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_add_oval(
					global::System.IntPtr t, 
					global::SkiaSharp.SKRect__SkiaSharp* rect, 
					global::SkiaSharp.SKPathDirection__SkiaSharp direction);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_add_arc(
					global::System.IntPtr t, 
					global::SkiaSharp.SKRect__SkiaSharp* rect, 
					float startAngle, 
					float sweepAngle);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_add_path_offset(
					global::System.IntPtr t, 
					global::System.IntPtr other, 
					float dx, 
					float dy, 
					global::SkiaSharp.SKPathAddMode__SkiaSharp mode);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_add_path_matrix(
					global::System.IntPtr t, 
					global::System.IntPtr other, 
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix, 
					global::SkiaSharp.SKPathAddMode__SkiaSharp mode);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_add_path(
					global::System.IntPtr t, 
					global::System.IntPtr other, 
					global::SkiaSharp.SKPathAddMode__SkiaSharp mode);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_add_path_reverse(
					global::System.IntPtr t, 
					global::System.IntPtr other);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_path_get_bounds(
					global::System.IntPtr t, 
					global::SkiaSharp.SKRect__SkiaSharp* rect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_compute_tight_bounds(
					global::System.IntPtr t, 
					global::SkiaSharp.SKRect__SkiaSharp* rect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKPathFillType__SkiaSharp sk_path_get_filltype(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_set_filltype(
					global::System.IntPtr t, 
					global::SkiaSharp.SKPathFillType__SkiaSharp filltype);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_path_clone(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_path_transform(
					global::System.IntPtr t, 
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_arc_to(
					global::System.IntPtr t, 
					float rx, 
					float ry, 
					float xAxisRotate, 
					global::SkiaSharp.SKPathArcSize__SkiaSharp largeArc, 
					global::SkiaSharp.SKPathDirection__SkiaSharp sweep, 
					float x, 
					float y);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_rarc_to(
					global::System.IntPtr t, 
					float rx, 
					float ry, 
					float xAxisRotate, 
					global::SkiaSharp.SKPathArcSize__SkiaSharp largeArc, 
					global::SkiaSharp.SKPathDirection__SkiaSharp sweep, 
					float x, 
					float y);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_arc_to_with_oval(
					global::System.IntPtr t, 
					global::SkiaSharp.SKRect__SkiaSharp* oval, 
					float startAngle, 
					float sweepAngle, 
					sbyte forceMoveTo);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_arc_to_with_points(
					global::System.IntPtr t, 
					float x1, 
					float y1, 
					float x2, 
					float y2, 
					float radius);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_add_rounded_rect(
					global::System.IntPtr t, 
					global::SkiaSharp.SKRect__SkiaSharp* rect, 
					float rx, 
					float ry, 
					global::SkiaSharp.SKPathDirection__SkiaSharp dir);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_add_circle(
					global::System.IntPtr t, 
					float x, 
					float y, 
					float radius, 
					global::SkiaSharp.SKPathDirection__SkiaSharp dir);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_path_count_verbs(global::System.IntPtr path);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_path_count_points(global::System.IntPtr path);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_get_point(
					global::System.IntPtr path, 
					int index, 
					global::SkiaSharp.SKPoint__SkiaSharp* point);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_path_get_points(
					global::System.IntPtr path, 
					global::SkiaSharp.SKPoint__SkiaSharp* points, 
					int max);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKPathConvexity__SkiaSharp sk_path_get_convexity(global::System.IntPtr cpath);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_set_convexity(
					global::System.IntPtr cpath, 
					global::SkiaSharp.SKPathConvexity__SkiaSharp convexity);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_path_parse_svg_string(
					global::System.IntPtr cpath, 
					byte* str);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_to_svg_string(
					global::System.IntPtr cpath, 
					global::System.IntPtr str);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_path_convert_conic_to_quads(
					global::SkiaSharp.SKPoint__SkiaSharp* p0, 
					global::SkiaSharp.SKPoint__SkiaSharp* p1, 
					global::SkiaSharp.SKPoint__SkiaSharp* p2, 
					float w, 
					global::SkiaSharp.SKPoint__SkiaSharp* pts, 
					int pow2);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_add_poly(
					global::System.IntPtr cpath, 
					global::SkiaSharp.SKPoint__SkiaSharp* points, 
					int count, 
					sbyte close);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKPathSegmentMask__SkiaSharp sk_path_get_segment_masks(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_pathmeasure_new();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_pathmeasure_new_with_path(
					global::System.IntPtr path, 
					sbyte forceClosed, 
					float resScale);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_pathmeasure_destroy(global::System.IntPtr pathMeasure);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_pathmeasure_set_path(
					global::System.IntPtr pathMeasure, 
					global::System.IntPtr path, 
					sbyte forceClosed);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static float sk_pathmeasure_get_length(global::System.IntPtr pathMeasure);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_pathmeasure_get_pos_tan(
					global::System.IntPtr pathMeasure, 
					float distance, 
					global::SkiaSharp.SKPoint__SkiaSharp* position, 
					global::SkiaSharp.SKPoint__SkiaSharp* tangent);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_pathmeasure_get_pos_tan", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_pathmeasure_get_pos_tan__0(
					global::System.IntPtr pathMeasure, 
					float distance, 
					global::System.IntPtr positionZero, 
					global::SkiaSharp.SKPoint__SkiaSharp* tangent);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_pathmeasure_get_pos_tan", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_pathmeasure_get_pos_tan__1(
					global::System.IntPtr pathMeasure, 
					float distance, 
					global::SkiaSharp.SKPoint__SkiaSharp* position, 
					global::System.IntPtr tangentZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_pathmeasure_get_matrix(
					global::System.IntPtr pathMeasure, 
					float distance, 
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix, 
					global::SkiaSharp.SKPathMeasureMatrixFlags__SkiaSharp flags);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_pathmeasure_get_segment(
					global::System.IntPtr pathMeasure, 
					float start, 
					float stop, 
					global::System.IntPtr dst, 
					sbyte startWithMoveTo);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_pathmeasure_is_closed(global::System.IntPtr pathMeasure);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_pathmeasure_next_contour(global::System.IntPtr pathMeasure);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_pathop_op(
					global::System.IntPtr one, 
					global::System.IntPtr two, 
					global::SkiaSharp.SKPathOp__SkiaSharp op, 
					global::System.IntPtr result);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_pathop_simplify(
					global::System.IntPtr path, 
					global::System.IntPtr result);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_pathop_tight_bounds(
					global::System.IntPtr path, 
					global::SkiaSharp.SKRect__SkiaSharp* result);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_opbuilder_new();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_opbuilder_destroy(global::System.IntPtr builder);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_opbuilder_add(
					global::System.IntPtr builder, 
					global::System.IntPtr path, 
					global::SkiaSharp.SKPathOp__SkiaSharp op);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_opbuilder_resolve(
					global::System.IntPtr builder, 
					global::System.IntPtr result);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_path_create_iter(
					global::System.IntPtr path, 
					int forceClose);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKPathVerb__SkiaSharp sk_path_iter_next(
					global::System.IntPtr iterator, 
					global::SkiaSharp.SKPoint__SkiaSharp* points, 
					int doConsumeDegenerates, 
					int exact);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static float sk_path_iter_conic_weight(global::System.IntPtr iterator);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_path_iter_is_close_line(global::System.IntPtr iterator);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_path_iter_is_closed_contour(global::System.IntPtr iterator);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_iter_destroy(global::System.IntPtr path);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_path_create_rawiter(global::System.IntPtr path);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKPathVerb__SkiaSharp sk_path_rawiter_next(
					global::System.IntPtr iterator, 
					global::SkiaSharp.SKPoint__SkiaSharp* points);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKPathVerb__SkiaSharp sk_path_rawiter_peek(global::System.IntPtr iterator);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static float sk_path_rawiter_conic_weight(global::System.IntPtr iterator);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_rawiter_destroy(global::System.IntPtr path);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_maskfilter_unref(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_maskfilter_new_blur(
					global::SkiaSharp.SKBlurStyle__SkiaSharp style, 
					float sigma);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_maskfilter_new_blur_with_flags(
					global::SkiaSharp.SKBlurStyle__SkiaSharp style, 
					float sigma, 
					global::SkiaSharp.SKRect__SkiaSharp* occluder, 
					global::SkiaSharp.SKBlurMaskFilterFlags__SkiaSharp flags);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_maskfilter_new_table(byte* table);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_maskfilter_new_gamma(float gamma);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_maskfilter_new_clip(
					byte min, 
					byte max);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_croprect_new();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_croprect_new_with_rect(
					global::SkiaSharp.SKRect__SkiaSharp* rect, 
					global::SkiaSharp.SKCropRectFlags__SkiaSharp flags);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_imagefilter_croprect_destructor(global::System.IntPtr cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_imagefilter_croprect_get_rect(
					global::System.IntPtr cropRect, 
					global::SkiaSharp.SKRect__SkiaSharp* rect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKCropRectFlags__SkiaSharp sk_imagefilter_croprect_get_flags(global::System.IntPtr cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_imagefilter_unref(global::System.IntPtr filter);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_matrix(
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix, 
					global::SkiaSharp.SKFilterQuality__SkiaSharp quality, 
					global::System.IntPtr input);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_alpha_threshold(
					global::SkiaSharp.SKRectI__SkiaSharp* region, 
					float innerThreshold, 
					float outerThreshold, 
					global::System.IntPtr input);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_blur(
					float sigmaX, 
					float sigmaY, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_color_filter(
					global::System.IntPtr cf, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_compose(
					global::System.IntPtr outer, 
					global::System.IntPtr inner);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_displacement_map_effect(
					global::SkiaSharp.SKDisplacementMapEffectChannelSelectorType__SkiaSharp xChannelSelector, 
					global::SkiaSharp.SKDisplacementMapEffectChannelSelectorType__SkiaSharp yChannelSelector, 
					float scale, 
					global::System.IntPtr displacement, 
					global::System.IntPtr color, 
					global::System.IntPtr cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_drop_shadow(
					float dx, 
					float dy, 
					float sigmaX, 
					float sigmaY, 
					global::SkiaSharp.SKColor__SkiaSharp color, 
					global::SkiaSharp.SKDropShadowImageFilterShadowMode__SkiaSharp shadowMode, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_distant_lit_diffuse(
					global::SkiaSharp.SKPoint3__SkiaSharp* direction, 
					global::SkiaSharp.SKColor__SkiaSharp lightColor, 
					float surfaceScale, 
					float kd, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_point_lit_diffuse(
					global::SkiaSharp.SKPoint3__SkiaSharp* location, 
					global::SkiaSharp.SKColor__SkiaSharp lightColor, 
					float surfaceScale, 
					float kd, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_spot_lit_diffuse(
					global::SkiaSharp.SKPoint3__SkiaSharp* location, 
					global::SkiaSharp.SKPoint3__SkiaSharp* target, 
					float specularExponent, 
					float cutoffAngle, 
					global::SkiaSharp.SKColor__SkiaSharp lightColor, 
					float surfaceScale, 
					float kd, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_distant_lit_specular(
					global::SkiaSharp.SKPoint3__SkiaSharp* direction, 
					global::SkiaSharp.SKColor__SkiaSharp lightColor, 
					float surfaceScale, 
					float ks, 
					float shininess, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_point_lit_specular(
					global::SkiaSharp.SKPoint3__SkiaSharp* location, 
					global::SkiaSharp.SKColor__SkiaSharp lightColor, 
					float surfaceScale, 
					float ks, 
					float shininess, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_spot_lit_specular(
					global::SkiaSharp.SKPoint3__SkiaSharp* location, 
					global::SkiaSharp.SKPoint3__SkiaSharp* target, 
					float specularExponent, 
					float cutoffAngle, 
					global::SkiaSharp.SKColor__SkiaSharp lightColor, 
					float surfaceScale, 
					float ks, 
					float shininess, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_magnifier(
					global::SkiaSharp.SKRect__SkiaSharp* src, 
					float inset, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_matrix_convolution(
					global::SkiaSharp.SKSizeI__SkiaSharp* kernelSize, 
					float* kernel, 
					float gain, 
					float bias, 
					global::SkiaSharp.SKPointI__SkiaSharp* kernelOffset, 
					global::SkiaSharp.SKMatrixConvolutionTileMode__SkiaSharp tileMode, 
					sbyte convolveAlpha, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_merge(
					global::System.IntPtr* filters, 
					int count, 
					global::SkiaSharp.SKBlendMode__SkiaSharp* modes, 
					global::System.IntPtr cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_dilate(
					int radiusX, 
					int radiusY, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_erode(
					int radiusX, 
					int radiusY, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_offset(
					float dx, 
					float dy, 
					global::System.IntPtr input, 
					global::System.IntPtr cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_picture(global::System.IntPtr picture);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_picture_with_croprect(
					global::System.IntPtr picture, 
					global::SkiaSharp.SKRect__SkiaSharp* cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_picture_for_localspace(
					global::System.IntPtr picture, 
					global::SkiaSharp.SKRect__SkiaSharp* cropRect, 
					global::SkiaSharp.SKFilterQuality__SkiaSharp filterQuality);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_tile(
					global::SkiaSharp.SKRect__SkiaSharp* src, 
					global::SkiaSharp.SKRect__SkiaSharp* dst, 
					global::System.IntPtr input);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_xfermode(
					global::SkiaSharp.SKBlendMode__SkiaSharp mode, 
					global::System.IntPtr background, 
					global::System.IntPtr foreground, 
					global::System.IntPtr cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_arithmetic(
					float k1, 
					float k2, 
					float k3, 
					float k4, 
					sbyte enforcePMColor, 
					global::System.IntPtr background, 
					global::System.IntPtr foreground, 
					global::System.IntPtr cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_image_source(
					global::System.IntPtr image, 
					global::SkiaSharp.SKRect__SkiaSharp* srcRect, 
					global::SkiaSharp.SKRect__SkiaSharp* dstRect, 
					global::SkiaSharp.SKFilterQuality__SkiaSharp filterQuality);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_image_source_default(global::System.IntPtr image);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_imagefilter_new_paint(
					global::System.IntPtr paint, 
					global::System.IntPtr cropRect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_colorfilter_unref(global::System.IntPtr filter);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_colorfilter_new_mode(
					global::SkiaSharp.SKColor__SkiaSharp c, 
					global::SkiaSharp.SKBlendMode__SkiaSharp mode);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_colorfilter_new_lighting(
					global::SkiaSharp.SKColor__SkiaSharp mul, 
					global::SkiaSharp.SKColor__SkiaSharp add);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_colorfilter_new_compose(
					global::System.IntPtr outer, 
					global::System.IntPtr inner);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_colorfilter_new_color_matrix(float* array);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_colorfilter_new_luma_color();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_colorfilter_new_table(byte* table);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_colorfilter_new_table_argb(
					byte* tableA, 
					byte* tableR, 
					byte* tableG, 
					byte* tableB);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_colorfilter_new_high_contrast(global::SkiaSharp.SKHighContrastConfig__SkiaSharp* config);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_data_new_empty();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_data_new_with_copy(
					global::System.IntPtr src, 
					global::System.IntPtr length);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_data_new_with_copy", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_data_new_with_copy__0(
					byte* src, 
					global::System.IntPtr length);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_data_new_from_malloc(
					global::System.IntPtr malloc, 
					global::System.IntPtr length);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_data_new_from_malloc", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_data_new_from_malloc__0(
					byte* malloc, 
					global::System.IntPtr length);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_data_new_subset(
					global::System.IntPtr src, 
					global::System.IntPtr offset, 
					global::System.IntPtr length);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_data_new_from_file(byte* path);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_data_new_from_stream(
					global::System.IntPtr stream, 
					global::System.IntPtr length);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_data_new_with_proc(
					global::System.IntPtr ptr, 
					global::System.IntPtr length, 
					global::System.IntPtr proc, 
					global::System.IntPtr ctx);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_data_unref(global::System.IntPtr d);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_data_get_size(global::System.IntPtr d);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_data_get_data(global::System.IntPtr d);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_data_new_uninitialized(global::System.IntPtr size);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_string_new_empty();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_string_new_with_copy(
					byte* src, 
					global::System.IntPtr length);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_string_destructor(global::System.IntPtr skstring);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_string_get_size(global::System.IntPtr skstring);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_string_get_c_str(global::System.IntPtr skstring);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_picture_recorder_delete(global::System.IntPtr r);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_picture_recorder_new();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_picture_recorder_begin_recording(
					global::System.IntPtr r, 
					global::SkiaSharp.SKRect__SkiaSharp* rect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_picture_recorder_end_recording(global::System.IntPtr r);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_picture_get_recording_canvas(global::System.IntPtr r);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_picture_unref(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint sk_picture_get_unique_id(global::System.IntPtr p);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_picture_get_cull_rect(
					global::System.IntPtr p, 
					global::SkiaSharp.SKRect__SkiaSharp* rect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_shader_unref(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_empty();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_color(global::SkiaSharp.SKColor__SkiaSharp color);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_local_matrix(
					global::System.IntPtr proxy, 
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_color_filter(
					global::System.IntPtr proxy, 
					global::System.IntPtr filter);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_bitmap(
					global::System.IntPtr src, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp tmx, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp tmy, 
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_shader_new_bitmap", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_bitmap__0(
					global::System.IntPtr src, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp tmx, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp tmy, 
					global::System.IntPtr matrixZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_linear_gradient(
					global::SkiaSharp.SKPoint__SkiaSharp* points, 
					global::SkiaSharp.SKColor__SkiaSharp* colors, 
					float* colorPos, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_shader_new_linear_gradient", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_linear_gradient__0(
					global::SkiaSharp.SKPoint__SkiaSharp* points, 
					global::SkiaSharp.SKColor__SkiaSharp* colors, 
					float* colorPos, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					global::System.IntPtr matrixZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_radial_gradient(
					global::SkiaSharp.SKPoint__SkiaSharp* center, 
					float radius, 
					global::SkiaSharp.SKColor__SkiaSharp* colors, 
					float* colorPos, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_shader_new_radial_gradient", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_radial_gradient__0(
					global::SkiaSharp.SKPoint__SkiaSharp* center, 
					float radius, 
					global::SkiaSharp.SKColor__SkiaSharp* colors, 
					float* colorPos, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					global::System.IntPtr matrixZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_sweep_gradient(
					global::SkiaSharp.SKPoint__SkiaSharp* center, 
					global::SkiaSharp.SKColor__SkiaSharp* colors, 
					float* colorPos, 
					int count, 
					global::System.IntPtr matrixZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_shader_new_sweep_gradient", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_sweep_gradient__0(
					global::SkiaSharp.SKPoint__SkiaSharp* center, 
					global::SkiaSharp.SKColor__SkiaSharp* colors, 
					float* colorPos, 
					int count, 
					global::SkiaSharp.SKMatrix__SkiaSharp* matrixZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_two_point_conical_gradient(
					global::SkiaSharp.SKPoint__SkiaSharp* start, 
					float startRadius, 
					global::SkiaSharp.SKPoint__SkiaSharp* end, 
					float endRadius, 
					global::SkiaSharp.SKColor__SkiaSharp* colors, 
					float* colorPos, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_shader_new_two_point_conical_gradient", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_two_point_conical_gradient__0(
					global::SkiaSharp.SKPoint__SkiaSharp* start, 
					float startRadius, 
					global::SkiaSharp.SKPoint__SkiaSharp* end, 
					float endRadius, 
					global::SkiaSharp.SKColor__SkiaSharp* colors, 
					float* colorPos, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					global::System.IntPtr matrixZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_shader_new_linear_gradient", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_linear_gradient__1(
					global::SkiaSharp.SKPoint__SkiaSharp* points, 
					global::SkiaSharp.SKColor__SkiaSharp* colors, 
					global::System.IntPtr colorPosZero, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_shader_new_linear_gradient", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_linear_gradient__2(
					global::SkiaSharp.SKPoint__SkiaSharp* points, 
					global::SkiaSharp.SKColor__SkiaSharp* colors, 
					global::System.IntPtr colorPosZero, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					global::System.IntPtr matrixZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_shader_new_radial_gradient", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_radial_gradient__1(
					global::SkiaSharp.SKPoint__SkiaSharp* center, 
					float radius, 
					global::SkiaSharp.SKColor__SkiaSharp* colors, 
					global::System.IntPtr colorPosZero, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_shader_new_radial_gradient", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_radial_gradient__2(
					global::SkiaSharp.SKPoint__SkiaSharp* center, 
					float radius, 
					global::SkiaSharp.SKColor__SkiaSharp* colors, 
					global::System.IntPtr colorPosZero, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					global::System.IntPtr matrixZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_shader_new_sweep_gradient", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_sweep_gradient__1(
					global::SkiaSharp.SKPoint__SkiaSharp* center, 
					global::SkiaSharp.SKColor__SkiaSharp* colors, 
					global::System.IntPtr colorPosZero, 
					int count, 
					global::System.IntPtr matrixZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_shader_new_sweep_gradient", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_sweep_gradient__2(
					global::SkiaSharp.SKPoint__SkiaSharp* center, 
					global::SkiaSharp.SKColor__SkiaSharp* colors, 
					global::System.IntPtr colorPosZero, 
					int count, 
					global::SkiaSharp.SKMatrix__SkiaSharp* matrixZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_shader_new_two_point_conical_gradient", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_two_point_conical_gradient__1(
					global::SkiaSharp.SKPoint__SkiaSharp* start, 
					float startRadius, 
					global::SkiaSharp.SKPoint__SkiaSharp* end, 
					float endRadius, 
					global::SkiaSharp.SKColor__SkiaSharp* colors, 
					global::System.IntPtr colorPosZero, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_shader_new_two_point_conical_gradient", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_two_point_conical_gradient__2(
					global::SkiaSharp.SKPoint__SkiaSharp* start, 
					float startRadius, 
					global::SkiaSharp.SKPoint__SkiaSharp* end, 
					float endRadius, 
					global::SkiaSharp.SKColor__SkiaSharp* colors, 
					global::System.IntPtr colorPosZero, 
					int count, 
					global::SkiaSharp.SKShaderTileMode__SkiaSharp mode, 
					global::System.IntPtr matrixZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_perlin_noise_fractal_noise(
					float baseFrequencyX, 
					float baseFrequencyY, 
					int numOctaves, 
					float seed, 
					global::System.IntPtr tileSizeZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_shader_new_perlin_noise_fractal_noise", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_perlin_noise_fractal_noise__0(
					float baseFrequencyX, 
					float baseFrequencyY, 
					int numOctaves, 
					float seed, 
					global::SkiaSharp.SKPointI__SkiaSharp* tileSize);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_perlin_noise_turbulence(
					float baseFrequencyX, 
					float baseFrequencyY, 
					int numOctaves, 
					float seed, 
					global::System.IntPtr tileSizeZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_shader_new_perlin_noise_turbulence", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_perlin_noise_turbulence__0(
					float baseFrequencyX, 
					float baseFrequencyY, 
					int numOctaves, 
					float seed, 
					global::SkiaSharp.SKPointI__SkiaSharp* tileSize);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_compose(
					global::System.IntPtr shaderA, 
					global::System.IntPtr shaderB);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_shader_new_compose_with_mode(
					global::System.IntPtr shaderA, 
					global::System.IntPtr shaderB, 
					global::SkiaSharp.SKBlendMode__SkiaSharp mode);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_typeface_create_from_name(
					byte* str, 
					global::SkiaSharp.SKTypefaceStyle__SkiaSharp style);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_typeface_create_from_name_with_font_style(
					byte* familyName, 
					int weight, 
					int width, 
					global::SkiaSharp.SKFontStyleSlant__SkiaSharp slant);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_typeface_create_from_typeface(
					global::System.IntPtr typeface, 
					global::SkiaSharp.SKTypefaceStyle__SkiaSharp style);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_typeface_create_from_file(
					byte* path, 
					int index);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_typeface_create_from_stream(
					global::System.IntPtr stream, 
					int index);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_typeface_unref(global::System.IntPtr t);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_typeface_chars_to_glyphs(
					global::System.IntPtr t, 
					global::System.IntPtr chars, 
					global::SkiaSharp.SKEncoding__SkiaSharp encoding, 
					global::System.IntPtr glyphPtr, 
					int glyphCount);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_typeface_get_family_name(global::System.IntPtr typeface);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_typeface_count_tables(global::System.IntPtr typeface);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_typeface_get_table_tags(
					global::System.IntPtr typeface, 
					uint* tags);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_typeface_get_table_size(
					global::System.IntPtr typeface, 
					uint tag);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_typeface_get_table_data(
					global::System.IntPtr typeface, 
					uint tag, 
					global::System.IntPtr offset, 
					global::System.IntPtr length, 
					byte* data);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_typeface_get_font_weight(global::System.IntPtr typeface);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_typeface_get_font_width(global::System.IntPtr typeface);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKFontStyleSlant__SkiaSharp sk_typeface_get_font_slant(global::System.IntPtr typeface);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKTypefaceStyle__SkiaSharp sk_typeface_get_style(global::System.IntPtr typeface);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_typeface_open_stream(
					global::System.IntPtr typeface, 
					int* ttcIndex);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_typeface_get_units_per_em(global::System.IntPtr typeface);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_fontmgr_ref_default();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_fontmgr_unref(global::System.IntPtr fontmgr);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_fontmgr_count_families(global::System.IntPtr fontmgr);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_fontmgr_get_family_name(
					global::System.IntPtr fontmgr, 
					int index, 
					global::System.IntPtr familyName);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_fontmgr_match_family_style_character(
					global::System.IntPtr fontmgr, 
					byte* familyName, 
					int weight, 
					int width, 
					global::SkiaSharp.SKFontStyleSlant__SkiaSharp slant, 
					byte** bcp47, 
					int bcp47Count, 
					int character);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_memorystream_destroy(global::System.IntPtr stream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_filestream_destroy(global::System.IntPtr stream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_stream_asset_destroy(global::System.IntPtr stream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_stream_read(
					global::System.IntPtr stream, 
					global::System.IntPtr buffer, 
					global::System.IntPtr size);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_stream_skip(
					global::System.IntPtr stream, 
					global::System.IntPtr size);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_stream_is_at_end(global::System.IntPtr stream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_stream_read_s8(global::System.IntPtr stream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static short sk_stream_read_s16(global::System.IntPtr stream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_stream_read_s32(global::System.IntPtr stream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static byte sk_stream_read_u8(global::System.IntPtr stream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static ushort sk_stream_read_u16(global::System.IntPtr stream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint sk_stream_read_u32(global::System.IntPtr stream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_stream_read_bool(global::System.IntPtr stream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_stream_rewind(global::System.IntPtr stream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_stream_has_position(global::System.IntPtr stream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_stream_get_position(global::System.IntPtr stream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_stream_seek(
					global::System.IntPtr stream, 
					global::System.IntPtr position);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_stream_move(
					global::System.IntPtr stream, 
					long offset);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_stream_has_length(global::System.IntPtr stream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_stream_get_length(global::System.IntPtr stream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_stream_get_memory_base(global::System.IntPtr cstream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_filestream_new(byte* path);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_memorystream_new();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_memorystream_new_with_length(global::System.IntPtr length);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_memorystream_new_with_data(
					global::System.IntPtr data, 
					global::System.IntPtr length, 
					sbyte copyData);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_memorystream_new_with_data", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_memorystream_new_with_data__0(
					byte* data, 
					global::System.IntPtr length, 
					sbyte copyData);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_memorystream_new_with_skdata(global::System.IntPtr data);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_memorystream_set_memory(
					global::System.IntPtr s, 
					global::System.IntPtr data, 
					global::System.IntPtr length, 
					sbyte copyData);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_memorystream_set_memory", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_memorystream_set_memory__0(
					global::System.IntPtr s, 
					byte* data, 
					global::System.IntPtr length, 
					sbyte copyData);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_managedstream_new();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_managedstream_set_delegates(
					global::System.IntPtr pRead, 
					global::System.IntPtr pPeek, 
					global::System.IntPtr pIsAtEnd, 
					global::System.IntPtr pRewind, 
					global::System.IntPtr pGetPosition, 
					global::System.IntPtr pSeek, 
					global::System.IntPtr pMove, 
					global::System.IntPtr pGetLength, 
					global::System.IntPtr pCreateNew, 
					global::System.IntPtr pDestroy);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_managedstream_destroy(global::System.IntPtr stream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_managedwstream_new();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_managedwstream_destroy(global::System.IntPtr stream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_managedwstream_set_delegates(
					global::System.IntPtr pWrite, 
					global::System.IntPtr pFlush, 
					global::System.IntPtr pBytesWritten, 
					global::System.IntPtr pDestroy);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_filewstream_destroy(global::System.IntPtr cstream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_dynamicmemorywstream_destroy(global::System.IntPtr cstream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_filewstream_new(byte* path);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_dynamicmemorywstream_new();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_dynamicmemorywstream_detach_as_stream(global::System.IntPtr cstream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_dynamicmemorywstream_detach_as_data(global::System.IntPtr cstream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_dynamicmemorywstream_copy_to(
					global::System.IntPtr cstream, 
					global::System.IntPtr data);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_dynamicmemorywstream_write_to_stream(
					global::System.IntPtr cstream, 
					global::System.IntPtr dst);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_wstream_write(
					global::System.IntPtr cstream, 
					global::System.IntPtr buffer, 
					global::System.IntPtr size);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_wstream_write", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_wstream_write__0(
					global::System.IntPtr cstream, 
					byte* buffer, 
					global::System.IntPtr size);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_wstream_newline(global::System.IntPtr cstream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_wstream_flush(global::System.IntPtr cstream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_wstream_bytes_written(global::System.IntPtr cstream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_wstream_write_8(
					global::System.IntPtr cstream, 
					byte value);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_wstream_write_16(
					global::System.IntPtr cstream, 
					ushort value);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_wstream_write_32(
					global::System.IntPtr cstream, 
					uint value);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_wstream_write_text(
					global::System.IntPtr cstream, 
					byte* value);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_wstream_write_dec_as_text(
					global::System.IntPtr cstream, 
					int value);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_wstream_write_bigdec_as_text(
					global::System.IntPtr cstream, 
					long value, 
					int minDigits);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_wstream_write_hex_as_text(
					global::System.IntPtr cstream, 
					uint value, 
					int minDigits);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_wstream_write_scalar_as_text(
					global::System.IntPtr cstream, 
					float value);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_wstream_write_bool(
					global::System.IntPtr cstream, 
					sbyte value);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_wstream_write_scalar(
					global::System.IntPtr cstream, 
					float value);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_wstream_write_packed_uint(
					global::System.IntPtr cstream, 
					global::System.IntPtr value);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_wstream_write_stream(
					global::System.IntPtr cstream, 
					global::System.IntPtr input, 
					global::System.IntPtr length);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_wstream_get_size_of_packed_uint(global::System.IntPtr value);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_document_unref(global::System.IntPtr document);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_document_create_pdf_from_stream(
					global::System.IntPtr stream, 
					float dpi);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_document_create_pdf_from_stream_with_metadata(
					global::System.IntPtr stream, 
					float dpi, 
					global::SkiaSharp.SKDocumentPdfMetadataInternal__SkiaSharp* metadata);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_document_create_pdf_from_filename(
					byte* path, 
					float dpi);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_document_create_xps_from_stream(
					global::System.IntPtr stream, 
					float dpi);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_document_begin_page(
					global::System.IntPtr document, 
					float width, 
					float height, 
					global::SkiaSharp.SKRect__SkiaSharp* content);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_document_begin_page", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_document_begin_page__0(
					global::System.IntPtr document, 
					float width, 
					float height, 
					global::System.IntPtr content);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_document_end_page(global::System.IntPtr document);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_document_close(global::System.IntPtr document);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_document_abort(global::System.IntPtr document);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_codec_min_buffered_bytes_needed();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_codec_new_from_stream(global::System.IntPtr stream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_codec_new_from_data(global::System.IntPtr data);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_codec_destroy(global::System.IntPtr codec);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_codec_get_info(
					global::System.IntPtr codec, 
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* info);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_codec_get_encodedinfo(
					global::System.IntPtr codec, 
					global::SkiaSharp.SKEncodedInfo__SkiaSharp* info);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKCodecOrigin__SkiaSharp sk_codec_get_origin(global::System.IntPtr codec);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_codec_get_scaled_dimensions(
					global::System.IntPtr codec, 
					float desiredScale, 
					global::SkiaSharp.SKSizeI__SkiaSharp* dimensions);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_codec_get_valid_subset(
					global::System.IntPtr codec, 
					global::SkiaSharp.SKRectI__SkiaSharp* desiredSubset);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKEncodedImageFormat__SkiaSharp sk_codec_get_encoded_format(global::System.IntPtr codec);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKCodecResult__SkiaSharp sk_codec_get_pixels(
					global::System.IntPtr codec, 
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* info, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes, 
					global::SkiaSharp.SKCodecOptionsInternal__SkiaSharp* options, 
					global::System.IntPtr ctable, 
					int* ctableCount);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKCodecResult__SkiaSharp sk_codec_get_pixels_using_defaults(
					global::System.IntPtr codec, 
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* info, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKCodecResult__SkiaSharp sk_codec_start_incremental_decode(
					global::System.IntPtr codec, 
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* info, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes, 
					global::SkiaSharp.SKCodecOptionsInternal__SkiaSharp* options, 
					global::System.IntPtr ctable, 
					int* ctableCount);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_codec_start_incremental_decode", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKCodecResult__SkiaSharp sk_codec_start_incremental_decode__0(
					global::System.IntPtr codec, 
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* info, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes, 
					global::SkiaSharp.SKCodecOptionsInternal__SkiaSharp* options, 
					global::System.IntPtr ctableZero, 
					global::System.IntPtr ctableCountZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_codec_start_incremental_decode", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKCodecResult__SkiaSharp sk_codec_start_incremental_decode__1(
					global::System.IntPtr codec, 
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* info, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes, 
					global::System.IntPtr optionsZero, 
					global::System.IntPtr ctableZero, 
					global::System.IntPtr ctableCountZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKCodecResult__SkiaSharp sk_codec_incremental_decode(
					global::System.IntPtr codec, 
					int* rowsDecoded);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_codec_get_repetition_count(global::System.IntPtr codec);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_codec_get_frame_count(global::System.IntPtr codec);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_codec_get_frame_info(
					global::System.IntPtr codec, 
					global::SkiaSharp.SKCodecFrameInfo__SkiaSharp* frameInfo);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKCodecResult__SkiaSharp sk_codec_start_scanline_decode(
					global::System.IntPtr codec, 
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* info, 
					global::SkiaSharp.SKCodecOptionsInternal__SkiaSharp* options, 
					global::System.IntPtr ctable, 
					int* ctableCount);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_codec_start_scanline_decode", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKCodecResult__SkiaSharp sk_codec_start_scanline_decode__0(
					global::System.IntPtr codec, 
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* info, 
					global::SkiaSharp.SKCodecOptionsInternal__SkiaSharp* options, 
					global::System.IntPtr ctableZero, 
					global::System.IntPtr ctableCountZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_codec_start_scanline_decode", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKCodecResult__SkiaSharp sk_codec_start_scanline_decode__1(
					global::System.IntPtr codec, 
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* info, 
					global::System.IntPtr optionsZero, 
					global::System.IntPtr ctableZero, 
					global::System.IntPtr ctableCountZero);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_codec_get_scanlines(
					global::System.IntPtr codec, 
					global::System.IntPtr dst, 
					int countLines, 
					global::System.IntPtr rowBytes);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_codec_skip_scanlines(
					global::System.IntPtr codec, 
					int countLines);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKCodecScanlineOrder__SkiaSharp sk_codec_get_scanline_order(global::System.IntPtr codec);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_codec_next_scanline(global::System.IntPtr codec);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_codec_output_scanline(
					global::System.IntPtr codec, 
					int inputScanline);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_bitmap_new();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_bitmap_destructor(global::System.IntPtr b);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_bitmap_get_info(
					global::System.IntPtr b, 
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* info);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_bitmap_get_pixels(
					global::System.IntPtr b, 
					global::System.IntPtr* length);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_bitmap_get_pixel_colors(
					global::System.IntPtr b, 
					global::SkiaSharp.SKColor__SkiaSharp* colors);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_bitmap_set_pixel_colors(
					global::System.IntPtr b, 
					global::SkiaSharp.SKColor__SkiaSharp* colors);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_bitmap_reset(global::System.IntPtr b);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_bitmap_get_row_bytes(global::System.IntPtr b);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_bitmap_get_byte_count(global::System.IntPtr b);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_bitmap_is_null(global::System.IntPtr b);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_bitmap_is_immutable(global::System.IntPtr b);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_bitmap_set_immutable(global::System.IntPtr b);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_bitmap_is_volatile(global::System.IntPtr b);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_bitmap_set_volatile(
					global::System.IntPtr b, 
					sbyte value);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_bitmap_erase(
					global::System.IntPtr cbitmap, 
					global::SkiaSharp.SKColor__SkiaSharp color);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_bitmap_erase_rect(
					global::System.IntPtr cbitmap, 
					global::SkiaSharp.SKColor__SkiaSharp color, 
					global::SkiaSharp.SKRectI__SkiaSharp* rect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static byte sk_bitmap_get_addr_8(
					global::System.IntPtr cbitmap, 
					int x, 
					int y);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static ushort sk_bitmap_get_addr_16(
					global::System.IntPtr cbitmap, 
					int x, 
					int y);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint sk_bitmap_get_addr_32(
					global::System.IntPtr cbitmap, 
					int x, 
					int y);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_bitmap_get_addr(
					global::System.IntPtr cbitmap, 
					int x, 
					int y);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint sk_bitmap_get_pixel_color(
					global::System.IntPtr cbitmap, 
					int x, 
					int y);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint sk_bitmap_get_index8_color(
					global::System.IntPtr cbitmap, 
					int x, 
					int y);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_bitmap_set_pixel_color(
					global::System.IntPtr cbitmap, 
					int x, 
					int y, 
					global::SkiaSharp.SKColor__SkiaSharp color);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_bitmap_ready_to_draw(global::System.IntPtr b);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_bitmap_copy(
					global::System.IntPtr cbitmap, 
					global::System.IntPtr dst, 
					global::SkiaSharp.SKColorType__SkiaSharp ct);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_bitmap_can_copy_to(
					global::System.IntPtr cbitmap, 
					global::SkiaSharp.SKColorType__SkiaSharp ct);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_bitmap_lock_pixels(global::System.IntPtr b);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_bitmap_unlock_pixels(global::System.IntPtr b);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_bitmap_install_pixels(
					global::System.IntPtr cbitmap, 
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* cinfo, 
					global::System.IntPtr pixels, 
					global::System.IntPtr rowBytes, 
					global::System.IntPtr ctable, 
					global::System.IntPtr releaseProc, 
					global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_bitmap_install_pixels_with_pixmap(
					global::System.IntPtr cbitmap, 
					global::System.IntPtr cpixmap);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_bitmap_install_mask_pixels(
					global::System.IntPtr cbitmap, 
					global::SkiaSharp.SKMask__SkiaSharp* cmask);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_bitmap_try_alloc_pixels(
					global::System.IntPtr cbitmap, 
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* requestedInfo, 
					global::System.IntPtr rowBytes);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_bitmap_try_alloc_pixels_with_color_table(
					global::System.IntPtr cbitmap, 
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* requestedInfo, 
					global::System.IntPtr ctable, 
					global::SkiaSharp.SKBitmapAllocFlags__SkiaSharp flags);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_bitmap_get_colortable(global::System.IntPtr cbitmap);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_bitmap_set_pixels(
					global::System.IntPtr cbitmap, 
					global::System.IntPtr pixels, 
					global::System.IntPtr ctable);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_bitmap_peek_pixels(
					global::System.IntPtr cbitmap, 
					global::System.IntPtr cpixmap);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_bitmapscaler_resize(
					global::System.IntPtr cdst, 
					global::System.IntPtr csrc, 
					global::SkiaSharp.SKBitmapResizeMethod__SkiaSharp method);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_bitmap_extract_subset(
					global::System.IntPtr cbitmap, 
					global::System.IntPtr cdst, 
					global::SkiaSharp.SKRectI__SkiaSharp* subset);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_bitmap_extract_alpha(
					global::System.IntPtr cbitmap, 
					global::System.IntPtr dst, 
					global::System.IntPtr paint, 
					global::SkiaSharp.SKPointI__SkiaSharp* offset);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_bitmap_notify_pixels_changed(global::System.IntPtr cbitmap);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint sk_color_unpremultiply(global::SkiaSharp.SKPMColor__SkiaSharp pmcolor);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint sk_color_premultiply(global::SkiaSharp.SKColor__SkiaSharp color);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_color_unpremultiply_array(
					global::SkiaSharp.SKPMColor__SkiaSharp* pmcolors, 
					int size, 
					global::SkiaSharp.SKColor__SkiaSharp* colors);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint sk_color_premultiply_array(
					global::SkiaSharp.SKColor__SkiaSharp* colors, 
					int size, 
					global::SkiaSharp.SKPMColor__SkiaSharp* pmcolors);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_color_get_bit_shift(
					int* a, 
					int* r, 
					int* g, 
					int* b);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_pixmap_destructor(global::System.IntPtr cpixmap);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_pixmap_new();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_pixmap_new_with_params(
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* cinfo, 
					global::System.IntPtr addr, 
					global::System.IntPtr rowBytes, 
					global::System.IntPtr ctable);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_pixmap_reset(global::System.IntPtr cpixmap);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_pixmap_reset_with_params(
					global::System.IntPtr cpixmap, 
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* cinfo, 
					global::System.IntPtr addr, 
					global::System.IntPtr rowBytes, 
					global::System.IntPtr ctable);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_pixmap_get_info(
					global::System.IntPtr cpixmap, 
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* cinfo);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_pixmap_get_row_bytes(global::System.IntPtr cpixmap);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_pixmap_get_pixels(global::System.IntPtr cpixmap);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_pixmap_get_colortable(global::System.IntPtr cpixmap);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_pixmap_encode_image(
					global::System.IntPtr dst, 
					global::System.IntPtr src, 
					global::SkiaSharp.SKEncodedImageFormat__SkiaSharp encoder, 
					int quality);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_pixmap_read_pixels(
					global::System.IntPtr cpixmap, 
					global::SkiaSharp.SKImageInfoNative__SkiaSharp* dstInfo, 
					global::System.IntPtr dstPixels, 
					global::System.IntPtr dstRowBytes, 
					int srcX, 
					int srcY);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_mask_alloc_image(global::System.IntPtr bytes);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_mask_free_image(global::System.IntPtr image);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_mask_is_empty(global::SkiaSharp.SKMask__SkiaSharp* cmask);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_mask_compute_image_size(global::SkiaSharp.SKMask__SkiaSharp* cmask);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_mask_compute_total_image_size(global::SkiaSharp.SKMask__SkiaSharp* cmask);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static byte sk_mask_get_addr_1(
					global::SkiaSharp.SKMask__SkiaSharp* cmask, 
					int x, 
					int y);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static byte sk_mask_get_addr_8(
					global::SkiaSharp.SKMask__SkiaSharp* cmask, 
					int x, 
					int y);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static ushort sk_mask_get_addr_lcd_16(
					global::SkiaSharp.SKMask__SkiaSharp* cmask, 
					int x, 
					int y);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint sk_mask_get_addr_32(
					global::SkiaSharp.SKMask__SkiaSharp* cmask, 
					int x, 
					int y);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_mask_get_addr(
					global::SkiaSharp.SKMask__SkiaSharp* cmask, 
					int x, 
					int y);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_matrix_try_invert(
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix, 
					global::SkiaSharp.SKMatrix__SkiaSharp* result);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix_concat(
					global::SkiaSharp.SKMatrix__SkiaSharp* target, 
					global::SkiaSharp.SKMatrix__SkiaSharp* first, 
					global::SkiaSharp.SKMatrix__SkiaSharp* second);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix_pre_concat(
					global::SkiaSharp.SKMatrix__SkiaSharp* target, 
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix_post_concat(
					global::SkiaSharp.SKMatrix__SkiaSharp* target, 
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix_map_rect(
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix, 
					global::SkiaSharp.SKRect__SkiaSharp* dest, 
					global::SkiaSharp.SKRect__SkiaSharp* source);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix_map_points(
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix, 
					global::System.IntPtr dst, 
					global::System.IntPtr src, 
					int count);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix_map_vectors(
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix, 
					global::System.IntPtr dst, 
					global::System.IntPtr src, 
					int count);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix_map_xy(
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix, 
					float x, 
					float y, 
					global::SkiaSharp.SKPoint__SkiaSharp* result);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix_map_vector(
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix, 
					float x, 
					float y, 
					global::SkiaSharp.SKPoint__SkiaSharp* result);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static float sk_matrix_map_radius(
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix, 
					float radius);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_3dview_new();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_3dview_destroy(global::System.IntPtr cview);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_3dview_save(global::System.IntPtr cview);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_3dview_restore(global::System.IntPtr cview);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_3dview_translate(
					global::System.IntPtr cview, 
					float x, 
					float y, 
					float z);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_3dview_rotate_x_degrees(
					global::System.IntPtr cview, 
					float degrees);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_3dview_rotate_y_degrees(
					global::System.IntPtr cview, 
					float degrees);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_3dview_rotate_z_degrees(
					global::System.IntPtr cview, 
					float degrees);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_3dview_rotate_x_radians(
					global::System.IntPtr cview, 
					float radians);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_3dview_rotate_y_radians(
					global::System.IntPtr cview, 
					float radians);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_3dview_rotate_z_radians(
					global::System.IntPtr cview, 
					float radians);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_3dview_get_matrix(
					global::System.IntPtr cview, 
					global::SkiaSharp.SKMatrix__SkiaSharp* cmatrix);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_3dview_apply_to_canvas(
					global::System.IntPtr cview, 
					global::System.IntPtr ccanvas);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static float sk_3dview_dot_with_normal(
					global::System.IntPtr cview, 
					float dx, 
					float dy, 
					float dz);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_destroy(global::System.IntPtr matrix);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_matrix44_new();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_matrix44_new_identity();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_matrix44_new_copy(global::System.IntPtr src);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_matrix44_new_concat(
					global::System.IntPtr a, 
					global::System.IntPtr b);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_matrix44_new_matrix(global::SkiaSharp.SKMatrix__SkiaSharp* src);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_matrix44_equals(
					global::System.IntPtr matrix, 
					global::System.IntPtr other);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_to_matrix(
					global::System.IntPtr matrix, 
					global::SkiaSharp.SKMatrix__SkiaSharp* dst);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::SkiaSharp.SKMatrix44TypeMask__SkiaSharp sk_matrix44_get_type(global::System.IntPtr matrix);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_set_identity(global::System.IntPtr matrix);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static float sk_matrix44_get(
					global::System.IntPtr matrix, 
					int row, 
					int col);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_set(
					global::System.IntPtr matrix, 
					int row, 
					int col, 
					float value);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_as_col_major(
					global::System.IntPtr matrix, 
					float* dst);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_as_row_major(
					global::System.IntPtr matrix, 
					float* dst);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_set_col_major(
					global::System.IntPtr matrix, 
					float* src);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_set_row_major(
					global::System.IntPtr matrix, 
					float* src);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_set_translate(
					global::System.IntPtr matrix, 
					float dx, 
					float dy, 
					float dz);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_pre_translate(
					global::System.IntPtr matrix, 
					float dx, 
					float dy, 
					float dz);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_post_translate(
					global::System.IntPtr matrix, 
					float dx, 
					float dy, 
					float dz);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_set_scale(
					global::System.IntPtr matrix, 
					float sx, 
					float sy, 
					float sz);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_pre_scale(
					global::System.IntPtr matrix, 
					float sx, 
					float sy, 
					float sz);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_post_scale(
					global::System.IntPtr matrix, 
					float sx, 
					float sy, 
					float sz);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_set_rotate_about_degrees(
					global::System.IntPtr matrix, 
					float x, 
					float y, 
					float z, 
					float degrees);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_set_rotate_about_radians(
					global::System.IntPtr matrix, 
					float x, 
					float y, 
					float z, 
					float radians);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_set_rotate_about_radians_unit(
					global::System.IntPtr matrix, 
					float x, 
					float y, 
					float z, 
					float radians);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_set_concat(
					global::System.IntPtr matrix, 
					global::System.IntPtr a, 
					global::System.IntPtr b);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_pre_concat(
					global::System.IntPtr matrix, 
					global::System.IntPtr m);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_post_concat(
					global::System.IntPtr matrix, 
					global::System.IntPtr m);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_matrix44_invert(
					global::System.IntPtr matrix, 
					global::System.IntPtr inverse);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_transpose(global::System.IntPtr matrix);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_map_scalars(
					global::System.IntPtr matrix, 
					float* src, 
					float* dst);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_matrix44_map2(
					global::System.IntPtr matrix, 
					float* src2, 
					int count, 
					float* dst);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_matrix44_preserves_2d_axis_alignment(
					global::System.IntPtr matrix, 
					float epsilon);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static double sk_matrix44_determinant(global::System.IntPtr matrix);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_path_effect_unref(global::System.IntPtr effect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_path_effect_create_compose(
					global::System.IntPtr outer, 
					global::System.IntPtr inner);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_path_effect_create_sum(
					global::System.IntPtr first, 
					global::System.IntPtr second);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_path_effect_create_discrete(
					float segLength, 
					float deviation, 
					uint seedAssist);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_path_effect_create_corner(float radius);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_path_effect_create_arc_to(float radius);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_path_effect_create_1d_path(
					global::System.IntPtr path, 
					float advance, 
					float phase, 
					global::SkiaSharp.SKPath1DPathEffectStyle__SkiaSharp style);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_path_effect_create_2d_line(
					float width, 
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_path_effect_create_2d_path(
					global::SkiaSharp.SKMatrix__SkiaSharp* matrix, 
					global::System.IntPtr path);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_path_effect_create_dash(
					float* intervals, 
					int count, 
					float phase);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_colortable_unref(global::System.IntPtr ctable);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_colortable_new(
					global::SkiaSharp.SKPMColor__SkiaSharp* colors, 
					int count);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sk_colortable_count(global::System.IntPtr ctable);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_colortable_read_colors(
					global::System.IntPtr ctable, 
					global::SkiaSharp.SKPMColor__SkiaSharp* colors);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_colortable_read_colors", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_colortable_read_colors__0(
					global::System.IntPtr ctable, 
					global::System.IntPtr* colors);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr gr_context_create(
					global::SkiaSharp.GRBackend__SkiaSharp backend, 
					global::System.IntPtr backendContext, 
					global::SkiaSharp.GRContextOptions__SkiaSharp* options);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr gr_context_create_with_defaults(
					global::SkiaSharp.GRBackend__SkiaSharp backend, 
					global::System.IntPtr backendContext);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void gr_context_unref(global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void gr_context_abandon_context(global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void gr_context_release_resources_and_abandon_context(global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void gr_context_get_resource_cache_limits(
					global::System.IntPtr context, 
					int* maxResources, 
					global::System.IntPtr* maxResourceBytes);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void gr_context_set_resource_cache_limits(
					global::System.IntPtr context, 
					int maxResources, 
					global::System.IntPtr maxResourceBytes);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void gr_context_get_resource_cache_usage(
					global::System.IntPtr context, 
					int* maxResources, 
					global::System.IntPtr* maxResourceBytes);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int gr_context_get_recommended_sample_count(
					global::System.IntPtr context, 
					global::SkiaSharp.GRPixelConfig__SkiaSharp config, 
					float dpi);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void gr_context_flush(global::System.IntPtr context);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void gr_context_reset_context(
					global::System.IntPtr context, 
					uint state);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr gr_glinterface_assemble_interface(
					global::System.IntPtr ctx, 
					global::System.IntPtr get);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr gr_glinterface_assemble_gl_interface(
					global::System.IntPtr ctx, 
					global::System.IntPtr get);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr gr_glinterface_assemble_gles_interface(
					global::System.IntPtr ctx, 
					global::System.IntPtr get);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr gr_glinterface_default_interface();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr gr_glinterface_create_native_interface();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void gr_glinterface_unref(global::System.IntPtr glInterface);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr gr_glinterface_clone(global::System.IntPtr glInterface);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte gr_glinterface_validate(global::System.IntPtr glInterface);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte gr_glinterface_has_extension(
					global::System.IntPtr glInterface, 
					byte* extension);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_xmlstreamwriter_new(global::System.IntPtr stream);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_xmlstreamwriter_delete(global::System.IntPtr writer);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_svgcanvas_create(
					global::SkiaSharp.SKRect__SkiaSharp* bounds, 
					global::System.IntPtr writer);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_region_new();

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_region_new2(global::System.IntPtr r);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_region_contains(
					global::System.IntPtr r, 
					global::System.IntPtr region);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_region_contains2(
					global::System.IntPtr r, 
					int x, 
					int y);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_region_intersects(
					global::System.IntPtr r, 
					global::System.IntPtr src);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", EntryPoint="sk_region_intersects", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_region_intersects__0(
					global::System.IntPtr r, 
					global::SkiaSharp.SKRectI__SkiaSharp rect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_region_set_region(
					global::System.IntPtr r, 
					global::System.IntPtr src);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_region_set_rect(
					global::System.IntPtr r, 
					global::SkiaSharp.SKRectI__SkiaSharp* rect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_region_set_path(
					global::System.IntPtr r, 
					global::System.IntPtr t, 
					global::System.IntPtr clip);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_region_op(
					global::System.IntPtr r, 
					int left, 
					int top, 
					int right, 
					int bottom, 
					global::SkiaSharp.SKRegionOperation__SkiaSharp op);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte sk_region_op2(
					global::System.IntPtr r, 
					global::System.IntPtr src, 
					global::SkiaSharp.SKRegionOperation__SkiaSharp op);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_region_get_bounds(
					global::System.IntPtr r, 
					global::SkiaSharp.SKRectI__SkiaSharp* rect);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sk_vertices_unref(global::System.IntPtr cvertices);

		[global::System.Runtime.InteropServices.DllImport("libSkiaSharp.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sk_vertices_make_copy(
					global::SkiaSharp.SKVertexMode__SkiaSharp vmode, 
					int vertexCount, 
					global::SkiaSharp.SKPoint__SkiaSharp* positions, 
					global::SkiaSharp.SKPoint__SkiaSharp* texs, 
					global::SkiaSharp.SKColor__SkiaSharp* colors, 
					int indexCount, 
					ushort* indices);
	}

	public unsafe static partial class api_ms_win_core_libraryloader_l2_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-libraryloader-l2-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LoadPackagedLibrary(
					ushort* lpFileName, 
					uint Reserved);
	}

	public unsafe static partial class api_ms_win_core_libraryloader_l1_2_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-libraryloader-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr GetProcAddress(
					global::System.IntPtr hModule, 
					byte* lpProcName);
	}

	public unsafe static partial class libEGL_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("libEGL.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr eglGetProcAddress(byte* procname);

		[global::System.Runtime.InteropServices.DllImport("libEGL.dll", EntryPoint="eglGetProcAddress", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr eglGetProcAddress__0(byte* procname);

		[global::System.Runtime.InteropServices.DllImport("libEGL.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr eglGetPlatformDisplayEXT(
					uint platform, 
					global::System.IntPtr native_display, 
					int* attrib_list);

		[global::System.Runtime.InteropServices.DllImport("libEGL.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int eglInitialize(
					global::System.IntPtr dpy, 
					int* major, 
					int* minor);

		[global::System.Runtime.InteropServices.DllImport("libEGL.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int eglChooseConfig(
					global::System.IntPtr dpy, 
					int* attrib_list, 
					global::System.IntPtr* configs, 
					int config_size, 
					int* num_config);

		[global::System.Runtime.InteropServices.DllImport("libEGL.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr eglCreateContext(
					global::System.IntPtr dpy, 
					global::System.IntPtr config, 
					global::System.IntPtr share_context, 
					int* attrib_list);

		[global::System.Runtime.InteropServices.DllImport("libEGL.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr eglCreateWindowSurface(
					global::System.IntPtr dpy, 
					global::System.IntPtr config, 
					void* win, 
					int* attrib_list);

		[global::System.Runtime.InteropServices.DllImport("libEGL.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int eglQuerySurface(
					global::System.IntPtr dpy, 
					global::System.IntPtr surface, 
					int attribute, 
					int* value);

		[global::System.Runtime.InteropServices.DllImport("libEGL.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int eglDestroySurface(
					global::System.IntPtr dpy, 
					global::System.IntPtr surface);

		[global::System.Runtime.InteropServices.DllImport("libEGL.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int eglMakeCurrent(
					global::System.IntPtr dpy, 
					global::System.IntPtr draw, 
					global::System.IntPtr read, 
					global::System.IntPtr ctx);

		[global::System.Runtime.InteropServices.DllImport("libEGL.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int eglSwapBuffers(
					global::System.IntPtr dpy, 
					global::System.IntPtr surface);

		[global::System.Runtime.InteropServices.DllImport("libEGL.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int eglDestroyContext(
					global::System.IntPtr dpy, 
					global::System.IntPtr ctx);

		[global::System.Runtime.InteropServices.DllImport("libEGL.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int eglTerminate(global::System.IntPtr dpy);

		[global::System.Runtime.InteropServices.DllImport("libEGL.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int eglGetError();

		[global::System.Runtime.InteropServices.DllImport("libEGL.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int eglBindAPI(uint api);

		[global::System.Runtime.InteropServices.DllImport("libEGL.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr eglCreatePbufferSurface(
					global::System.IntPtr dpy, 
					global::System.IntPtr config, 
					int* attrib_list);

		[global::System.Runtime.InteropServices.DllImport("libEGL.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int eglSurfaceAttrib(
					global::System.IntPtr dpy, 
					global::System.IntPtr surface, 
					int attribute, 
					int value);
	}

	public unsafe static partial class libGLESv2_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("libGLESv2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void glGenRenderbuffers(
					int n, 
					uint* buffers);

		[global::System.Runtime.InteropServices.DllImport("libGLESv2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void glGenFramebuffers(
					int n, 
					uint* buffers);

		[global::System.Runtime.InteropServices.DllImport("libGLESv2.dll", EntryPoint="glGenRenderbuffers", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void glGenRenderbuffers__0(
					int n, 
					uint* buffer);

		[global::System.Runtime.InteropServices.DllImport("libGLESv2.dll", EntryPoint="glGenFramebuffers", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void glGenFramebuffers__0(
					int n, 
					uint* buffer);

		[global::System.Runtime.InteropServices.DllImport("libGLESv2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void glGetIntegerv(
					uint pname, 
					int* data);

		[global::System.Runtime.InteropServices.DllImport("libGLESv2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void glGetRenderbufferParameteriv(
					uint target, 
					int pname, 
					int* param);

		[global::System.Runtime.InteropServices.DllImport("libGLESv2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void glBindRenderbuffer(
					uint target, 
					uint buffer);

		[global::System.Runtime.InteropServices.DllImport("libGLESv2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void glViewport(
					int x, 
					int y, 
					int width, 
					int height);

		[global::System.Runtime.InteropServices.DllImport("libGLESv2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void glClearColor(
					float red, 
					float green, 
					float blue, 
					float alpha);

		[global::System.Runtime.InteropServices.DllImport("libGLESv2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void glClear(uint mask);

		[global::System.Runtime.InteropServices.DllImport("libGLESv2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void glRenderbufferStorageMultisampleANGLE(
					uint target, 
					int samples, 
					uint internalformat, 
					int width, 
					int height);

		[global::System.Runtime.InteropServices.DllImport("libGLESv2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void glRenderbufferStorage(
					uint target, 
					uint internalformat, 
					int width, 
					int height);

		[global::System.Runtime.InteropServices.DllImport("libGLESv2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void glBlitFramebufferANGLE(
					int srcX0, 
					int srcY0, 
					int srcX1, 
					int srcY1, 
					int dstX0, 
					int dstY0, 
					int dstX1, 
					int dstY1, 
					uint mask, 
					uint filter);

		[global::System.Runtime.InteropServices.DllImport("libGLESv2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void glBindFramebuffer(
					uint target, 
					uint framebuffer);

		[global::System.Runtime.InteropServices.DllImport("libGLESv2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void glDeleteFramebuffers(
					int n, 
					uint* framebuffers);

		[global::System.Runtime.InteropServices.DllImport("libGLESv2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void glDeleteRenderbuffers(
					int n, 
					uint* renderbuffers);

		[global::System.Runtime.InteropServices.DllImport("libGLESv2.dll", EntryPoint="glDeleteFramebuffers", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void glDeleteFramebuffers__0(
					int n, 
					uint* framebuffer);

		[global::System.Runtime.InteropServices.DllImport("libGLESv2.dll", EntryPoint="glDeleteRenderbuffers", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void glDeleteRenderbuffers__0(
					int n, 
					uint* renderbuffer);

		[global::System.Runtime.InteropServices.DllImport("libGLESv2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void glFramebufferRenderbuffer(
					uint target, 
					uint attachment, 
					uint renderbuffertarget, 
					uint renderbuffer);

		[global::System.Runtime.InteropServices.DllImport("libGLESv2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr glGetString(uint value);
	}

	public unsafe static partial class _MRT__PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void RhpSetHighLevelDebugFuncEvalAbortHelper(global::System.IntPtr highLevelDebugFuncEvalAbortHelper);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr RhpGetFuncEvalTargetAddress();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint RhpGetFuncEvalParameterBufferSize();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint RhpGetFuncEvalMode();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint RhpRecordDebuggeeInitiatedHandle(void* objectHandle);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void RhpVerifyDebuggerCleanup();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr RhpGetCurrentThread();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void RhWaitForPendingFinalizers(int allowReentrantWait);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", EntryPoint="RhYield", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int _RhYield();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void RhFlushProcessWriteBuffers();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", EntryPoint="RhCallDescrWorker", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void RhCallDescrWorkerNative(global::System.IntPtr callDescr);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void memmove(
					byte* dmem, 
					byte* smem, 
					uint size);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void memset(
					byte* mem, 
					int value, 
					uint size);
	}

	public unsafe static partial class __PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("*", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CallingConventionConverter_GetStubs(
					global::System.IntPtr* returnVoidStub, 
					global::System.IntPtr* returnIntegerStub, 
					global::System.IntPtr* commonStub, 
					global::System.IntPtr* returnFloatingPointReturn4Thunk, 
					global::System.IntPtr* returnFloatingPointReturn8Thunk);
	}

	public unsafe static partial class api_ms_win_core_winrt_string_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-string-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WindowsCreateStringReference(
					ushort* sourceString, 
					uint length, 
					global::System_Runtime_InteropServices.HSTRING_HEADER__System_Private_Interop* phstringHeader, 
					void* hstring);
	}

	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-errorhandling-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetLastError();

		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-errorhandling-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void SetLastError(uint dwErrCode);
	}

	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RoInitialize(uint initType);
	}

	public unsafe static partial class api_ms_win_core_localization_l1_2_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int IsValidLocaleName(ushort* lpLocaleName);

		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ResolveLocaleName(
					ushort* lpNameToResolve, 
					ushort* lpLocaleName, 
					int cchLocaleName);
	}

	public unsafe static partial class crypt32_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CertDuplicateCertificateContext(global::System.IntPtr pCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetCertificateContextProperty(
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertContextPropId__System_Security_Cryptography_X509Certificates dwPropId, 
					global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pvData, 
					int* pcbData);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptQueryObject(
					global::Internal_Cryptography_Pal_Native.CertQueryObjectType__System_Security_Cryptography_X509Certificates dwObjectType, 
					void* pvObject, 
					global::Internal_Cryptography_Pal_Native.ExpectedContentTypeFlags__System_Security_Cryptography_X509Certificates dwExpectedContentTypeFlags, 
					global::Internal_Cryptography_Pal_Native.ExpectedFormatTypeFlags__System_Security_Cryptography_X509Certificates dwExpectedFormatTypeFlags, 
					int dwFlags, 
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates* pdwMsgAndCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.ContentType__System_Security_Cryptography_X509Certificates* pdwContentType, 
					global::Internal_Cryptography_Pal_Native.FormatType__System_Security_Cryptography_X509Certificates* pdwFormatType, 
					global::System.IntPtr* phCertStore, 
					global::System.IntPtr* phMsg, 
					global::System.IntPtr* ppvContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertDuplicateCertificateContext", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CertDuplicateCertificateContextWithKeyContainerDeletion(global::System.IntPtr pCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertFreeCertificateContext(global::System.IntPtr pCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptMsgGetParam(
					global::System.IntPtr hCryptMsg, 
					global::Internal_Cryptography_Pal_Native.CryptMessageParameterType__System_Security_Cryptography_X509Certificates dwParamType, 
					int dwIndex, 
					int* pvData, 
					int* pcbData);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CryptMsgGetParam", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptMsgGetParam__0(
					global::System.IntPtr hCryptMsg, 
					global::Internal_Cryptography_Pal_Native.CryptMessageParameterType__System_Security_Cryptography_X509Certificates dwParamType, 
					int dwIndex, 
					byte* pvData, 
					int* pcbData);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr PFXImportCertStore(
					global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pPFX, 
					global::System.IntPtr password, 
					global::Internal_Cryptography_Pal_Native.PfxCertStoreFlags__System_Security_Cryptography_X509Certificates dwFlags);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CryptFindOIDInfo(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Encoding dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertGetCertificateContextProperty", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetCertificateContextProperty__0(
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertContextPropId__System_Security_Cryptography_X509Certificates dwPropId, 
					byte* pvData, 
					int* pcbData);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertCloseStore(
					global::System.IntPtr hCertStore, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptMsgClose(global::System.IntPtr hCryptMsg);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CertFindCertificateInStore(
					global::System.IntPtr hCertStore, 
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CertFindFlags__System_Security_Cryptography_X509Certificates dwFindFlags, 
					global::Internal_Cryptography_Pal_Native.CertFindType__System_Security_Cryptography_X509Certificates dwFindType, 
					void* pvFindPara, 
					global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates* pPrevCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CertEnumCertificatesInStore(
					global::System.IntPtr hCertStore, 
					global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates* pPrevCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertGetNameStringW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetNameString(
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertNameType__System_Security_Cryptography_X509Certificates dwType, 
					global::Internal_Cryptography_Pal_Native.CertNameFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::Internal_Cryptography_Pal_Native.CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates* pvPara, 
					ushort* pszNameString, 
					int cchNameString);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertGetNameStringW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetNameString__0(
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertNameType__System_Security_Cryptography_X509Certificates dwType, 
					global::Internal_Cryptography_Pal_Native.CertNameFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::Internal_Cryptography_Pal_Native.CertNameStringType__System_Security_Cryptography_X509Certificates* pvTypePara, 
					ushort* pszNameString, 
					int cchNameString);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CryptFindOIDInfo", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CryptFindOIDInfo__0(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_X509Certificates dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetCertificateChain(
					global::System.IntPtr hChainEngine, 
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates* pTime, 
					global::System.IntPtr hStore, 
					global::Internal_Cryptography_Pal_Native.CERT_CHAIN_PARA__System_Security_Cryptography_X509Certificates* pChainPara, 
					global::Internal_Cryptography_Pal_Native.CertChainFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::System.IntPtr pvReserved, 
					global::System.IntPtr* ppChainContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertNameToStrW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertNameToStr(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pName, 
					global::Internal_Cryptography_Pal_Native.CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates dwStrType, 
					ushort* psz, 
					int csz);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptFormatObject(
					int dwCertEncodingType, 
					int dwFormatType, 
					int dwFormatStrType, 
					global::System.IntPtr pFormatStruct, 
					byte* lpszStructType, 
					byte* pbEncoded, 
					int cbEncoded, 
					ushort* pbFormat, 
					int* pcbFormat);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CryptFormatObject", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptFormatObject__0(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.FormatObjectType__System_Security_Cryptography_X509Certificates dwFormatType, 
					global::Internal_Cryptography_Pal_Native.FormatObjectStringType__System_Security_Cryptography_X509Certificates dwFormatStrType, 
					global::System.IntPtr pFormatStruct, 
					global::System.IntPtr lpszStructType, 
					byte* pbEncoded, 
					int cbEncoded, 
					ushort* pbFormat, 
					int* pcbFormat);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertVerifyCertificateChainPolicy(
					global::System.IntPtr pszPolicyOID, 
					global::System.IntPtr pChainContext, 
					global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_PARA__System_Security_Cryptography_X509Certificates* pPolicyPara, 
					global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_STATUS__System_Security_Cryptography_X509Certificates* pPolicyStatus);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertAddCertificateLinkToStore(
					global::System.IntPtr hCertStore, 
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertStoreAddDisposition__System_Security_Cryptography_X509Certificates dwAddDisposition, 
					global::System.IntPtr ppStoreContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptImportPublicKeyInfoEx2(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates* pInfo, 
					int dwFlags, 
					void* pvAuxInfo, 
					global::System.IntPtr* phKey);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptDecodeObject(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::System.IntPtr lpszStructType, 
					byte* pbEncoded, 
					int cbEncoded, 
					global::Internal_Cryptography_Pal_Native.CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					byte* pvStructInfo, 
					int* pcbStructInfo);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CertFreeCertificateChain(global::System.IntPtr pChainContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CertOpenStore(
					global::System.IntPtr lpszStoreProvider, 
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwMsgAndCertEncodingType, 
					global::System.IntPtr hCryptProv, 
					global::Internal_Cryptography_Pal_Native.CertStoreFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					ushort* pvPara);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CryptDecodeObject", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptDecodeObjectPointer(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::System.IntPtr lpszStructType, 
					byte* pbEncoded, 
					int cbEncoded, 
					global::Internal_Cryptography_Pal_Native.CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					void* pvStructInfo, 
					int* pcbStructInfo);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CryptFindOIDInfo", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CryptFindOIDInfo__1(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Cng dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertControlStore(
					global::System.IntPtr hCertStore, 
					global::Internal_Cryptography_Pal_Native.CertControlStoreFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::Internal_Cryptography_Pal_Native.CertControlStoreType__System_Security_Cryptography_X509Certificates dwControlType, 
					global::System.IntPtr pvCtrlPara);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates* CertFindExtension(
					byte* pszObjId, 
					int cExtensions, 
					global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates* rgExtensions);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetValidUsages(
					int cCerts, 
					global::System.IntPtr* rghCerts, 
					int* cNumOIDs, 
					void* rghOIDs, 
					int* pcbOIDs);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetIntendedKeyUsage(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates* pCertInfo, 
					global::System_Security_Cryptography_X509Certificates.X509KeyUsageFlags__System_Security_Cryptography_X509Certificates* pbKeyUsage, 
					int cbKeyUsage);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertVerifyTimeValidity(
					global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates* pTimeToVerify, 
					global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates* pCertInfo);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertEnumCertificatesInStore", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security* CertEnumCertificatesInStore__0(
					global::System.IntPtr hCertStore, 
					global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security* pPrevCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertVerifyCertificateChainPolicy", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertVerifyCertificateChainPolicy__0(
					global::System.IntPtr pszPolicyOID, 
					global::System.IntPtr pChainContext, 
					global::_.Interop_Crypt32_CERT_CHAIN_POLICY_PARA__System_Net_Security* pPolicyPara, 
					global::_.Interop_Crypt32_CERT_CHAIN_POLICY_STATUS__System_Net_Security* pPolicyStatus);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertFreeCertificateContext", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertFreeCertificateContext__0(global::System.IntPtr pCertContext);
	}

	public unsafe static partial class kernel32_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::_.Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetCurrentProcessId();

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LocalAlloc(
					int uFlags, 
					global::System.UIntPtr sizetdwBytes);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LocalFree(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__0(
					global::Internal_Cryptography_Pal_Native.FormatMessageFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::System.IntPtr lpSource, 
					int dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr Arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__1(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__2(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__3(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr GetCurrentThread();

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr GetCurrentProcess();

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CloseHandle(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CheckTokenMembershipEx(
					global::System.IntPtr TokenHandle, 
					byte* SidToCheck, 
					uint Flags, 
					int* IsMember);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="LocalAlloc", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LocalAlloc__0(
					int uFlags, 
					global::System.UIntPtr sizetdwBytes);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="LocalFree", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LocalFree__0(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int SetFileCompletionNotificationModes(
					global::System.IntPtr handle, 
					global::_.Interop_Kernel32_FileCompletionNotificationModes__System_Net_Sockets flags);
	}

	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-robuffer-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int RoGetBufferMarshaler(void** bufferMarshalerPtr);
	}

	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-com-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					global::System.IntPtr* ppv);
	}

	public unsafe static partial class advapi32_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptAcquireContextW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptAcquireContext(
					global::System.IntPtr* psafeProvHandle, 
					ushort* pszContainer, 
					ushort* pszProvider, 
					int dwProvType, 
					global::Internal_Cryptography_Pal_Native.CryptAcquireContextFlags__System_Security_Cryptography_X509Certificates dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptGetKeyParam(
					global::System.IntPtr safeKeyHandle, 
					int dwParam, 
					byte* pbData, 
					int* pdwDataLen, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptGetDefaultProviderW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptGetDefaultProvider(
					int dwProvType, 
					global::System.IntPtr pdwReserved, 
					int dwFlags, 
					ushort* pszProvName, 
					int* IntPtrProvName);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptAcquireContextW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptAcquireContext__0(
					global::System.IntPtr* psafeProvHandle, 
					ushort* pszContainer, 
					ushort* pszProvider, 
					int dwProvType, 
					uint dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptGetProvParam(
					global::System.IntPtr safeProvHandle, 
					int dwParam, 
					byte* pbData, 
					int* dwDataLen, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptGetUserKey", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int _CryptGetUserKey(
					global::System.IntPtr safeProvHandle, 
					int dwKeySpec, 
					global::System.IntPtr* safeKeyHandle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptDestroyKey(global::System.IntPtr hKey);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptReleaseContext(
					global::System.IntPtr safeProvHandle, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptImportKey", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int _CryptImportKey(
					global::System.IntPtr hProv, 
					byte* pbData, 
					int dwDataLen, 
					global::System.IntPtr hPubKey, 
					int dwFlags, 
					global::System.IntPtr* phKey);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptSetProvParam", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptSetProvParamIndirectPtr(
					global::System.IntPtr safeProvHandle, 
					global::Internal_NativeCrypto.CapiHelper_CryptGetProvParam__System_Security_Cryptography_Csp dwParam, 
					global::System.IntPtr* pbData, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptSetProvParam(
					global::System.IntPtr safeProvHandle, 
					global::Internal_NativeCrypto.CapiHelper_CryptGetProvParam__System_Security_Cryptography_Csp dwParam, 
					global::System.IntPtr pbData, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptGenKey", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int _CryptGenKey(
					global::System.IntPtr safeProvHandle, 
					int Algid, 
					int dwFlags, 
					global::System.IntPtr* safeKeyHandle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RevertToSelf();

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ImpersonateLoggedOnUser(global::System.IntPtr userToken);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int OpenThreadToken(
					global::System.IntPtr ThreadHandle, 
					global::System_Security_Principal.TokenAccessLevels__System_Security_Principal_Windows dwDesiredAccess, 
					int bOpenAsSelf, 
					global::System.IntPtr* phThreadToken);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int OpenProcessToken(
					global::System.IntPtr ProcessToken, 
					global::System_Security_Principal.TokenAccessLevels__System_Security_Principal_Windows DesiredAccess, 
					global::System.IntPtr* TokenHandle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint LsaNtStatusToWinError(uint status);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DuplicateTokenEx(
					global::System.IntPtr hExistingToken, 
					uint dwDesiredAccess, 
					global::System.IntPtr lpTokenAttributes, 
					uint ImpersonationLevel, 
					uint TokenType, 
					global::System.IntPtr* phNewToken);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetTokenInformation(
					global::System.IntPtr TokenHandle, 
					uint TokenInformationClass, 
					global::System.IntPtr TokenInformation, 
					uint TokenInformationLength, 
					uint* ReturnLength);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint LsaLookupSids(
					global::System.IntPtr handle, 
					int count, 
					global::System.IntPtr* sids, 
					global::System.IntPtr* referencedDomains, 
					global::System.IntPtr* names);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint LsaLookupNames2(
					global::System.IntPtr handle, 
					int flags, 
					int count, 
					global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.UnsafeType* names, 
					global::System.IntPtr* referencedDomains, 
					global::System.IntPtr* sids);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint LsaOpenPolicy(
					ushort* systemName, 
					global::_.Interop_LSA_OBJECT_ATTRIBUTES__System_Security_Principal_Windows* attributes, 
					int accessMask, 
					global::System.IntPtr* handle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int LsaClose(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int LsaFreeMemory(global::System.IntPtr handle);
	}

	public unsafe static partial class ws2_32_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WSAGetOverlappedResult(
					global::System.IntPtr socketHandle, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					uint* bytesTransferred, 
					int wait, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets* socketFlags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					global::System.IntPtr* pointer, 
					int optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="setsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__0(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					byte* optionValue, 
					int optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockname(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int* socketAddressSize);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getpeername(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int* socketAddressSize);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAStartup(
					short wVersionRequested, 
					global::_.Interop_Winsock_WSAData__System_Net_NameResolution__Impl.UnsafeType* lpWSAData);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int select(
					int ignoredParameter, 
					global::System.IntPtr* readfds, 
					global::System.IntPtr* writefds, 
					global::System.IntPtr* exceptfds, 
					global::_.Interop_Winsock_TimeValue__System_Net_Sockets* timeout);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="select", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int select__0(
					int ignoredParameter, 
					global::System.IntPtr* readfds, 
					global::System.IntPtr* writefds, 
					global::System.IntPtr* exceptfds, 
					global::System.IntPtr nullTimeout);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives ioctlsocket(
					global::System.IntPtr socketHandle, 
					int cmd, 
					int* argp);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives shutdown(
					global::System.IntPtr socketHandle, 
					int how);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="setsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__1(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					int* optionValue, 
					int optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int recv(
					global::System.IntPtr socketHandle, 
					byte* pinnedBuffer, 
					int len, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr gethostbyname(byte* host);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAIoctl(
					global::System.IntPtr socketHandle, 
					int ioControlCode, 
					global::System.Guid* guid, 
					int guidSize, 
					global::System.IntPtr* funcPtr, 
					int funcPtrSize, 
					int* bytesTransferred, 
					global::System.IntPtr shouldBeNull, 
					global::System.IntPtr shouldBeNull2);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetAddrInfoW(
					ushort* nodename, 
					ushort* servicename, 
					global::System_Net_Sockets.AddressInfo__System_Net_NameResolution* hints, 
					global::System.IntPtr* handle);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr WSASocketW(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Sockets.SocketType__System_Net_Sockets socketType, 
					int protocolType, 
					global::System.IntPtr protocolInfo, 
					int group, 
					int flags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives closesocket(global::System.IntPtr socketHandle);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="WSASocketW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr WSASocketW__0(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Sockets.SocketType__System_Net_Sockets socketType, 
					global::System_Net_Sockets.ProtocolType__System_Net_Sockets protocolType, 
					global::System.IntPtr protocolInfo, 
					uint group, 
					global::_.Interop_Winsock_SocketConstructorFlags__System_Net_Sockets flags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAConnect(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int socketAddressSize, 
					global::System.IntPtr inBuffer, 
					global::System.IntPtr outBuffer, 
					global::System.IntPtr sQOS, 
					global::System.IntPtr gQOS);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives listen(
					global::System.IntPtr socketHandle, 
					int backlog);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="WSASocketW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr WSASocketW__1(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Internals.SocketType__System_Net_NameResolution socketType, 
					int protocolType, 
					global::System.IntPtr protocolInfo, 
					int group, 
					int flags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="closesocket", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives closesocket__0(global::System.IntPtr socketHandle);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives gethostname(
					byte* hostName, 
					int bufferLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives bind(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int socketAddressSize);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					int* optionValue, 
					int* optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void freeaddrinfo(global::System.IntPtr info);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="getsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__0(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					global::_.Interop_Winsock_Linger__System_Net_Sockets* optionValue, 
					int* optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="getsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__1(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					global::_.Interop_Winsock_IPMulticastRequest__System_Net_Sockets* optionValue, 
					int* optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="getsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__2(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets__Impl.UnsafeType* optionValue, 
					int* optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int send(
					global::System.IntPtr socketHandle, 
					byte* pinnedBuffer, 
					int len, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="ioctlsocket", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives ioctlsocket__0(
					global::System.IntPtr handle, 
					int cmd, 
					int* argp);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="setsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__2(
					global::System.IntPtr handle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					global::_.Interop_Winsock_Linger__System_Net_Sockets* linger, 
					int optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives WSARecv(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.WSABuffer__System_Net_Sockets* buffer, 
					int bufferCount, 
					int* bytesTransferred, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets* socketFlags, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					global::System.IntPtr completionRoutine);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives WSASend(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.WSABuffer__System_Net_Sockets* buffers, 
					int bufferCount, 
					int* bytesTransferred, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					global::System.IntPtr completionRoutine);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr accept(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int* socketAddressSize);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives GetNameInfoW(
					byte* sa, 
					int salen, 
					ushort* host, 
					int hostlen, 
					ushort* serv, 
					int servlen, 
					int flags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr gethostbyaddr(
					int* addr, 
					int len, 
					global::System_Net_Internals.ProtocolFamily__System_Net_NameResolution type);
	}

	public unsafe static partial class OleAut32_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("OleAut32", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void SysFreeString(global::System.IntPtr bstr);
	}

	public unsafe static partial class ncrypt_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptOpenKey(
					global::System.IntPtr hProvider, 
					global::System.IntPtr* phKey, 
					ushort* pszKeyName, 
					int dwLegacyKeySpec, 
					global::System_Security_Cryptography.CngKeyOpenOptions__System_Security_Cryptography_Cng dwFlags);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptDeleteKey(
					global::System.IntPtr hKey, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptOpenStorageProvider(
					global::System.IntPtr* phProvider, 
					ushort* pszProviderName, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptFreeObject(global::System.IntPtr hObject);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptImportKey(
					global::System.IntPtr hProvider, 
					global::System.IntPtr hImportKey, 
					ushort* pszBlobType, 
					global::System.IntPtr pParameterList, 
					global::System.IntPtr* phKey, 
					byte* pbData, 
					int cbData, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptGetProperty(
					global::System.IntPtr hObject, 
					ushort* pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					global::System_Security_Cryptography.CngPropertyOptions__System_Security_Cryptography_Cng dwFlags);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptSetProperty(
					global::System.IntPtr hObject, 
					ushort* pszProperty, 
					void* pbInput, 
					int cbInput, 
					global::System_Security_Cryptography.CngPropertyOptions__System_Security_Cryptography_Cng dwFlags);
	}

	public unsafe static partial class iphlpapi_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("iphlpapi.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetNetworkParams(
					global::System.IntPtr pFixedInfo, 
					uint* pOutBufLen);
	}

	public unsafe static partial class BCrypt_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptExportKey(
					global::System.IntPtr hKey, 
					global::System.IntPtr hExportKey, 
					ushort* pszBlobType, 
					byte* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptGetProperty(
					global::System.IntPtr hObject, 
					ushort* pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptDestroyKey(global::System.IntPtr hKey);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptCreateHash(
					global::System.IntPtr hAlgorithm, 
					global::System.IntPtr* phHash, 
					global::System.IntPtr pbHashObject, 
					int cbHashObject, 
					byte* pbSecret, 
					int cbSecret, 
					global::_.Interop_BCrypt_BCryptCreateHashFlags__System_Security_Cryptography_Algorithms dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", EntryPoint="BCryptGetProperty", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptGetProperty__0(
					global::System.IntPtr hObject, 
					ushort* pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptOpenAlgorithmProvider(
					global::System.IntPtr* phAlgorithm, 
					ushort* pszAlgId, 
					ushort* pszImplementation, 
					global::_.Interop_BCrypt_BCryptOpenAlgorithmProviderFlags__System_Security_Cryptography_Algorithms dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptCloseAlgorithmProvider(
					global::System.IntPtr hAlgorithm, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptDestroyHash(global::System.IntPtr hHash);
	}

	public unsafe static partial class sspicli_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int LsaGetLogonSessionData(
					global::_.Interop_LUID__System_Security_Principal_Windows* LogonId, 
					global::System.IntPtr* ppLogonSessionData);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int LsaFreeReturnBuffer(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int EncryptMessage(
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* contextHandle, 
					uint qualityOfProtection, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputOutput, 
					uint sequenceNumber);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DecryptMessage(
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* contextHandle, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputOutput, 
					uint sequenceNumber, 
					uint* qualityOfProtection);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int EnumerateSecurityPackagesW(
					int* pkgnum, 
					global::System.IntPtr* handle);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ApplyControlToken(
					void* inContextPtr, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputBuffers);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FreeContextBuffer(global::System.IntPtr contextBuffer);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int AcceptSecurityContext(
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* credentialHandle, 
					void* inContextPtr, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputBuffer, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security inFlags, 
					global::_.Interop_SspiCli_Endianness__System_Net_Security endianness, 
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* outContextPtr, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* outputBuffer, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security* attributes, 
					long* timeStamp);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DeleteSecurityContext(global::_.Interop_SspiCli_CredHandle__System_Net_Security* handlePtr);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int InitializeSecurityContextW(
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* credentialHandle, 
					void* inContextPtr, 
					byte* targetName, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security inFlags, 
					int reservedI, 
					global::_.Interop_SspiCli_Endianness__System_Net_Security endianness, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputBuffer, 
					int reservedII, 
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* outContextPtr, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* outputBuffer, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security* attributes, 
					long* timeStamp);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int QueryContextAttributesW(
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* contextHandle, 
					global::_.Interop_SspiCli_ContextAttribute__System_Net_Security attribute, 
					void* buffer);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int AcquireCredentialsHandleW(
					ushort* principal, 
					ushort* moduleName, 
					int usage, 
					void* logonID, 
					global::_.Interop_SspiCli_SCHANNEL_CRED__System_Net_Security* authData, 
					void* keyCallback, 
					void* keyArgument, 
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* handlePtr, 
					long* timeStamp);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FreeCredentialsHandle(global::_.Interop_SspiCli_CredHandle__System_Net_Security* handlePtr);
	}
}

